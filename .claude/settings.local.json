{
  "permissions": {
    "allow": [
      "Bash(aws dynamodb create-table:*)",
      "Bash(--table-name KDP_Business_Memory )",
      "Bash(--attribute-definitions )",
      "Bash(AttributeName=book_id,AttributeType=S )",
      "Bash(--key-schema )",
      "Bash(AttributeName=book_id,KeyType=HASH )",
      "Bash(--billing-mode PAY_PER_REQUEST )",
      "Bash(--region us-east-2)",
      "Bash(aws sso:*)",
      "Bash(--table-name KDP_Business_Memory )",
      "Bash(--attribute-definitions )",
      "Bash(AttributeName=book_id,AttributeType=S )",
      "Bash(--key-schema )",
      "Bash(AttributeName=book_id,KeyType=HASH )",
      "Bash(--billing-mode PAY_PER_REQUEST )",
      "Bash(cat:*)",
      "Bash(--table-name KDP_Business_Memory )",
      "Bash(--attribute-definitions )",
      "Bash(AttributeName=book_id,AttributeType=S )",
      "Bash(--key-schema )",
      "Bash(AttributeName=book_id,KeyType=HASH )",
      "Bash(--billing-mode PAY_PER_REQUEST )",
      "Bash(--profile easy-smart)",
      "Bash(--table-name KDP_Business_Memory )",
      "Bash(--attribute-definitions )",
      "Bash(AttributeName=book_id,AttributeType=S )",
      "Bash(--key-schema )",
      "Bash(AttributeName=book_id,KeyType=HASH )",
      "Bash(--billing-mode PAY_PER_REQUEST )",
      "Bash(--profile kindlemint-keys)",
      "Bash(aws dynamodb describe-table:*)",
      "Bash(git add:*)",
      "Bash(chmod:*)",
      "Bash(python tests:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(cp:*)",
      "Bash(python:*)",
      "Bash(zip:*)",
      "Bash(AWS_PROFILE=kindlemint-keys python scripts/deploy_lambda.py)",
      "Bash(./deploy-kdp-ingestor.sh:*)",
      "Bash(AWS_PROFILE=kindlemint-keys ./deploy-kdp-ingestor.sh)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stack-events --stack-name kindlemint-kdp-ingestor --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation wait stack-delete-complete --stack-name kindlemint-kdp-ingestor)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation delete-stack --stack-name kindlemint-kdp-ingestor)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stacks --stack-name kindlemint-kdp-ingestor --query 'Stacks[0].StackStatus' --output text)",
      "Bash(AWS_PROFILE=kindlemint-keys aws events list-rules --query 'Rules[?contains(Name, `KDP`) || contains(Name, `kindlemint`) || contains(Name, `ingestor`)].[Name,State,ScheduleExpression]' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda list-functions --query 'Functions[?contains(FunctionName, `KDP`) || contains(FunctionName, `kindlemint`) || contains(FunctionName, `ingestor`)].[FunctionName,Runtime,LastModified]' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"topic\": \"Live System Test: The Phoenix Key\"}' --cli-binary-format raw-in-base64-out response.json)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda update-function-code --function-name kindlemintEngineFn --zip-file fileb://lambda_deploy.zip)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"topic\": \"Live System Test: The Phoenix Key\", \"source\": \"manual\"}' --cli-binary-format raw-in-base64-out response.json)",
      "Bash(AWS_PROFILE=kindlemint-keys aws events list-rules --query 'Rules[*].[Name,State,ScheduleExpression,Targets[0].Arn]' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws events put-targets --rule \"KindleMint-Daily-Pipeline\" --targets \"Id\"=\"1\",\"Arn\"=\"arn:aws:lambda:us-east-2:352505431931:function:kindlemintEngineFn\",\"Input\"='{\"source\": \"scheduled\", \"trigger\": \"daily_autonomous\"}')",
      "Bash(AWS_PROFILE=kindlemint-keys aws events put-targets --rule KindleMint-Daily-Pipeline --targets '[{\"Id\": \"1\", \"Arn\": \"arn:aws:lambda:us-east-2:352505431931:function:kindlemintEngineFn\", \"Input\": \"{\\\"source\\\": \\\"scheduled\\\", \\\"trigger\\\": \\\"daily_autonomous\\\"}\"}]')",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda add-permission --function-name kindlemintEngineFn --statement-id allow-eventbridge --action lambda:InvokeFunction --principal events.amazonaws.com --source-arn \"arn:aws:events:us-east-2:352505431931:rule/KindleMint-Daily-Pipeline\")",
      "Bash(AWS_PROFILE=kindlemint-keys aws events describe-rule --name KindleMint-Daily-Pipeline)",
      "Bash(AWS_PROFILE=kindlemint-keys aws events list-targets-by-rule --rule KindleMint-Daily-Pipeline)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"source\": \"scheduled\", \"trigger\": \"daily_autonomous\"}' --cli-binary-format raw-in-base64-out scheduled_test_response.json)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"source\": \"ceo_initiated\", \"trigger\": \"first_autonomous_run\", \"note\": \"CEO Go-Live activation\"}' --cli-binary-format raw-in-base64-out first_autonomous_run.json)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"source\": \"ceo_directive\", \"trigger\": \"immediate_publication\", \"priority\": \"high\", \"note\": \"CEO requests immediate book generation to start daily operations\"}' --cli-binary-format raw-in-base64-out ceo_directed_run.json)",
      "Bash(AWS_PROFILE=kindlemint-keys aws logs describe-log-groups --log-group-name-prefix \"/aws/lambda/kindlemintEngineFn\")",
      "Bash(AWS_PROFILE=kindlemint-keys aws logs describe-log-streams --log-group-name \"/aws/lambda/kindlemintEngineFn\" --order-by LastEventTime --descending --max-items 5)",
      "Bash(AWS_PROFILE=kindlemint-keys aws logs get-log-events --log-group-name \"/aws/lambda/kindlemintEngineFn\" --log-stream-name \"2025/06/17/[\\$LATEST]17e4924165954c0e9007a7aa38ae917e\" --start-from-head)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"source\": \"ceo_immediate\", \"trigger\": \"start_now\", \"priority\": \"urgent\", \"note\": \"CEO wants first book package generated immediately for manual upload\"}' --cli-binary-format raw-in-base64-out immediate_start.json)",
      "Bash(pip install:*)",
      "Bash(touch:*)",
      "Bash(./deploy-v3.sh:*)",
      "Bash(aws configure:*)",
      "Bash(rm:*)",
      "Bash(gh workflow:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(aws cloudformation delete-stack:*)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation delete-stack --stack-name kindlemint-v3-infrastructure --region us-east-1)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation wait stack-delete-complete --stack-name kindlemint-v3-infrastructure --region us-east-1)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stacks --stack-name kindlemint-v3-infrastructure --region us-east-1 --query 'Stacks[0].Outputs')",
      "Bash(AWS_PROFILE=kindlemint-keys aws iam list-roles --query 'Roles[?contains(RoleName, `kindlemint-v3`)].RoleName' --region us-east-1)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stacks --stack-name kindlemint-v3-infrastructure --region us-east-1 --query 'Stacks[0].StackStatus' --output text)",
      "Bash(mv:*)",
      "Bash(AWS_PROFILE=kindlemint-keys aws dynamodb scan --table-name KDP_Business_Memory --region us-east-1 --max-items 5)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemint-v3-orchestrator --payload '{\"series\": \"Large Print Crossword Masters\", \"volume\": 1, \"brand\": \"Senior Puzzle Studio\", \"niche\": \"large_print_crosswords_seniors\", \"difficulty\": \"beginner\", \"source\": \"ceo_directive\"}' --cli-binary-format raw-in-base64-out --region us-east-1 crossword_generation_response.json)",
      "Bash(aws cloudformation deploy:*)",
      "Bash(aws sts:*)",
      "Bash(grep:*)",
      "Bash(aws:*)",
      "Bash(--function-name kindlemint-v3-orchestrator )",
      "Bash(--payload '{\"\"series\"\": \"\"Large Print Crossword Masters\"\", \"\"volume\"\": 1, \"\"brand\"\": \"\"Senior Puzzle Studio\"\", \"\"niche\"\": \"\"large_print_crosswords_seniors\"\", \"\"difficulty\"\": \"\"beginner\"\", \"\"source\"\": \"\"ceo_directive\"\"}' )",
      "Bash(--cli-binary-format raw-in-base64-out )",
      "Bash(--region us-east-1 )",
      "Bash(crossword_generation_response.json)",
      "Bash(playwright install:*)",
      "Bash(OPENAI_API_KEY=\"${OPENAI_API_KEY}\" python scripts/professional_cover_generator.py --all)",
      "Bash(source .env)",
      "Bash(rg:*)",
      "Bash(true)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git pull:*)",
      "Bash(git stash:*)",
      "Bash(sed:*)",
      "Bash(if [ -z \"$KDP_EMAIL\" ])",
      "Bash(then echo \"❌ KDP_EMAIL not set\")",
      "Bash(else echo \"✅ KDP_EMAIL configured\")",
      "Bash(fi)",
      "Bash(if [ -z \"$KDP_PASSWORD\" ])",
      "Bash(then echo \"❌ KDP_PASSWORD not set\")",
      "Bash(else echo \"✅ KDP_PASSWORD configured\")",
      "Bash(git lfs:*)",
      "Bash(for vol in {1..5})",
      "Bash(do mkdir -p \"volume_$vol\")",
      "Bash(done)"
    ],
    "deny": []
  }
}