{
  "permissions": {
    "allow": [
      "Bash(aws dynamodb create-table:*)",
      "Bash(--table-name KDP_Business_Memory )",
      "Bash(--attribute-definitions )",
      "Bash(AttributeName=book_id,AttributeType=S )",
      "Bash(--key-schema )",
      "Bash(AttributeName=book_id,KeyType=HASH )",
      "Bash(--billing-mode PAY_PER_REQUEST )",
      "Bash(--region us-east-2)",
      "Bash(aws sso:*)",
      "Bash(--table-name KDP_Business_Memory )",
      "Bash(--attribute-definitions )",
      "Bash(AttributeName=book_id,AttributeType=S )",
      "Bash(--key-schema )",
      "Bash(AttributeName=book_id,KeyType=HASH )",
      "Bash(--billing-mode PAY_PER_REQUEST )",
      "Bash(cat:*)",
      "Bash(--table-name KDP_Business_Memory )",
      "Bash(--attribute-definitions )",
      "Bash(AttributeName=book_id,AttributeType=S )",
      "Bash(--key-schema )",
      "Bash(AttributeName=book_id,KeyType=HASH )",
      "Bash(--billing-mode PAY_PER_REQUEST )",
      "Bash(--profile easy-smart)",
      "Bash(--table-name KDP_Business_Memory )",
      "Bash(--attribute-definitions )",
      "Bash(AttributeName=book_id,AttributeType=S )",
      "Bash(--key-schema )",
      "Bash(AttributeName=book_id,KeyType=HASH )",
      "Bash(--billing-mode PAY_PER_REQUEST )",
      "Bash(--profile kindlemint-keys)",
      "Bash(aws dynamodb describe-table:*)",
      "Bash(git add:*)",
      "Bash(chmod:*)",
      "Bash(python tests:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(cp:*)",
      "Bash(python:*)",
      "Bash(zip:*)",
      "Bash(AWS_PROFILE=kindlemint-keys python scripts/deploy_lambda.py)",
      "Bash(./deploy-kdp-ingestor.sh:*)",
      "Bash(AWS_PROFILE=kindlemint-keys ./deploy-kdp-ingestor.sh)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stack-events --stack-name kindlemint-kdp-ingestor --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation wait stack-delete-complete --stack-name kindlemint-kdp-ingestor)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation delete-stack --stack-name kindlemint-kdp-ingestor)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stacks --stack-name kindlemint-kdp-ingestor --query 'Stacks[0].StackStatus' --output text)",
      "Bash(AWS_PROFILE=kindlemint-keys aws events list-rules --query 'Rules[?contains(Name, `KDP`) || contains(Name, `kindlemint`) || contains(Name, `ingestor`)].[Name,State,ScheduleExpression]' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda list-functions --query 'Functions[?contains(FunctionName, `KDP`) || contains(FunctionName, `kindlemint`) || contains(FunctionName, `ingestor`)].[FunctionName,Runtime,LastModified]' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"topic\": \"Live System Test: The Phoenix Key\"}' --cli-binary-format raw-in-base64-out response.json)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda update-function-code --function-name kindlemintEngineFn --zip-file fileb://lambda_deploy.zip)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"topic\": \"Live System Test: The Phoenix Key\", \"source\": \"manual\"}' --cli-binary-format raw-in-base64-out response.json)",
      "Bash(AWS_PROFILE=kindlemint-keys aws events list-rules --query 'Rules[*].[Name,State,ScheduleExpression,Targets[0].Arn]' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws events put-targets --rule \"KindleMint-Daily-Pipeline\" --targets \"Id\"=\"1\",\"Arn\"=\"arn:aws:lambda:us-east-2:352505431931:function:kindlemintEngineFn\",\"Input\"='{\"source\": \"scheduled\", \"trigger\": \"daily_autonomous\"}')",
      "Bash(AWS_PROFILE=kindlemint-keys aws events put-targets --rule KindleMint-Daily-Pipeline --targets '[{\"Id\": \"1\", \"Arn\": \"arn:aws:lambda:us-east-2:352505431931:function:kindlemintEngineFn\", \"Input\": \"{\\\"source\\\": \\\"scheduled\\\", \\\"trigger\\\": \\\"daily_autonomous\\\"}\"}]')",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda add-permission --function-name kindlemintEngineFn --statement-id allow-eventbridge --action lambda:InvokeFunction --principal events.amazonaws.com --source-arn \"arn:aws:events:us-east-2:352505431931:rule/KindleMint-Daily-Pipeline\")",
      "Bash(AWS_PROFILE=kindlemint-keys aws events describe-rule --name KindleMint-Daily-Pipeline)",
      "Bash(AWS_PROFILE=kindlemint-keys aws events list-targets-by-rule --rule KindleMint-Daily-Pipeline)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"source\": \"scheduled\", \"trigger\": \"daily_autonomous\"}' --cli-binary-format raw-in-base64-out scheduled_test_response.json)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"source\": \"ceo_initiated\", \"trigger\": \"first_autonomous_run\", \"note\": \"CEO Go-Live activation\"}' --cli-binary-format raw-in-base64-out first_autonomous_run.json)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"source\": \"ceo_directive\", \"trigger\": \"immediate_publication\", \"priority\": \"high\", \"note\": \"CEO requests immediate book generation to start daily operations\"}' --cli-binary-format raw-in-base64-out ceo_directed_run.json)",
      "Bash(AWS_PROFILE=kindlemint-keys aws logs describe-log-groups --log-group-name-prefix \"/aws/lambda/kindlemintEngineFn\")",
      "Bash(AWS_PROFILE=kindlemint-keys aws logs describe-log-streams --log-group-name \"/aws/lambda/kindlemintEngineFn\" --order-by LastEventTime --descending --max-items 5)",
      "Bash(AWS_PROFILE=kindlemint-keys aws logs get-log-events --log-group-name \"/aws/lambda/kindlemintEngineFn\" --log-stream-name \"2025/06/17/[\\$LATEST]17e4924165954c0e9007a7aa38ae917e\" --start-from-head)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemintEngineFn --payload '{\"source\": \"ceo_immediate\", \"trigger\": \"start_now\", \"priority\": \"urgent\", \"note\": \"CEO wants first book package generated immediately for manual upload\"}' --cli-binary-format raw-in-base64-out immediate_start.json)",
      "Bash(pip install:*)",
      "Bash(touch:*)",
      "Bash(./deploy-v3.sh:*)",
      "Bash(aws configure:*)",
      "Bash(rm:*)",
      "Bash(gh workflow:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(aws cloudformation delete-stack:*)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation delete-stack --stack-name kindlemint-v3-infrastructure --region us-east-1)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation wait stack-delete-complete --stack-name kindlemint-v3-infrastructure --region us-east-1)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stacks --stack-name kindlemint-v3-infrastructure --region us-east-1 --query 'Stacks[0].Outputs')",
      "Bash(AWS_PROFILE=kindlemint-keys aws iam list-roles --query 'Roles[?contains(RoleName, `kindlemint-v3`)].RoleName' --region us-east-1)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stacks --stack-name kindlemint-v3-infrastructure --region us-east-1 --query 'Stacks[0].StackStatus' --output text)",
      "Bash(mv:*)",
      "Bash(AWS_PROFILE=kindlemint-keys aws dynamodb scan --table-name KDP_Business_Memory --region us-east-1 --max-items 5)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke --function-name kindlemint-v3-orchestrator --payload '{\"series\": \"Large Print Crossword Masters\", \"volume\": 1, \"brand\": \"Senior Puzzle Studio\", \"niche\": \"large_print_crosswords_seniors\", \"difficulty\": \"beginner\", \"source\": \"ceo_directive\"}' --cli-binary-format raw-in-base64-out --region us-east-1 crossword_generation_response.json)",
      "Bash(aws cloudformation deploy:*)",
      "Bash(aws sts:*)",
      "Bash(grep:*)",
      "Bash(aws:*)",
      "Bash(--function-name kindlemint-v3-orchestrator )",
      "Bash(--payload '{\"\"series\"\": \"\"Large Print Crossword Masters\"\", \"\"volume\"\": 1, \"\"brand\"\": \"\"Senior Puzzle Studio\"\", \"\"niche\"\": \"\"large_print_crosswords_seniors\"\", \"\"difficulty\"\": \"\"beginner\"\", \"\"source\"\": \"\"ceo_directive\"\"}' )",
      "Bash(--cli-binary-format raw-in-base64-out )",
      "Bash(--region us-east-1 )",
      "Bash(crossword_generation_response.json)",
      "Bash(playwright install:*)",
      "Bash(OPENAI_API_KEY=\"${OPENAI_API_KEY}\" python scripts/professional_cover_generator.py --all)",
      "Bash(source .env)",
      "Bash(rg:*)",
      "Bash(true)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git pull:*)",
      "Bash(git stash:*)",
      "Bash(sed:*)",
      "Bash(if [ -z \"$KDP_EMAIL\" ])",
      "Bash(then echo \"‚ùå KDP_EMAIL not set\")",
      "Bash(else echo \"‚úÖ KDP_EMAIL configured\")",
      "Bash(fi)",
      "Bash(if [ -z \"$KDP_PASSWORD\" ])",
      "Bash(then echo \"‚ùå KDP_PASSWORD not set\")",
      "Bash(else echo \"‚úÖ KDP_PASSWORD configured\")",
      "Bash(git lfs:*)",
      "Bash(for vol in {1..5})",
      "Bash(do mkdir -p \"volume_$vol\")",
      "Bash(done)",
      "Bash(git checkout:*)",
      "Bash(gh run cancel:*)",
      "Bash(git rm:*)",
      "Bash(jq:*)",
      "Bash(playwright codegen:*)",
      "WebFetch(domain:nova.amazon.com)",
      "WebFetch(domain:github.com)",
      "Bash(./infrastructure/apply-ecr-lifecycle-policy.sh:*)",
      "Bash(git clean:*)",
      "Bash(gh api:*)",
      "Bash(tree:*)",
      "Bash(brew install:*)",
      "Bash(open:*)",
      "Bash(printenv)",
      "Bash(SIMULATE_BROWSER_FAILURE=true python -c \"\nimport sys\nimport os\nsys.path.append('scripts')\nfrom dotenv import load_dotenv\nload_dotenv()\n\nprint('üî• Testing Browser Automation FAILURE for Seer AI analysis...')\nexec(open('scripts/sentry_kdp_automation.py').read())\n\")",
      "Bash(SIMULATE_AUTH_FAILURE=true python -c \"\nimport sys\nimport os\nsys.path.append('scripts')\nfrom dotenv import load_dotenv\nload_dotenv()\n\nprint('üî• Testing KDP AUTHENTICATION FAILURE for Seer AI...')\nexec(open('scripts/sentry_kdp_automation.py').read())\n\")",
      "Bash(SIMULATE_UPLOAD_FAILURE=true python -c \"\nimport sys\nimport os\nsys.path.append('scripts')\nfrom dotenv import load_dotenv\nload_dotenv()\n\nprint('üî• Testing FILE UPLOAD FAILURE for Seer AI...')\nexec(open('scripts/sentry_kdp_automation.py').read())\n\")",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(gs:*)",
      "Bash(gh run watch:*)",
      "Bash(git ls-tree:*)",
      "Bash(git restore:*)",
      "Bash(gh run download:*)",
      "Bash(gh pr:*)",
      "Bash(--book-config books/active_production/Large_Print_Crossword_Masters/volume_3/book_config.json )",
      "Bash(--puzzle-dir books/active_production/Large_Print_Crossword_Masters/volume_3/puzzles )",
      "Bash(--output-dir books/active_production/Large_Print_Crossword_Masters/volume_3/paperback)",
      "Bash(__NEW_LINE__ mv crossword_book_volume_2_FINAL.pdf crossword_book_volume_2_FINAL_OLD_8.5x11.pdf)",
      "Bash(__NEW_LINE__ mv crossword_book_volume_2_interior.pdf crossword_book_volume_2_FINAL.pdf)",
      "Bash(__NEW_LINE__ ls -la *.pdf)",
      "Bash(__NEW_LINE__ mv crossword_book_volume_2_FINAL.pdf crossword_book_volume_2_FINAL_BAD_QUALITY.pdf)",
      "Bash(__NEW_LINE__ mv crossword_volume_2_PROFESSIONAL_FINAL.pdf crossword_book_volume_2_FINAL.pdf)",
      "Bash(__NEW_LINE__ cp crossword_book_volume_2_FINAL.pdf ../hardcover/)",
      "Bash(__NEW_LINE__ ls -la books/active_production/Large_Print_Crossword_Masters/volume_2/hardcover/*.pdf)",
      "Bash(__NEW_LINE__ mv paperback/crossword_book_volume_2_FINAL.pdf paperback/crossword_book_volume_2_EMPTY_TRASH.pdf)",
      "Bash(__NEW_LINE__ mv paperback/crossword_book_volume_2_REAL_FINAL.pdf paperback/crossword_book_volume_2_FINAL.pdf)",
      "Bash(__NEW_LINE__ mv hardcover/crossword_book_volume_2_FINAL.pdf hardcover/crossword_book_volume_2_EMPTY_TRASH.pdf)",
      "Bash(__NEW_LINE__ mv hardcover/crossword_book_volume_2_REAL_FINAL.pdf hardcover/crossword_book_volume_2_FINAL.pdf)",
      "Bash(__NEW_LINE__ echo \"‚úÖ Replaced empty garbage with REAL crossword book\")",
      "Bash(pdfinfo:*)",
      "Bash(pdftotext:*)",
      "Bash(gh secret:*)",
      "Bash(curl:*)",
      "Bash(./claude-flow-costs:*)",
      "WebFetch(domain:docs.cursor.com)",
      "Bash(pip uninstall:*)",
      "Bash(git reset:*)",
      "Bash(./claude-code --help)",
      "Bash(./claude-code:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue view:*)",
      "Bash(./claude-flow status)",
      "Bash(./claude-flow memory get sudoku_validator_analysis)",
      "Bash(./claude-flow memory get sudoku_test_coverage)",
      "Bash(./claude-flow status)",
      "Bash(./claude-flow --help)",
      "Bash(./claude-flow memory get sudoku_analysis_findings)",
      "Bash(./claude-flow:*)",
      "Bash(./claude-flow:*)",
      "Bash(/dev/null)",
      "Bash(pkill:*)",
      "Bash(--input books/active_production/Large_Print_Sudoku_Masters/volume_1/puzzles )",
      "Bash(--output books/active_production/Large_Print_Sudoku_Masters/volume_1/paperback )",
      "Bash(--title \"Large Print Sudoku Masters\" )",
      "Bash(--author \"KindleMint Publishing\" )",
      "Bash(--subtitle \"100 Challenging Puzzles with Large Print Format\" )",
      "Bash(--page-size letter )",
      "Bash(--include-solutions)",
      "Bash(export AWS_PROFILE=easy-smart)",
      "Bash(npm run test:*)",
      "Bash(for i in {2..6})",
      "Bash(do)",
      "Bash(echo:*)",
      "Bash(--input \"books/active_production/Large_Print_Sudoku_Masters/volume_1/puzzles\" )",
      "Bash(--output \"books/active_production/Large_Print_Sudoku_Masters/volume_1/paperback\" )",
      "Bash(--title \"Large Print Sudoku Masters: Volume 1\" )",
      "Bash(--author \"Igor Ganapolsky\" )",
      "Bash(--subtitle \"Beginner-Friendly Brain Training for Seniors and Visual Wellness\" )",
      "Bash(--page-size letter )",
      "Bash(--isbn \"978-1234567890\" )",
      "Bash(--output test_market_aligned )",
      "Bash(--count 2 )",
      "Bash(--difficulty easy)",
      "Bash(--input test_market_aligned )",
      "Bash(--output test_market_aligned_pdf )",
      "Bash(--title \"Large Print Sudoku Masters Test\" )",
      "Bash(--author \"Igor Ganapolsky\" )",
      "Bash(--subtitle \"Market-Aligned Design Demo\")",
      "WebFetch(domain:kdp.amazon.com)",
      "WebFetch(domain:bookbolt.io)",
      "WebFetch(domain:www.kdpcommunity.com)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stacks --stack-name autonomous-orchestration-production --region us-east-1 --query 'Stacks[0].StackStatus' --output text)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stack-events --stack-name autonomous-orchestration-production --region us-east-1 --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stack-events --stack-name autonomous-orchestration-production --region us-east-1 --max-items 20 --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation delete-stack --stack-name autonomous-orchestration-production --region us-east-1)",
      "WebFetch(domain:api.github.com)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation wait stack-delete-complete --stack-name autonomous-orchestration-production --region us-east-1)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stack-events --stack-name autonomous-orchestration-production --region us-east-1 --max-items 10 --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stack-events --stack-name autonomous-orchestration-production --region us-east-1 --max-items 5 --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || contains(ResourceStatusReason, `failed`)].[LogicalResourceId,ResourceStatusReason]' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stack-events --stack-name autonomous-orchestration-production --region us-east-1 --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`]' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stack-events --stack-name autonomous-orchestration-production --region us-east-1 --max-items 5 --output text)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation wait stack-create-complete --stack-name autonomous-orchestration-production --region us-east-1)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stack-events --stack-name autonomous-orchestration-production --region us-east-1 --max-items 3 --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' --output text)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stack-events --stack-name autonomous-orchestration-production --region us-east-1 --max-items 8 --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation create-stack )",
      "Bash(--stack-name autonomous-orchestration-production )",
      "Bash(--template-body file://minimal-infrastructure.yaml )",
      "Bash(--parameters ParameterKey=Environment,ParameterValue=production )",
      "Bash(--region us-east-1)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stacks --stack-name autonomous-orchestration-production --region us-east-1 --query 'Stacks[0].[StackStatus,StackId]' --output text)",
      "Bash(AWS_PROFILE=kindlemint-keys aws cloudformation describe-stacks --stack-name autonomous-orchestration-production --region us-east-1 --query 'Stacks[0].Outputs' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws iam create-role )",
      "Bash(--role-name kindlemint-lambda-orchestration-role )",
      "Bash(--assume-role-policy-document file://lambda-execution-role.json )",
      "Bash(AWS_PROFILE=kindlemint-keys aws iam attach-role-policy )",
      "Bash(--role-name kindlemint-lambda-orchestration-role )",
      "Bash(--policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole)",
      "Bash(AWS_PROFILE=kindlemint-keys aws iam attach-role-policy )",
      "Bash(--role-name kindlemint-lambda-orchestration-role )",
      "Bash(--policy-arn arn:aws:iam::352505431931:policy/kindlemint-orchestration-policy)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda create-function )",
      "Bash(--function-name kindlemint-ci-orchestrator-production )",
      "Bash(--runtime python3.11 )",
      "Bash(--role arn:aws:iam::352505431931:role/kindlemint-lambda-orchestration-role )",
      "Bash(--handler ci_orchestration_function.lambda_handler )",
      "Bash(--zip-file fileb://ci-orchestration.zip )",
      "Bash(--timeout 300 )",
      "Bash(--memory-size 512 )",
      "Bash(--environment Variables='{\n    \"\"ENVIRONMENT\"\": \"\"production\"\",\n    \"\"DYNAMODB_TABLE_CONFIG\"\": \"\"kindlemint-config-production\"\",\n    \"\"DYNAMODB_TABLE_LOGS\"\": \"\"kindlemint-orchestration-logs-production\"\",\n    \"\"SNS_TOPIC_ARN\"\": \"\"arn:aws:sns:us-east-1:352505431931:kindlemint-orchestration-notifications-production\"\",\n    \"\"REPO_OWNER\"\": \"\"IgorGanapolsky\"\",\n    \"\"REPO_NAME\"\": \"\"ai-kindlemint-engine\"\"\n  }' )",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda create-function )",
      "Bash(--function-name kindlemint-ci-orchestrator-production )",
      "Bash(--runtime python3.11 )",
      "Bash(--role arn:aws:iam::352505431931:role/kindlemint-lambda-orchestration-role )",
      "Bash(--handler ci_orchestration_function.lambda_handler )",
      "Bash(--zip-file fileb://ci-orchestration.zip )",
      "Bash(--timeout 300 )",
      "Bash(--memory-size 512 )",
      "Bash(--environment Variables='{ENVIRONMENT=production,DYNAMODB_TABLE_CONFIG=kindlemint-config-production,DYNAMODB_TABLE_LOGS=kindlemint-orchestration-logs-production,SNS_TOPIC_ARN=arn:aws:sns:us-east-1:352505431931:kindlemint-orchestration-notifications-production,REPO_OWNER=IgorGanapolsky,REPO_NAME=ai-kindlemint-engine}' )",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda create-function )",
      "Bash(--function-name kindlemint-alert-orchestrator-production )",
      "Bash(--runtime python3.11 )",
      "Bash(--role arn:aws:iam::352505431931:role/kindlemint-lambda-orchestration-role )",
      "Bash(--handler alert_orchestration_function.lambda_handler )",
      "Bash(--zip-file fileb://alert-orchestration.zip )",
      "Bash(--timeout 180 )",
      "Bash(--memory-size 256 )",
      "Bash(--environment Variables='{ENVIRONMENT=production,DYNAMODB_TABLE_CONFIG=kindlemint-config-production,DYNAMODB_TABLE_LOGS=kindlemint-orchestration-logs-production,SNS_TOPIC_ARN=arn:aws:sns:us-east-1:352505431931:kindlemint-orchestration-notifications-production}' )",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda list-functions --region us-east-1 --query 'Functions[?contains(FunctionName, `kindlemint`)].{Name:FunctionName,State:State,Runtime:Runtime}' --output table)",
      "Bash(AWS_PROFILE=kindlemint-keys aws lambda invoke )",
      "Bash(--function-name kindlemint-ci-orchestrator-production )",
      "Bash(--payload '{\"\"source\"\": \"\"manual_test\"\", \"\"trigger\"\": \"\"activation_test\"\"}' )",
      "Bash(--cli-binary-format raw-in-base64-out )",
      "Bash(ci_test_response.json)",
      "Bash(unzip:*)",
      "Bash(./package_lambdas.sh:*)",
      "Bash(pre-commit:*)",
      "Bash(flake8:*)",
      "Bash(autoflake:*)",
      "Bash(black:*)",
      "Bash(isort:*)",
      "WebFetch(domain:app.deepsource.com)",
      "Bash(--input \"books/active_production/Large_Print_Sudoku_Masters/volume_1/puzzles\" )",
      "Bash(--output \"books/active_production/Large_Print_Sudoku_Masters/volume_1/paperback\" )",
      "Bash(--title \"Large Print Sudoku Masters\" )",
      "Bash(--author \"Crossword Masters Publishing\" )",
      "Bash(--subtitle \"100 Easy to Hard Progressive Puzzles\" )",
      "Bash(echo:*)",
      "WebFetch(domain:forum.cursor.com)",
      "WebFetch(domain:www.instructa.ai)",
      "Bash(git branch:*)",
      "Bash(./scripts/delete_all_aws_resources.sh:*)",
      "Bash(./scripts/setup_branch_protection.sh:*)",
      "Bash(./scripts/remove_aws_code.sh:*)",
      "Bash(git check-ignore:*)",
      "Bash(./scripts/remove_a2a_framework.sh:*)",
      "Bash(--field allow_auto_merge=true )",
      "Bash(--field allow_merge_commit=true )",
      "Bash(--field allow_squash_merge=true )",
      "Bash(--field delete_branch_on_merge=true)",
      "Bash(./scripts/setup_branch_protection_with_orchestrator.sh:*)",
      "Bash(./scripts/cleanup_failed_prs.sh:*)",
      "Bash(./scripts/complete_a2a_cleanup.sh:*)",
      "Bash(for pr in 69 68 67 64 63 60 57 56 55 54 52 51 50 47 44 38)",
      "Bash(for pr in 37 36 35 34)",
      "Bash(--method PUT )",
      "Bash(\"/repos/IgorGanapolsky/ai-kindlemint-engine/subscription\" )",
      "Bash(--field subscribed=true )",
      "Bash(--field ignored=false )",
      "Bash(--field reason=\"watching\")",
      "Bash(pytest:*)",
      "Bash(git merge:*)",
      "Bash(for pr in 48 46 45 43 42 41 40 39)",
      "Bash(do gh pr edit $pr --base develop)",
      "Bash(/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/scripts/setup_always_on.sh)",
      "Bash(pgrep:*)",
      "Bash(launchctl:*)",
      "Bash(./scripts/emergency_cleanup.sh:*)",
      "Bash(gh repo view:*)",
      "Bash(PYTHONPATH=/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine python scripts/handle_openhands_notification.py 74)",
      "Bash(PYTHONPATH=/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine python -c \"\nimport asyncio\nimport sys\nfrom pathlib import Path\nsys.path.insert(0, str(Path.cwd()))\nfrom src.kindlemint.agents.github_issues_agent import GitHubIssuesAgent\nfrom src.kindlemint.agents.task_system import Task\nimport uuid\n\nasync def cleanup_duplicate_issues():\n    agent = GitHubIssuesAgent()\n    await agent.start()\n    \n    task = Task(\n        task_id=str(uuid.uuid4()),\n        task_type=''analyze_issue'',\n        parameters={''action_type'': ''generate_report''}\n    )\n    \n    result = await agent._process_task(task)\n    await agent.stop()\n    return result\n\nasyncio.run(cleanup_duplicate_issues())\n\")",
      "Bash(gh issue close:*)",
      "Bash(for issue in 93 92 91 90 87 85 83 81 80 79 78)",
      "Bash(do gh issue close $issue --comment \"ü§ñ **Auto-closed by AI Orchestration**: Duplicate merge report. Consolidated reporting system now prevents spam.\")",
      "Bash(git remote:*)",
      "Bash(PYTHONPATH=/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine python -c \"\nimport asyncio\nimport sys\nfrom pathlib import Path\nsys.path.insert(0, str(Path.cwd()))\n\n# Simulate Sentry error analysis\nprint(''üîç Analyzing Sentry RuntimeErrors...'')\nprint()\nprint(''üìä Error Categories Found:'')\nprint(''1. üî¥ EPUB Generation Failures - CRITICAL'')\nprint(''2. üî¥ PDF Layout Failures - CRITICAL'') \nprint(''3. üî¥ QA Check Failures (Book has 2 critical issues) - HIGH'')\nprint(''4. üî¥ Puzzle Generation Failures - HIGH'')\nprint(''5. üî¥ Enhanced QA Validator Issues - MEDIUM'')\nprint()\nprint(''‚úÖ Sentry is working correctly - capturing real errors!'')\nprint(''‚ùå Need orchestration to auto-fix these runtime issues'')\n\")",
      "Bash(PYTHONPATH=/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine python scripts/automated_issue_cleanup.py)",
      "Bash(./scripts/update_branch_protection.sh:*)",
      "WebFetch(domain:podcasts.apple.com)",
      "Bash(npm install)",
      "Bash(npm run build:*)",
      "Bash(npm run dev:*)",
      "Bash(kill:*)",
      "WebFetch(domain:medium.com)",
      "Bash(./ceo_notification_fix.sh:*)",
      "Bash(for f in book_qa_validation.yml hygiene-check.yml kdp-metadata-validation.yml production_qa.yml puzzle_book_qa.yml)",
      "Bash(do if [ -f \"$f\" ])",
      "Bash(then mv \"$f\" \"$f.disabled\")",
      "Bash(git cherry-pick:*)",
      "Bash(./fix_worktree_setup.sh:*)",
      "Bash(git worktree:*)",
      "Bash(diff:*)",
      "Bash(for file in scripts/unified_volume_generator.py scripts/crossword_engine_v3_fixed.py scripts/create_volume_3_unique_puzzles.py scripts/create_volume_3_final_unique.py)",
      "Bash(if [ -f \"$file\" ])",
      "Bash(then )",
      "Bash(./scripts/emergency_merge_130.sh:*)",
      "Bash(git fetch:*)",
      "Bash(./scripts/setup_email_filtering.sh:*)",
      "Bash(git fetch:*)",
      "Bash(git fetch:*)",
      "WebFetch(domain:dvdyff0b2oove.cloudfront.net)",
      "WebFetch(domain:kindlemint-pdfs-2025.s3.amazonaws.com)",
      "Bash(for f in .github/workflows/*.yml)",
      "Bash(do echo -n \"$f: \")",
      "Bash(for f in .github/workflows/*.yml)",
      "Bash(do echo -n \"$f: \")",
      "Bash(./scripts/fix-ci-emergency.sh:*)",
      "Bash(/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/scripts/fix-ci-emergency.sh:*)",
      "Bash(./scripts/fix-ci-emergency.sh:*)",
      "Bash(./scripts/optimize-all-workflows.sh:*)",
      "Bash(./scripts/quick-pipeline-fix.sh:*)",
      "Bash(./worktrees/test_worktree_setup.sh:*)",
      "Bash(./scripts/setup-pay-per-crawl.sh:*)",
      "WebFetch(domain:www.cloudflare.com)",
      "Bash(npm install:*)",
      "Bash(ssh:*)",
      "Bash(nc:*)",
      "Bash(./deploy-aws.sh)",
      "Bash(npm run deploy:*)",
      "Bash(./deploy-aws.sh)"
    ],
    "deny": []
  }
}