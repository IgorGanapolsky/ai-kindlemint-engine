============================= test session starts ==============================
platform darwin -- Python 3.12.7, pytest-7.4.4, pluggy-1.0.0 -- /opt/homebrew/anaconda3/bin/python
cachedir: .pytest_cache
rootdir: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine
plugins: asyncio-0.23.5, libtmux-0.39.0, anyio-4.9.0, mock-3.14.1, langsmith-0.3.45, cov-6.1.1
asyncio: mode=Mode.STRICT
collecting ... collected 64 items / 2 skipped

tests/test_crossword_engine_v3.py::TestEngineInitialization::test_engine_creates_directories PASSED [  1%]
tests/test_crossword_engine_v3.py::TestEngineInitialization::test_word_dictionary_loading ERROR [  3%]
tests/test_crossword_engine_v3.py::TestEngineInitialization::test_word_dictionary_fallback PASSED [  4%]
tests/test_crossword_engine_v3.py::TestGridGeneration::test_symmetric_pattern_generation ERROR [  6%]
tests/test_crossword_engine_v3.py::TestGridGeneration::test_grid_with_content_is_not_empty ERROR [  7%]
tests/test_crossword_engine_v3.py::TestGridGeneration::test_grid_connectivity ERROR [  9%]
tests/test_crossword_engine_v3.py::TestGridGeneration::test_fallback_grid_creation ERROR [ 10%]
tests/test_crossword_engine_v3.py::TestWordAndClueLogic::test_extract_words_from_grid ERROR [ 12%]
tests/test_crossword_engine_v3.py::TestWordAndClueLogic::test_clue_generation ERROR [ 14%]
tests/test_crossword_engine_v3.py::TestWordAndClueLogic::test_puzzle_validation_logic ERROR [ 15%]
tests/test_crossword_engine_v3.py::TestFullGeneration::test_generate_single_puzzle_creates_files ERROR [ 17%]
tests/test_crossword_engine_v3.py::TestFullGeneration::test_generate_zero_puzzles ERROR [ 18%]
tests/test_crossword_engine_v3.py::test_performance_benchmark ERROR      [ 20%]
tests/test_dummy.py::test_dummy PASSED                                   [ 21%]
tests/test_enhanced_qa_validator_v2.py::TestValidatorInitialization::test_initialization_success PASSED [ 23%]
tests/test_enhanced_qa_validator_v2.py::TestValidatorInitialization::test_initialization_fails_if_metadata_dir_missing PASSED [ 25%]
tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_word_content_valid ERROR [ 26%]
tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_word_content_invalid ERROR [ 28%]
tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_intersections_valid ERROR [ 29%]
tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_intersections_invalid_conflict ERROR [ 31%]
tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_grid_connectivity_valid ERROR [ 32%]
tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_grid_connectivity_invalid ERROR [ 34%]
tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_duplicate_words ERROR [ 35%]
tests/test_enhanced_qa_validator_v2.py::TestReportGenerationAndScoring::test_full_run_pass ERROR [ 37%]
tests/test_enhanced_qa_validator_v2.py::TestReportGenerationAndScoring::test_full_run_fail ERROR [ 39%]
tests/test_enhanced_qa_validator_v2.py::TestReportGenerationAndScoring::test_scoring_logic ERROR [ 40%]
tests/test_enhanced_qa_validator_v2.py::TestErrorHandling::test_missing_collection_json ERROR [ 42%]
tests/test_enhanced_qa_validator_v2.py::TestErrorHandling::test_malformed_json ERROR [ 43%]
tests/test_enhanced_qa_validator_v2.py::TestErrorHandling::test_missing_puzzle_file ERROR [ 45%]
tests/test_puzzle_validators.py::test_validate_sudoku_valid PASSED       [ 46%]
tests/test_puzzle_validators.py::test_validate_sudoku_duplicate PASSED   [ 48%]
tests/test_puzzle_validators.py::test_validate_sudoku_multiple_solutions PASSED [ 50%]
tests/test_puzzle_validators.py::test_validate_word_search_valid PASSED  [ 51%]
tests/test_puzzle_validators.py::test_validate_word_search_not_found PASSED [ 53%]
tests/test_puzzle_validators.py::test_validate_crossword_valid FAILED    [ 54%]
tests/test_puzzle_validators.py::test_validate_crossword_mismatch PASSED [ 56%]
tests/test_schema.py::TestMarketResearchSchema::test_csv_exists SKIPPED  [ 57%]
tests/test_schema.py::TestMarketResearchSchema::test_csv_schema SKIPPED  [ 59%]
tests/test_schema.py::TestMarketResearchSchema::test_all_rows_valid SKIPPED [ 60%]
tests/test_schema.py::TestMarketResearchSchema::test_summary_json_exists SKIPPED [ 62%]
tests/test_schema.py::TestMarketResearchSchema::test_data_quality SKIPPED [ 64%]
tests/test_schema.py::test_schema_compliance SKIPPED (Skipping market
research CSV schema tests in CI)                                         [ 65%]
tests/test_word_search_generator.py::test_word_search_generator_creates_files[1] PASSED [ 67%]
tests/test_word_search_generator.py::test_word_search_generator_creates_files[3] PASSED [ 68%]
tests/test_word_search_generator.py::test_words_file_option PASSED       [ 70%]
tests/integration/test_book_generation.py::TestBookGenerationPipeline::test_comprehensive_qa_validation FAILED [ 71%]
tests/integration/test_book_generation.py::TestBookGenerationPipeline::test_crossword_book_generation FAILED [ 73%]
tests/integration/test_book_generation.py::TestBookGenerationPipeline::test_puzzle_validation_integration PASSED [ 75%]
tests/integration/test_book_generation.py::TestErrorHandling::test_invalid_parameters PASSED [ 76%]
tests/integration/test_book_generation.py::TestErrorHandling::test_missing_output_directory PASSED [ 78%]
tests/unit/test_crossword_engine.py::TestCrosswordEngine::test_clue_generation PASSED [ 79%]
tests/unit/test_crossword_engine.py::TestCrosswordEngine::test_filled_solution_grid PASSED [ 81%]
tests/unit/test_crossword_engine.py::TestCrosswordEngine::test_grid_generation PASSED [ 82%]
tests/unit/test_crossword_engine.py::TestCrosswordEngine::test_image_generation PASSED [ 84%]
tests/unit/test_crossword_engine.py::TestCrosswordEngine::test_initialization PASSED [ 85%]
tests/unit/test_crossword_engine.py::TestCrosswordEngine::test_metadata_generation PASSED [ 87%]
tests/unit/test_crossword_engine.py::TestCrosswordEngine::test_symmetric_pattern_creation PASSED [ 89%]
tests/unit/test_crossword_engine.py::TestCrosswordValidation::test_word_placement_validation PASSED [ 90%]
tests/unit/test_puzzle_validators.py::TestCrosswordValidators::test_validate_crossword_with_empty_answers PASSED [ 92%]
tests/unit/test_puzzle_validators.py::TestCrosswordValidators::test_validate_crossword_with_invalid_answers PASSED [ 93%]
tests/unit/test_puzzle_validators.py::TestCrosswordValidators::test_validate_crossword_with_valid_puzzle FAILED [ 95%]
tests/unit/test_puzzle_validators.py::TestCrosswordValidators::test_validate_metadata_with_duplicate_clues PASSED [ 96%]
tests/unit/test_puzzle_validators.py::TestCrosswordValidators::test_validate_metadata_with_placeholder_clues PASSED [ 98%]
tests/unit/test_puzzle_validators.py::TestSolutionValidation::test_solution_validation_logic PASSED [100%]

==================================== ERRORS ====================================
___ ERROR at setup of TestEngineInitialization.test_word_dictionary_loading ____

output_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_dictionary_loading0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_dictionary_loading0/test_words.txt'

    @pytest.fixture
    def engine_instance(output_dir, custom_word_list):
        """Provides a pre-configured instance of the CrosswordEngineV3."""
>       return CrosswordEngineV3(
            output_dir=str(output_dir),
            puzzle_count=1,
            grid_size=15,
            word_list_path=custom_word_list
        )

tests/test_crossword_engine_v3.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scripts/crossword_engine_v3_fixed.py:79: in __init__
    self.word_dict = self._load_word_dictionary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.crossword_engine_v3_fixed.CrosswordEngineV3 object at 0x10582c4a0>

    def _load_word_dictionary(self):
        """Load word dictionary from file or use built-in common words."""
        word_dict = {}

>       if self.word_list_path and self.word_list_path.exists():
E       AttributeError: 'str' object has no attribute 'exists'

scripts/crossword_engine_v3_fixed.py:88: AttributeError
____ ERROR at setup of TestGridGeneration.test_symmetric_pattern_generation ____

output_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_symmetric_pattern_generat0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_symmetric_pattern_generat0/test_words.txt'

    @pytest.fixture
    def engine_instance(output_dir, custom_word_list):
        """Provides a pre-configured instance of the CrosswordEngineV3."""
>       return CrosswordEngineV3(
            output_dir=str(output_dir),
            puzzle_count=1,
            grid_size=15,
            word_list_path=custom_word_list
        )

tests/test_crossword_engine_v3.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scripts/crossword_engine_v3_fixed.py:79: in __init__
    self.word_dict = self._load_word_dictionary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.crossword_engine_v3_fixed.CrosswordEngineV3 object at 0x10582d220>

    def _load_word_dictionary(self):
        """Load word dictionary from file or use built-in common words."""
        word_dict = {}

>       if self.word_list_path and self.word_list_path.exists():
E       AttributeError: 'str' object has no attribute 'exists'

scripts/crossword_engine_v3_fixed.py:88: AttributeError
___ ERROR at setup of TestGridGeneration.test_grid_with_content_is_not_empty ___

output_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_with_content_is_not_0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_with_content_is_not_0/test_words.txt'

    @pytest.fixture
    def engine_instance(output_dir, custom_word_list):
        """Provides a pre-configured instance of the CrosswordEngineV3."""
>       return CrosswordEngineV3(
            output_dir=str(output_dir),
            puzzle_count=1,
            grid_size=15,
            word_list_path=custom_word_list
        )

tests/test_crossword_engine_v3.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scripts/crossword_engine_v3_fixed.py:79: in __init__
    self.word_dict = self._load_word_dictionary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.crossword_engine_v3_fixed.CrosswordEngineV3 object at 0x10582f8f0>

    def _load_word_dictionary(self):
        """Load word dictionary from file or use built-in common words."""
        word_dict = {}

>       if self.word_list_path and self.word_list_path.exists():
E       AttributeError: 'str' object has no attribute 'exists'

scripts/crossword_engine_v3_fixed.py:88: AttributeError
_________ ERROR at setup of TestGridGeneration.test_grid_connectivity __________

output_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity0/test_words.txt'

    @pytest.fixture
    def engine_instance(output_dir, custom_word_list):
        """Provides a pre-configured instance of the CrosswordEngineV3."""
>       return CrosswordEngineV3(
            output_dir=str(output_dir),
            puzzle_count=1,
            grid_size=15,
            word_list_path=custom_word_list
        )

tests/test_crossword_engine_v3.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scripts/crossword_engine_v3_fixed.py:79: in __init__
    self.word_dict = self._load_word_dictionary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.crossword_engine_v3_fixed.CrosswordEngineV3 object at 0x10582ffe0>

    def _load_word_dictionary(self):
        """Load word dictionary from file or use built-in common words."""
        word_dict = {}

>       if self.word_list_path and self.word_list_path.exists():
E       AttributeError: 'str' object has no attribute 'exists'

scripts/crossword_engine_v3_fixed.py:88: AttributeError
_______ ERROR at setup of TestGridGeneration.test_fallback_grid_creation _______

output_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_fallback_grid_creation0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_fallback_grid_creation0/test_words.txt'

    @pytest.fixture
    def engine_instance(output_dir, custom_word_list):
        """Provides a pre-configured instance of the CrosswordEngineV3."""
>       return CrosswordEngineV3(
            output_dir=str(output_dir),
            puzzle_count=1,
            grid_size=15,
            word_list_path=custom_word_list
        )

tests/test_crossword_engine_v3.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scripts/crossword_engine_v3_fixed.py:79: in __init__
    self.word_dict = self._load_word_dictionary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.crossword_engine_v3_fixed.CrosswordEngineV3 object at 0x10582d430>

    def _load_word_dictionary(self):
        """Load word dictionary from file or use built-in common words."""
        word_dict = {}

>       if self.word_list_path and self.word_list_path.exists():
E       AttributeError: 'str' object has no attribute 'exists'

scripts/crossword_engine_v3_fixed.py:88: AttributeError
_____ ERROR at setup of TestWordAndClueLogic.test_extract_words_from_grid ______

output_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_extract_words_from_grid0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_extract_words_from_grid0/test_words.txt'

    @pytest.fixture
    def engine_instance(output_dir, custom_word_list):
        """Provides a pre-configured instance of the CrosswordEngineV3."""
>       return CrosswordEngineV3(
            output_dir=str(output_dir),
            puzzle_count=1,
            grid_size=15,
            word_list_path=custom_word_list
        )

tests/test_crossword_engine_v3.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scripts/crossword_engine_v3_fixed.py:79: in __init__
    self.word_dict = self._load_word_dictionary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.crossword_engine_v3_fixed.CrosswordEngineV3 object at 0x10582eb40>

    def _load_word_dictionary(self):
        """Load word dictionary from file or use built-in common words."""
        word_dict = {}

>       if self.word_list_path and self.word_list_path.exists():
E       AttributeError: 'str' object has no attribute 'exists'

scripts/crossword_engine_v3_fixed.py:88: AttributeError
_________ ERROR at setup of TestWordAndClueLogic.test_clue_generation __________

output_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_clue_generation0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_clue_generation0/test_words.txt'

    @pytest.fixture
    def engine_instance(output_dir, custom_word_list):
        """Provides a pre-configured instance of the CrosswordEngineV3."""
>       return CrosswordEngineV3(
            output_dir=str(output_dir),
            puzzle_count=1,
            grid_size=15,
            word_list_path=custom_word_list
        )

tests/test_crossword_engine_v3.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scripts/crossword_engine_v3_fixed.py:79: in __init__
    self.word_dict = self._load_word_dictionary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.crossword_engine_v3_fixed.CrosswordEngineV3 object at 0x105a740e0>

    def _load_word_dictionary(self):
        """Load word dictionary from file or use built-in common words."""
        word_dict = {}

>       if self.word_list_path and self.word_list_path.exists():
E       AttributeError: 'str' object has no attribute 'exists'

scripts/crossword_engine_v3_fixed.py:88: AttributeError
_____ ERROR at setup of TestWordAndClueLogic.test_puzzle_validation_logic ______

output_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_puzzle_validation_logic0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_puzzle_validation_logic0/test_words.txt'

    @pytest.fixture
    def engine_instance(output_dir, custom_word_list):
        """Provides a pre-configured instance of the CrosswordEngineV3."""
>       return CrosswordEngineV3(
            output_dir=str(output_dir),
            puzzle_count=1,
            grid_size=15,
            word_list_path=custom_word_list
        )

tests/test_crossword_engine_v3.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scripts/crossword_engine_v3_fixed.py:79: in __init__
    self.word_dict = self._load_word_dictionary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.crossword_engine_v3_fixed.CrosswordEngineV3 object at 0x105a75fa0>

    def _load_word_dictionary(self):
        """Load word dictionary from file or use built-in common words."""
        word_dict = {}

>       if self.word_list_path and self.word_list_path.exists():
E       AttributeError: 'str' object has no attribute 'exists'

scripts/crossword_engine_v3_fixed.py:88: AttributeError
_ ERROR at setup of TestFullGeneration.test_generate_single_puzzle_creates_files _

output_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_generate_single_puzzle_cr0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_generate_single_puzzle_cr0/test_words.txt'

    @pytest.fixture
    def engine_instance(output_dir, custom_word_list):
        """Provides a pre-configured instance of the CrosswordEngineV3."""
>       return CrosswordEngineV3(
            output_dir=str(output_dir),
            puzzle_count=1,
            grid_size=15,
            word_list_path=custom_word_list
        )

tests/test_crossword_engine_v3.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scripts/crossword_engine_v3_fixed.py:79: in __init__
    self.word_dict = self._load_word_dictionary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.crossword_engine_v3_fixed.CrosswordEngineV3 object at 0x105a76e40>

    def _load_word_dictionary(self):
        """Load word dictionary from file or use built-in common words."""
        word_dict = {}

>       if self.word_list_path and self.word_list_path.exists():
E       AttributeError: 'str' object has no attribute 'exists'

scripts/crossword_engine_v3_fixed.py:88: AttributeError
_______ ERROR at setup of TestFullGeneration.test_generate_zero_puzzles ________

output_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_generate_zero_puzzles0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_generate_zero_puzzles0/test_words.txt'

    @pytest.fixture
    def engine_instance(output_dir, custom_word_list):
        """Provides a pre-configured instance of the CrosswordEngineV3."""
>       return CrosswordEngineV3(
            output_dir=str(output_dir),
            puzzle_count=1,
            grid_size=15,
            word_list_path=custom_word_list
        )

tests/test_crossword_engine_v3.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scripts/crossword_engine_v3_fixed.py:79: in __init__
    self.word_dict = self._load_word_dictionary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.crossword_engine_v3_fixed.CrosswordEngineV3 object at 0x10582f290>

    def _load_word_dictionary(self):
        """Load word dictionary from file or use built-in common words."""
        word_dict = {}

>       if self.word_list_path and self.word_list_path.exists():
E       AttributeError: 'str' object has no attribute 'exists'

scripts/crossword_engine_v3_fixed.py:88: AttributeError
_________________ ERROR at setup of test_performance_benchmark _________________

output_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_performance_benchmark0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_performance_benchmark0/test_words.txt'

    @pytest.fixture
    def engine_instance(output_dir, custom_word_list):
        """Provides a pre-configured instance of the CrosswordEngineV3."""
>       return CrosswordEngineV3(
            output_dir=str(output_dir),
            puzzle_count=1,
            grid_size=15,
            word_list_path=custom_word_list
        )

tests/test_crossword_engine_v3.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
scripts/crossword_engine_v3_fixed.py:79: in __init__
    self.word_dict = self._load_word_dictionary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.crossword_engine_v3_fixed.CrosswordEngineV3 object at 0x10582e2d0>

    def _load_word_dictionary(self):
        """Load word dictionary from file or use built-in common words."""
        word_dict = {}

>       if self.word_list_path and self.word_list_path.exists():
E       AttributeError: 'str' object has no attribute 'exists'

scripts/crossword_engine_v3_fixed.py:88: AttributeError
________ ERROR at setup of TestValidationChecks.test_word_content_valid ________

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_valid0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_valid0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x105a75850>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_valid0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_valid0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_valid0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_valid0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
_______ ERROR at setup of TestValidationChecks.test_word_content_invalid _______

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_invalid0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_invalid0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x105a779b0>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_invalid0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_invalid0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_invalid0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_word_content_invalid0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
_______ ERROR at setup of TestValidationChecks.test_intersections_valid ________

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_valid0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_valid0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x105a76cf0>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_valid0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_valid0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_valid0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_valid0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
__ ERROR at setup of TestValidationChecks.test_intersections_invalid_conflict __

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_invalid_con0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_invalid_con0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x105a2eae0>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_invalid_con0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_invalid_con0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_invalid_con0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_intersections_invalid_con0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
_____ ERROR at setup of TestValidationChecks.test_grid_connectivity_valid ______

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_valid0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_valid0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x105a76c00>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_valid0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_valid0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_valid0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_valid0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
____ ERROR at setup of TestValidationChecks.test_grid_connectivity_invalid _____

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_invalid0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_invalid0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x105a74b90>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_invalid0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_invalid0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_invalid0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_grid_connectivity_invalid0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
_________ ERROR at setup of TestValidationChecks.test_duplicate_words __________

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_duplicate_words0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_duplicate_words0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x10582df40>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_duplicate_words0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_duplicate_words0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_duplicate_words0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_duplicate_words0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
_____ ERROR at setup of TestReportGenerationAndScoring.test_full_run_pass ______

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_pass0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_pass0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x105a2fcb0>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_pass0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_pass0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_pass0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_pass0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
_____ ERROR at setup of TestReportGenerationAndScoring.test_full_run_fail ______

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_fail0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_fail0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x105a2fb90>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_fail0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_fail0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_fail0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_full_run_fail0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
_____ ERROR at setup of TestReportGenerationAndScoring.test_scoring_logic ______

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_scoring_logic0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_scoring_logic0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x105a2f2f0>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_scoring_logic0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_scoring_logic0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_scoring_logic0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_scoring_logic0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
_______ ERROR at setup of TestErrorHandling.test_missing_collection_json _______

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_collection_json0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_collection_json0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x105a76b10>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_collection_json0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_collection_json0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_collection_json0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_collection_json0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
___________ ERROR at setup of TestErrorHandling.test_malformed_json ____________

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_malformed_json0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_malformed_json0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x10582dee0>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_malformed_json0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_malformed_json0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_malformed_json0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_malformed_json0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
_________ ERROR at setup of TestErrorHandling.test_missing_puzzle_file _________

book_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_puzzle_file0')
custom_word_list = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_puzzle_file0/test_words.txt'

    @pytest.fixture
    def validator_instance(book_dir, custom_word_list):
        """Provides a pre-configured instance of the EnhancedQAValidatorV2."""
>       return EnhancedQAValidatorV2(
            book_dir=str(book_dir),
            output_dir=str(book_dir),
            word_list_path=custom_word_list
        )

tests/test_enhanced_qa_validator_v2.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <scripts.enhanced_qa_validator_v2.EnhancedQAValidatorV2 object at 0x105a75b80>
book_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_puzzle_file0'
output_dir = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_puzzle_file0'
word_list_path = '/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_puzzle_file0/test_words.txt'

    def __init__(self, book_dir, output_dir=None, word_list_path=None):
        """Initialize the validator"""
        self.book_dir = Path(book_dir)
        self.metadata_dir = self.book_dir / "metadata"

        if not self.metadata_dir.exists():
>           raise FileNotFoundError(f"Metadata directory not found: {self.metadata_dir}")
E           FileNotFoundError: Metadata directory not found: /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_missing_puzzle_file0/metadata

scripts/enhanced_qa_validator_v2.py:34: FileNotFoundError
=================================== FAILURES ===================================
________________________ test_validate_crossword_valid _________________________

tmp_meta_dir = PosixPath('/Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/.pytest_tmp/pytest-of-igorganapolsky/pytest-1/test_validate_crossword_valid0/metadata')

    def test_validate_crossword_valid(tmp_meta_dir):
        clues = { 'across': [(1,'Clue','WORD')], 'down': [(1,'Clue','WORD2')] }
        pos = { '0,0': 1, '0,2': 2 }
        data = { 'id': 1, 'clues': clues, 'clue_positions': pos }
        write_meta(tmp_meta_dir, 'puzzle_01.json', data)
        issues = validate_crossword(tmp_meta_dir)
>       assert issues == []
E       assert [{'puzzle_id': 1, 'description': 'Invalid answer "WORD2" for down 1 - contains non-letters'}] == []
E         Left contains one more item: {'description': 'Invalid answer "WORD2" for down 1 - contains non-letters', 'puzzle_id': 1}
E         Full diff:
E           [
E         -  ,
E         +  {'description': 'Invalid answer "WORD2" for down 1 - contains non-letters',
E         +   'puzzle_id': 1},
E           ]

tests/test_puzzle_validators.py:79: AssertionError
_________ TestBookGenerationPipeline.test_comprehensive_qa_validation __________

self = <tests.integration.test_book_generation.TestBookGenerationPipeline testMethod=test_comprehensive_qa_validation>

    def test_comprehensive_qa_validation(self):
        """Test the comprehensive QA validator on generated content"""
        # Generate a small book
        output_dir = Path(self.temp_dir) / "test_book"
        output_dir.mkdir()

        subprocess.run([
            sys.executable,
            str(self.scripts_dir / "crossword_engine_v2.py"),
            "--output", str(output_dir),
            "--count", "2",
            "--difficulty", "easy"
        ], capture_output=True)

        # Create a dummy PDF for testing (in real scenario, this would be generated)
        # For now, we'll just test the metadata validation part
>       from scripts.comprehensive_qa_validator import ComprehensiveQAValidator

tests/integration/test_book_generation.py:135:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    #!/usr/bin/env python3
    """
    Comprehensive QA Validator - Strict validation for crossword puzzle books
    Combines PDF validation with metadata validation for complete quality assurance
    """

    import os
    import sys
    import json
    import argparse
    from pathlib import Path
    from datetime import datetime
    import PyPDF2
    import re
    from typing import Dict, List, Tuple, Optional
    from collections import Counter

    # Import our enhanced validators
>   from puzzle_validators import (
        validate_crossword_solutions_in_pdf,
        validate_crossword_metadata,
        validate_crossword
    )
E   ModuleNotFoundError: No module named 'puzzle_validators'

scripts/comprehensive_qa_validator.py:19: ModuleNotFoundError
__________ TestBookGenerationPipeline.test_crossword_book_generation ___________

self = <tests.integration.test_book_generation.TestBookGenerationPipeline testMethod=test_crossword_book_generation>

    def test_crossword_book_generation(self):
        """Test generating a complete crossword book"""
        # Generate crossword puzzles
        result = subprocess.run([
            sys.executable,
            str(self.scripts_dir / "crossword_engine_v2.py"),
            "--output", self.temp_dir,
            "--count", "5",
            "--difficulty", "easy"
        ], capture_output=True, text=True)

        # Check generation succeeded
        self.assertEqual(result.returncode, 0, f"Generation failed: {result.stderr}")

        # Verify output structure
        output_path = Path(self.temp_dir)
        self.assertTrue((output_path / "puzzles").exists())
        self.assertTrue((output_path / "metadata").exists())
        self.assertTrue((output_path / "metadata" / "collection.json").exists())

        # Verify puzzles were created
        puzzle_files = list((output_path / "puzzles").glob("puzzle_*.png"))
        self.assertEqual(len(puzzle_files), 5)

        # Verify solutions were created
        solution_files = list((output_path / "puzzles").glob("solution_*.png"))
        self.assertEqual(len(solution_files), 5)

        # Verify metadata
        with open(output_path / "metadata" / "collection.json") as f:
            collection = json.load(f)

        self.assertEqual(collection["puzzle_count"], 5)
        self.assertEqual(collection["difficulty_mode"], "easy")

        # Check individual puzzle metadata
        for i in range(1, 6):
            puzzle_meta = output_path / "metadata" / f"puzzle_{i:02d}.json"
            self.assertTrue(puzzle_meta.exists())

            with open(puzzle_meta) as f:
                puzzle_data = json.load(f)

            # Verify solution grid exists and is filled
            self.assertIn("solution_grid", puzzle_data)
            solution_grid = puzzle_data["solution_grid"]

            # Count letters in solution
            letter_count = sum(
                1 for row in solution_grid
                for cell in row
                if isinstance(cell, str) and cell.isalpha()
            )

            # Should have substantial number of letters
>           self.assertGreater(letter_count, 50,
                f"Puzzle {i} solution has only {letter_count} letters")
E           AssertionError: 28 not greater than 50 : Puzzle 1 solution has only 28 letters

tests/integration/test_book_generation.py:88: AssertionError
______ TestCrosswordValidators.test_validate_crossword_with_valid_puzzle _______

self = <tests.unit.test_puzzle_validators.TestCrosswordValidators testMethod=test_validate_crossword_with_valid_puzzle>

    def test_validate_crossword_with_valid_puzzle(self):
        """Test validation of a valid crossword puzzle"""
        self.create_test_puzzle_metadata(1, has_answers=True)

        issues = validate_crossword(self.metadata_dir)

        # Should have no issues for valid puzzle
>       self.assertEqual(len(issues), 0)
E       AssertionError: 1 != 0

tests/unit/test_puzzle_validators.py:95: AssertionError
=============================== warnings summary ===============================
tests/test_crossword_engine_v3.py:228
  /Users/igorganapolsky/workspace/git/ai/ai-kindlemint-engine/tests/test_crossword_engine_v3.py:228: PytestUnknownMarkWarning: Unknown pytest.mark.performance - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.performance

../../../../../../opt/homebrew/anaconda3/lib/python3.12/site-packages/PyPDF2/__init__.py:21
  /opt/homebrew/anaconda3/lib/python3.12/site-packages/PyPDF2/__init__.py:21: DeprecationWarning: PyPDF2 is deprecated. Please move to the pypdf library instead.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_puzzle_validators.py::test_validate_crossword_valid - asser...
FAILED tests/integration/test_book_generation.py::TestBookGenerationPipeline::test_comprehensive_qa_validation
FAILED tests/integration/test_book_generation.py::TestBookGenerationPipeline::test_crossword_book_generation
FAILED tests/unit/test_puzzle_validators.py::TestCrosswordValidators::test_validate_crossword_with_valid_puzzle
ERROR tests/test_crossword_engine_v3.py::TestEngineInitialization::test_word_dictionary_loading
ERROR tests/test_crossword_engine_v3.py::TestGridGeneration::test_symmetric_pattern_generation
ERROR tests/test_crossword_engine_v3.py::TestGridGeneration::test_grid_with_content_is_not_empty
ERROR tests/test_crossword_engine_v3.py::TestGridGeneration::test_grid_connectivity
ERROR tests/test_crossword_engine_v3.py::TestGridGeneration::test_fallback_grid_creation
ERROR tests/test_crossword_engine_v3.py::TestWordAndClueLogic::test_extract_words_from_grid
ERROR tests/test_crossword_engine_v3.py::TestWordAndClueLogic::test_clue_generation
ERROR tests/test_crossword_engine_v3.py::TestWordAndClueLogic::test_puzzle_validation_logic
ERROR tests/test_crossword_engine_v3.py::TestFullGeneration::test_generate_single_puzzle_creates_files
ERROR tests/test_crossword_engine_v3.py::TestFullGeneration::test_generate_zero_puzzles
ERROR tests/test_crossword_engine_v3.py::test_performance_benchmark - Attribu...
ERROR tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_word_content_valid
ERROR tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_word_content_invalid
ERROR tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_intersections_valid
ERROR tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_intersections_invalid_conflict
ERROR tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_grid_connectivity_valid
ERROR tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_grid_connectivity_invalid
ERROR tests/test_enhanced_qa_validator_v2.py::TestValidationChecks::test_duplicate_words
ERROR tests/test_enhanced_qa_validator_v2.py::TestReportGenerationAndScoring::test_full_run_pass
ERROR tests/test_enhanced_qa_validator_v2.py::TestReportGenerationAndScoring::test_full_run_fail
ERROR tests/test_enhanced_qa_validator_v2.py::TestReportGenerationAndScoring::test_scoring_logic
ERROR tests/test_enhanced_qa_validator_v2.py::TestErrorHandling::test_missing_collection_json
ERROR tests/test_enhanced_qa_validator_v2.py::TestErrorHandling::test_malformed_json
ERROR tests/test_enhanced_qa_validator_v2.py::TestErrorHandling::test_missing_puzzle_file
======== 4 failed, 30 passed, 8 skipped, 2 warnings, 24 errors in 1.27s ========
