name: Staged PR Orchestrator - Enterprise Security Model

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]
  schedule:
    - cron: '0 9 * * 1'  # Weekly promotion Monday 9 AM

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  actions: read

jobs:
  route-pr:
    name: Route PR to Appropriate Branch
    runs-on: ubuntu-latest
    outputs:
      target_branch: ${{ steps.analyze.outputs.target_branch }}
      auto_merge_allowed: ${{ steps.analyze.outputs.auto_merge_allowed }}
      confidence_score: ${{ steps.analyze.outputs.confidence_score }}
      requires_human_review: ${{ steps.analyze.outputs.requires_human_review }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install PyGithub openai anthropic pyyaml requests
          
      - name: Analyze PR and Determine Route
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -c "
          import os
          import json
          import re
          from github import Github
          
          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo('${{ github.repository }}')
          pr = repo.get_pull(${{ github.event.pull_request.number }})
          
          # Get PR details
          title = pr.title.lower()
          base_branch = pr.base.ref
          files = list(pr.get_files())
          author = pr.user.login
          labels = [l.name for l in pr.labels]
          
          # Business impact analysis
          business_critical_paths = [
              'src/kindlemint/engines/',
              'src/kindlemint/generators/',
              'setup.py',
              'requirements.txt',
              '.github/workflows/'
          ]
          
          affects_business_logic = any(
              any(critical_path in f.filename for critical_path in business_critical_paths)
              for f in files
          )
          
          # Security impact analysis
          security_sensitive_files = [
              '.github/workflows/',
              'scripts/',
              'requirements.txt',
              'setup.py'
          ]
          
          affects_security = any(
              any(sec_path in f.filename for sec_path in security_sensitive_files)
              for f in files
          )
          
          # Calculate confidence score
          confidence = 50  # Base score
          
          # Bot PRs get high confidence for develop
          bot_authors = ['dependabot[bot]', 'renovate[bot]', 'github-actions[bot]', 'deepsource-autofix[bot]']
          is_bot_pr = author in bot_authors
          
          if is_bot_pr:
              confidence += 30
          
          # Style/formatting PRs are low risk
          style_indicators = ['style:', 'format', 'lint', 'autopep8', 'black', 'isort']
          is_style_pr = any(indicator in title for indicator in style_indicators)
          
          if is_style_pr:
              confidence += 25
          
          # Documentation PRs are low risk
          doc_indicators = ['docs:', 'documentation', 'readme', '.md']
          is_doc_pr = any(indicator in title for indicator in doc_indicators) or \
                     all(f.filename.endswith(('.md', '.rst', '.txt')) for f in files if len(files) > 0)
          
          if is_doc_pr:
              confidence += 20
          
          # Test PRs are medium risk
          test_indicators = ['test:', 'spec:', 'tests/']
          is_test_pr = any(indicator in title for indicator in test_indicators) or \
                      all('test' in f.filename.lower() for f in files if len(files) > 0)
          
          if is_test_pr:
              confidence += 15
          
          # Reduce confidence for business impact
          if affects_business_logic:
              confidence -= 25
          
          if affects_security:
              confidence -= 30
          
          # Size penalty
          total_changes = pr.additions + pr.deletions
          if total_changes > 500:
              confidence -= 20
          elif total_changes > 200:
              confidence -= 10
          
          # Determine routing based on target branch and content
          target_branch = base_branch  # Default to original target
          auto_merge_allowed = False
          requires_human_review = False
          
          if base_branch == 'main':
              # NEVER auto-merge to main - always require human review
              requires_human_review = True
              auto_merge_allowed = False
              
              # Suggest alternative routing for certain PR types
              if is_bot_pr or is_style_pr:
                  # Suggest these should target develop instead
                  print(f'❌ Bot/Style PRs should target develop branch, not main')
              elif is_doc_pr or is_test_pr:
                  print(f'ℹ️ Consider targeting staging branch for faster integration')
                  
          elif base_branch == 'staging':
              # Staging can auto-merge for low-risk changes
              if confidence >= 85 and not affects_business_logic:
                  auto_merge_allowed = True
              else:
                  requires_human_review = True
                  
          elif base_branch == 'develop':
              # Develop can auto-merge for most changes
              if confidence >= 80:
                  auto_merge_allowed = True
              elif confidence >= 70:
                  requires_human_review = False  # Allow manual merge
              else:
                  requires_human_review = True
          
          # Cap confidence
          confidence = min(confidence, 95)
          
          print(f'::set-output name=target_branch::{target_branch}')
          print(f'::set-output name=auto_merge_allowed::{str(auto_merge_allowed).lower()}')
          print(f'::set-output name=confidence_score::{confidence}')
          print(f'::set-output name=requires_human_review::{str(requires_human_review).lower()}')
          
          # Store analysis
          analysis = {
              'target_branch': target_branch,
              'auto_merge_allowed': auto_merge_allowed,
              'confidence_score': confidence,
              'requires_human_review': requires_human_review,
              'pr_classification': {
                  'is_bot_pr': is_bot_pr,
                  'is_style_pr': is_style_pr,
                  'is_doc_pr': is_doc_pr,
                  'is_test_pr': is_test_pr,
                  'affects_business_logic': affects_business_logic,
                  'affects_security': affects_security
              },
              'recommendations': []
          }
          
          if base_branch == 'main' and (is_bot_pr or is_style_pr):
              analysis['recommendations'].append('Consider targeting develop branch for automated changes')
          
          with open('pr_routing_analysis.json', 'w') as f:
              json.dump(analysis, f, indent=2)
          "

  execute-develop-workflow:
    name: Execute Develop Branch Workflow
    needs: route-pr
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Code Hygiene Check
        run: |
          python src/kindlemint/agents/code_hygiene_orchestrator.py
          
      - name: Auto-merge if eligible
        if: needs.route-pr.outputs.auto_merge_allowed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ github.event.pull_request.number }} \
            --auto \
            --merge \
            --delete-branch \
            --subject "Auto-merge to develop: ${{ github.event.pull_request.title }}" \
            --body "Auto-merged by Staged PR Orchestrator (Confidence: ${{ needs.route-pr.outputs.confidence_score }}%)"

  execute-staging-workflow:
    name: Execute Staging Branch Workflow  
    needs: route-pr
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Enhanced Validation
        run: |
          # Run comprehensive testing
          python -m pytest tests/ -v
          
          # Run hygiene check
          python src/kindlemint/agents/code_hygiene_orchestrator.py
          
          # Security scan
          echo "Running security validation..."
          
      - name: Request Review if Required
        if: needs.route-pr.outputs.requires_human_review == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: ['IgorGanapolsky']  # Technical lead review
            });
            
      - name: Conditional Auto-merge
        if: needs.route-pr.outputs.auto_merge_allowed == 'true' && needs.route-pr.outputs.requires_human_review == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ github.event.pull_request.number }} \
            --auto \
            --merge \
            --delete-branch \
            --subject "Auto-merge to staging: ${{ github.event.pull_request.title }}" \
            --body "Auto-merged by Staged PR Orchestrator after validation (Confidence: ${{ needs.route-pr.outputs.confidence_score }}%)"

  execute-main-workflow:
    name: Execute Main Branch Workflow (Executive Approval Required)
    needs: route-pr
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'main'
    
    steps:
      - name: Block Auto-merge to Main
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `## 🛡️ Main Branch Protection Active
            
            **Auto-merge to main branch is DISABLED for security.**
            
            ### Required Actions:
            1. ✅ All status checks must pass
            2. 👥 Technical review required
            3. 🔍 Executive approval needed
            4. 📊 Business impact assessment
            
            ### Alternative Recommendations:
            - For automated changes: Target \`develop\` branch
            - For features: Target \`staging\` branch  
            - For hotfixes: Use emergency process
            
            **This PR requires manual review and approval.**
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Request Executive Review
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: ['IgorGanapolsky']  # Executive approval required
            });
            
            // Add priority label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['executive-review-required', 'main-branch-target']
            });

  weekly-promotion:
    name: Weekly Branch Promotion
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Promote Develop to Staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create promotion PR from develop to staging
          gh pr create \
            --title "chore: Weekly promotion develop → staging" \
            --body "Automated weekly promotion of develop branch changes to staging for integration testing." \
            --base staging \
            --head develop \
            --label "automated-promotion"
            
      - name: Notify Executive of Promotion
        uses: actions/github-script@v6  
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📈 Weekly Branch Promotion
              
              **develop → staging** promotion PR created for executive review.
              
              Please review integration testing results before approving.`
            });

  upload-artifacts:
    name: Upload Analysis Artifacts
    needs: route-pr
    runs-on: ubuntu-latest
    
    steps:
      - name: Download Analysis
        uses: actions/download-artifact@v4
        with:
          name: pr-routing-analysis
          path: ./
        continue-on-error: true
        
      - name: Upload Analysis
        uses: actions/upload-artifact@v4
        with:
          name: pr-routing-analysis-${{ github.event.pull_request.number }}
          path: pr_routing_analysis.json