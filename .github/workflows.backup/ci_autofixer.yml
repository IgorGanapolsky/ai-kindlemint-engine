name: CI Auto-Fixer

on:
  # Trigger when other workflows fail
  workflow_run:
    workflows: ["Tests", "QA Validation Pipeline", "Comprehensive QA", "Book QA Validation", "PR Orchestrator - Intelligent Auto-Merge System"]
    types:
      - completed
    branches:
      - main
      - feat/pr-based-development-strategy

  # Manual trigger
  workflow_dispatch:
    inputs:
      lookback_minutes:
        description: 'Minutes to look back for failures'
        required: false
        default: '60'
        type: string
      max_fixes:
        description: 'Maximum fixes to apply'
        required: false
        default: '10'
        type: string
      dry_run:
        description: 'Dry run mode (show what would be fixed)'
        required: false
        default: false
        type: boolean
      enable_auto_commit:
        description: 'Create automatic commits'
        required: false
        default: false
        type: boolean
      enable_auto_pr:
        description: 'Create automatic pull requests'
        required: false
        default: false
        type: boolean

  # Scheduled run (every 30 minutes during business hours)
  schedule:
    - cron: '*/30 9-17 * * 1-5'  # Every 30 min, 9 AM to 5 PM, Mon-Fri

jobs:
  ci-autofix:
    runs-on: ubuntu-latest

    # Only run if the triggering workflow failed
    if: >
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure')

    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read

    steps:
    - name: üîÑ Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Full history for better analysis

    - name: üêç Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: üì• Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests PyGithub autopep8 black isort flake8 mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install -e .

    - name: üîß Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh

    - name: üîç Run CI Orchestration (Analysis Mode)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd scripts/ci_orchestration

        # Set parameters based on trigger type
        LOOKBACK_MINUTES="${{ github.event.inputs.lookbook_minutes || '60' }}"
        MAX_FIXES="${{ github.event.inputs.max_fixes || '10' }}"
        DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"

        # For workflow_run events, focus on recent failures
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          LOOKBACK_MINUTES="30"
        fi

        # Run in analysis mode first
        python ci_orchestrator.py \
          --mode single \
          --lookback-minutes "$LOOKBACK_MINUTES" \
          --max-fixes "$MAX_FIXES" \
          --confidence-threshold 0.8 \
          --dry-run

        # Save analysis results
        if [ -f ci_orchestration_results.json ]; then
          echo "ANALYSIS_RESULTS<<EOF" >> $GITHUB_ENV
          cat ci_orchestration_results.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi

    - name: üìä Generate Analysis Report
      run: |
        cd scripts/ci_orchestration

        # Create analysis summary
        python -c "
import json
import sys

try:
    with open('ci_orchestration_results.json', 'r') as f:
        results = json.load(f)

    failures = results.get('failures_detected', 0)
    summary = results.get('summary', 'No analysis available')

    if failures > 0:
        print(f'üö® Detected {failures} CI failures')
        print(f'Summary: {summary}')

        # Create GitHub issue if significant failures
        if failures >= 5:
            sys.exit(1)  # Signal that manual review is needed
    else:
        print('‚úÖ No CI failures detected')
except Exception as e:
    print(f'‚ùå Analysis failed: {e}')
    sys.exit(1)
"

    - name: üîß Apply Auto-Fixes (if enabled)
      if: >
        (github.event.inputs.enable_auto_commit == 'true' ||
         (github.event_name == 'schedule' && github.ref == 'refs/heads/main')) &&
        github.event.inputs.dry_run != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd scripts/ci_orchestration

        # Configure git
        git config --global user.name "GitHub Actions CI Auto-Fixer"
        git config --global user.email "actions@github.com"

        # Apply fixes
        python ci_orchestrator.py \
          --mode single \
          --lookback-minutes "${{ github.event.inputs.lookback_minutes || '60' }}" \
          --max-fixes "${{ github.event.inputs.max_fixes || '5' }}" \
          --confidence-threshold 0.9

        # Check if any files were modified
        if ! git diff --quiet; then
          echo "FIXES_APPLIED=true" >> $GITHUB_ENV
        else
          echo "FIXES_APPLIED=false" >> $GITHUB_ENV
        fi

    - name: üß™ Validate Fixes
      if: env.FIXES_APPLIED == 'true'
      id: validate
      run: |
        echo "Running validation tests..."

        # Run quick syntax check
        python -m py_compile scripts/ci_orchestration/*.py || {
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          echo "‚ùå Syntax validation failed"
          exit 0
        }

        # Run basic import test
        python -c "import src.kindlemint; print('‚úÖ Import test passed')" || {
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          echo "‚ùå Import validation failed"
          exit 0
        }

        # Run quick test subset
        python -m pytest tests/unit/ -x --tb=short -q || {
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          echo "‚ùå Unit tests failed"
          exit 0
        }

        echo "VALIDATION_FAILED=false" >> $GITHUB_ENV
        echo "‚úÖ All validations passed"

    - name: üîÑ Create Auto-fix Commit
      if: >
        env.FIXES_APPLIED == 'true' &&
        env.VALIDATION_FAILED == 'false' &&
        github.event.inputs.enable_auto_commit == 'true'
      run: |
        # Stage all changes
        git add .

        # Create commit message
        COMMIT_MSG="fix: Auto-fix CI failures detected at $(date -u +"%Y-%m-%d %H:%M:%S UTC")

$(git diff --cached --name-only | head -10 | sed 's/^/- /')

ü§ñ Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"

        # Commit changes
        git commit -m "$COMMIT_MSG" || {
          echo "No changes to commit"
          exit 0
        }

        # Push changes
        git push origin main

        echo "‚úÖ Auto-fix commit created and pushed"

    - name: üîÄ Create Auto-fix Pull Request
      if: >
        env.FIXES_APPLIED == 'true' &&
        env.VALIDATION_FAILED == 'false' &&
        github.event.inputs.enable_auto_pr == 'true'
      run: |
        # Create new branch
        BRANCH_NAME="ci-autofix-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH_NAME"

        # Stage and commit changes
        git add .
        git commit -m "fix: Auto-fix CI failures" || exit 0

        # Push branch
        git push -u origin "$BRANCH_NAME"

        # Create PR
        gh pr create \
          --title "üîß CI Auto-fix: Resolve detected failures" \
          --body "$(cat <<'EOF'
## Summary
Automatically detected and fixed CI failures using the CI orchestration system.

## Changes Made
$(git diff --name-only HEAD~1 | sed 's/^/- /')

## Validation
- [x] Syntax checks passed
- [x] Import tests passed
- [x] Unit tests passed
- [x] Auto-fix validation completed

## Test Plan
Please review the changes and run the full test suite to ensure no regressions.

---
ü§ñ Generated with [Claude Code](https://claude.ai/code)
EOF
)" \
          --assignee "${{ github.actor }}" \
          --label "automated,ci-fix"

    - name: üìã Create Manual Review Issue
      if: failure() || (env.VALIDATION_FAILED == 'true')
      uses: actions/github-script@v7
      with:
        script: |
          const { data: failures } = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            status: 'failure',
            per_page: 5
          });

          const failureList = failures.workflow_runs
            .map(run => `- [${run.name}](${run.html_url}) - ${run.head_branch}`)
            .join('\n');

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üö® CI Failures Require Manual Review',
            body: `## CI Auto-Fixer Alert

The CI auto-fixer detected failures that require manual review.

### Recent Failed Workflows
${failureList}

### Next Steps
1. Review the failed workflows and error logs
2. Determine if these can be added to the auto-fix patterns
3. Apply manual fixes as needed
4. Update the CI orchestration rules if applicable

### Auto-Fix Analysis
Check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed analysis.

---
ü§ñ Generated with [Claude Code](https://claude.ai/code)`,
            labels: ['ci-failure', 'needs-review', 'priority-high']
          });

    - name: üì§ Upload Orchestration Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ci-orchestration-results
        path: |
          scripts/ci_orchestration/ci_failures.json
          scripts/ci_orchestration/ci_analysis.json
          scripts/ci_orchestration/ci_fixes.json
          scripts/ci_orchestration/ci_orchestration_results.json
        retention-days: 30

    - name: üí¨ Post Summary Comment
      if: always() && github.event_name == 'workflow_run'
      uses: actions/github-script@v7
      with:
        script: |
          // Find recent commits to comment on
          const { data: commits } = await github.rest.repos.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 1
          });

          if (commits.length > 0) {
            const sha = commits[0].sha;

            const summary = process.env.FIXES_APPLIED === 'true'
              ? 'üîß CI Auto-fixer applied fixes automatically'
              : process.env.VALIDATION_FAILED === 'true'
              ? '‚ö†Ô∏è  CI Auto-fixer detected issues requiring manual review'
              : '‚úÖ CI Auto-fixer analysis completed - no action needed';

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: sha,
              body: `## CI Auto-Fixer Report

${summary}

View detailed results in the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}).`
            });
          }
