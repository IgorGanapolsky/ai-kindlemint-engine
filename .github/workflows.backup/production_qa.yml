name: Production QA Validation

on:
  push:
    paths:
      - 'books/active_production/**/*.pdf'
      - 'books/active_production/**/*.json'
  pull_request:
    paths:
      - 'books/active_production/**/*.pdf'
      - 'books/active_production/**/*.json'

jobs:
  qa-validation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
          pip install -e .
        # Core Python libs needed by validators
        pip install PyPDF2 pillow reportlab pymupdf
        # jq is used by the Slack-notification step ‚Äì add it via apt
        sudo apt-get update && sudo apt-get install -y jq
        # Expose repository root so in-repo modules (e.g. puzzle_validators) resolve
        echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
    - name: Find book directories
      id: find-books
      run: |
        echo "book_dirs=$(find books/active_production -type f -name collection.json -print0 | xargs -0 -n1 dirname | tr '\n' ' ')" >> $GITHUB_OUTPUT

    - name: Run Enhanced QA on each Book
      if: steps.find-books.outputs.book_dirs != ''
      run: |
        echo "üîç Running Enhanced QA on detected books..."
        EXIT_CODE=0
        for dir in ${{ steps.find-books.outputs.book_dirs }}; do
          echo "‚ñ∂Ô∏è  Validating $dir"
          python scripts/enhanced_qa_validator_v2.py "$dir" --output-dir "$dir"
          CODE=$?
          if [ $CODE -ne 0 ]; then
            echo "‚ùå QA FAILED for $dir"
            EXIT_CODE=$CODE
          fi
        done
        if [ $EXIT_CODE -ne 0 ]; then
          echo "One or more books failed QA"
          exit $EXIT_CODE
        fi

    - name: Skip if no books
      if: steps.find-books.outputs.book_dirs == ''
      run: echo "‚ÑπÔ∏è  No books in active_production ‚Äì skipping content QA."

    - name: Check for test content in metadata
      run: |
        # Find all JSON files and check for "test" or "Test"
        for json_file in $(find books/active_production -name '*.json' -type f); do
          if grep -i "test" "$json_file"; then
            echo "‚ùå ERROR: Found 'test' in $json_file"
            exit 1
          fi
        done
        echo "‚úÖ No test content found in metadata files"

    - name: Upload QA Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: qa-reports
        path: books/active_production/**/ENHANCED_QA_REPORT_*.json

    - name: Comment PR with QA Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## üìä Production QA Results\n\n';

          // Find all QA reports
          const reports = require('child_process')
            .execSync('find books/active_production -name qa_production_report.json')
            .toString()
            .trim()
            .split('\n')
            .filter(Boolean);

          if (reports.length === 0) {
            comment += '‚ö†Ô∏è No QA reports generated\n';
          } else {
            for (const reportPath of reports) {
              try {
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                const book = reportPath.split('/').slice(-3, -1).join('/');

                comment += `### üìö ${book}\n`;
                comment += `- **Score**: ${report.score}/100\n`;
                comment += `- **Status**: ${report.ready ? '‚úÖ Ready' : '‚ùå Not Ready'}\n`;

                if (report.critical_issues.length > 0) {
                  comment += `- **Critical Issues**: ${report.critical_issues.length}\n`;
                  report.critical_issues.forEach(issue => {
                    comment += `  - ‚ùå ${issue}\n`;
                  });
                }

                if (report.warnings.length > 0) {
                  comment += `- **Warnings**: ${report.warnings.length}\n`;
                }

                comment += '\n';
              } catch (e) {
                comment += `### ‚ùå Error reading ${reportPath}\n\n`;
              }
            }
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: üí¨ Send Enhanced Slack Notification
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [ -z "$SLACK_WEBHOOK_URL" ]; then
          echo "No Slack webhook configured"
          exit 0
        fi

        # Check for test content failures
        TEST_CONTENT_FOUND=false
        if grep -i "test" books/active_production/**/*.json 2>/dev/null; then
          TEST_CONTENT_FOUND=true
        fi

        # Parse QA results with detailed information
        TOTAL_BOOKS=0
        PASSED_BOOKS=0
        FAILED_BOOKS=0
        BOOK_DETAILS=""

        for report in $(find books/active_production -name "qa_production_report.json" 2>/dev/null); do
          TOTAL_BOOKS=$((TOTAL_BOOKS + 1))
          READY=$(jq -r '.ready' "$report" 2>/dev/null || echo "false")

          # Extract full book path (e.g., Large_Print_Crossword_Masters/volume_4/paperback)
          BOOK_PATH=$(echo "$report" | sed 's|books/active_production/||' | sed 's|/qa_production_report.json||')
          SCORE=$(jq -r '.score // 0' "$report" 2>/dev/null)

          if [ "$READY" == "true" ]; then
            PASSED_BOOKS=$((PASSED_BOOKS + 1))
            BOOK_DETAILS="${BOOK_DETAILS}‚Ä¢ ‚úÖ *${BOOK_PATH}*: Score ${SCORE}/100 - Ready\n"
          else
            FAILED_BOOKS=$((FAILED_BOOKS + 1))

            # Get critical issues (first 2)
            CRITICAL_ISSUES=$(jq -r '.critical_issues[0:2][]' "$report" 2>/dev/null | sed 's/^/    ‚Üí /')

            BOOK_DETAILS="${BOOK_DETAILS}‚Ä¢ ‚ùå *${BOOK_PATH}*: Score ${SCORE}/100\n"
            if [ -n "$CRITICAL_ISSUES" ]; then
              BOOK_DETAILS="${BOOK_DETAILS}${CRITICAL_ISSUES}\n"
            fi
          fi
        done

        # Determine overall status
        if [ "$TEST_CONTENT_FOUND" == "true" ]; then
          COLOR="danger"
          EMOJI="üö®"
          STATUS="Test content detected in metadata!"
        elif [ "$FAILED_BOOKS" -eq 0 ] && [ "$TOTAL_BOOKS" -gt 0 ]; then
          COLOR="good"
          EMOJI="‚úÖ"
          STATUS="All books ready for production"
        else
          COLOR="danger"
          EMOJI="‚ùå"
          STATUS="$FAILED_BOOKS of $TOTAL_BOOKS books not ready for production"
        fi

        # Build enhanced message
        PAYLOAD=$(cat <<EOF
        {
          "attachments": [{
            "color": "$COLOR",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "$EMOJI Production QA Validation Results"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Summary:* ${STATUS}\n*Total Books:* ${TOTAL_BOOKS} | *Ready:* ${PASSED_BOOKS} | *Failed:* ${FAILED_BOOKS}"
                }
              }
        EOF
        )

        # Add book details if any
        if [ -n "$BOOK_DETAILS" ] && [ "$TOTAL_BOOKS" -gt 0 ]; then
          PAYLOAD="${PAYLOAD},
              {
                \"type\": \"divider\"
              },
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*üìö Book Status Details:*\n${BOOK_DETAILS}\"
                }
              }"
        fi

        # Add helpful context
        PAYLOAD="${PAYLOAD},
              {
                \"type\": \"divider\"
              },
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*üí° Quick Reference:*\n‚Ä¢ Score 75/100: Grid rendering detection issue (false positive)\n‚Ä¢ Score 55/100: Missing content or structural issues\n‚Ä¢ Score <50: Critical content problems\"
                }
              }"

        PAYLOAD="${PAYLOAD},
              {
                \"type\": \"context\",
                \"elements\": [{
                  \"type\": \"mrkdwn\",
                  \"text\": \"<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Full Report> ‚Ä¢ ${{ github.event_name }}\"
                }]
              }
            ]
          }]
        }"

        echo "$PAYLOAD" | curl -X POST -H 'Content-type: application/json' \
          --data @- \
          "$SLACK_WEBHOOK_URL"
