name: Emergency Fix Handler

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:
  push:
    branches: ['**']

jobs:
  handle-emergency-fixes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config --global user.name "AI KindleMint Orchestrator"
          git config --global user.email "orchestrator@ai-kindlemint.com"
      
      - name: Check for untracked files
        id: check_untracked
        run: |
          # Count untracked files
          UNTRACKED_COUNT=$(git status --porcelain | grep '^??' | wc -l)
          echo "untracked_count=$UNTRACKED_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$UNTRACKED_COUNT" -gt 0 ]; then
            echo "Found $UNTRACKED_COUNT untracked files"
            git status --porcelain | grep '^??' | cut -c4-
            echo "has_untracked=true" >> $GITHUB_OUTPUT
          else
            echo "No untracked files found"
            echo "has_untracked=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Handle emergency fixes
        if: steps.check_untracked.outputs.has_untracked == 'true'
        run: |
          # Create emergency branch
          BRANCH_NAME="emergency/auto-commit-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          
          # Add all untracked files
          git add -A
          
          # Check if files are Python scripts
          PYTHON_FILES=$(git diff --cached --name-only | grep '\.py$' || true)
          if [ ! -z "$PYTHON_FILES" ]; then
            echo "Validating Python files..."
            for file in $PYTHON_FILES; do
              python3 -m py_compile "$file" || {
                echo "Syntax error in $file - aborting"
                exit 1
              }
            done
          fi
          
          # Commit emergency fixes
          git commit -m "ðŸš¨ Emergency: Auto-commit untracked files
          
          Detected ${{ steps.check_untracked.outputs.untracked_count }} untracked files
          These appear to be emergency fixes that were not properly committed
          
          Files:
          $(git status --porcelain | grep '^??' | cut -c4-)
          
          ðŸ¤– Generated by AI KindleMint Orchestrator"
          
          # Push branch
          git push origin $BRANCH_NAME
          
          # Create PR
          gh pr create \
            --title "ðŸš¨ Emergency: Auto-commit ${{ steps.check_untracked.outputs.untracked_count }} untracked files" \
            --body "## ðŸš¨ Emergency Fix Detection

The orchestration system detected **${{ steps.check_untracked.outputs.untracked_count }} untracked files** that appear to be emergency fixes.

### Files Detected:
\`\`\`
$(git status --porcelain | grep '^??' | cut -c4-)
\`\`\`

### Automated Actions Taken:
- âœ… Created emergency branch
- âœ… Validated Python syntax (if applicable)
- âœ… Committed all untracked files
- âœ… Created this PR for review

### Next Steps:
1. Review the emergency fixes
2. Verify they are production-ready
3. Merge if appropriate
4. The orchestration will auto-merge after 30 minutes if no objections

---
ðŸ¤– Generated by AI KindleMint Orchestrator" \
            --base main \
            --label "emergency-fix" \
            --label "auto-generated"
          
          # Create notification issue
          gh issue create \
            --title "ðŸš¨ ALERT: Emergency fixes detected and handled" \
            --body "## Emergency Fix Alert

The orchestration system has detected and handled emergency fixes.

**Untracked files found:** ${{ steps.check_untracked.outputs.untracked_count }}

A pull request has been automatically created for review.

### Potential Root Causes:
- Emergency hotfix was applied directly without proper git workflow
- Orchestration failed to commit changes after automated fixes
- Manual intervention was required and developer forgot to commit

### Recommended Actions:
1. Review the auto-generated PR immediately
2. Investigate why these files were not properly tracked
3. Update orchestration to prevent future occurrences

---
ðŸ¤– Generated by AI KindleMint Orchestrator" \
            --label "alert" \
            --label "emergency"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Auto-merge after timeout
        if: steps.check_untracked.outputs.has_untracked == 'true'
        run: |
          # Schedule auto-merge after 30 minutes
          echo "Emergency PR created. Will auto-merge after 30 minutes if no objections."