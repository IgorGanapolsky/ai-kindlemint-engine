name: RepoAudit Security Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
      - 'scripts/**'
      - '**.py'
      - '**.js'
      - '**.ts'
      - '**.go'
      - '**.java'
      - '**.c'
      - '**.cpp'
  schedule:
    - cron: '0 2 * * *'  # Daily comprehensive security audit at 2 AM
  workflow_dispatch:  # Manual trigger
    inputs:
      scan_depth:
        description: 'Security scan depth'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - deep
          - comprehensive
      workers:
        description: 'Number of parallel workers'
        required: false
        default: '10'
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write
  security-events: write

jobs:
  security-audit:
    name: üîç Advanced Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: üîÑ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive analysis
          
      - name: üêç Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: üì¶ Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-security-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-security-
            
      - name: üîß Install RepoAudit & Dependencies
        run: |
          pip install --upgrade pip
          
          # Install RepoAudit (assuming it will be available via pip)
          # For now, install from source if needed
          pip install git+https://github.com/PurCL/RepoAudit.git || echo "RepoAudit source install failed, trying alternatives"
          
          # Install additional security analysis tools
          pip install bandit safety semgrep pylint
          pip install requests PyGithub openai anthropic
          
          # Verify installation
          echo "üîç Installed security tools:"
          which bandit && bandit --version || echo "Bandit not available"
          which safety && safety --version || echo "Safety not available"
          which semgrep && semgrep --version || echo "Semgrep not available"
          
      - name: üîç Run RepoAudit Advanced Analysis
        id: repoaudit
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "üöÄ Starting advanced security analysis..."
          
          # Set scan parameters
          WORKERS="${{ github.event.inputs.workers || '10' }}"
          SCAN_DEPTH="${{ github.event.inputs.scan_depth || 'standard' }}"
          
          # Create results directory
          mkdir -p security_results
          
          # Run RepoAudit if available
          if command -v repoaudit &> /dev/null; then
            echo "üîç Running RepoAudit multi-agent analysis..."
            repoaudit \
              --path . \
              --output security_results/repoaudit_results.json \
              --workers $WORKERS \
              --format json \
              --languages python,javascript,typescript,go,java,c,cpp \
              --depth $SCAN_DEPTH || echo "RepoAudit completed with warnings"
          else
            echo "‚ö†Ô∏è RepoAudit not available, using fallback security tools"
            touch security_results/repoaudit_results.json
            echo '{"status": "unavailable", "issues": []}' > security_results/repoaudit_results.json
          fi
          
          # Run complementary security tools
          echo "üîç Running Bandit Python security analysis..."
          bandit -r src/ scripts/ -f json -o security_results/bandit_results.json || echo "Bandit analysis completed"
          
          echo "üîç Running Safety dependency check..."
          safety check --json --output security_results/safety_results.json || echo "Safety check completed"
          
          echo "üîç Running Semgrep pattern analysis..."
          semgrep --config=auto --json --output=security_results/semgrep_results.json . || echo "Semgrep analysis completed"
          
          echo "SECURITY_SCAN_COMPLETED=true" >> $GITHUB_ENV
          
      - name: üìä Analyze Security Results
        id: analyze
        run: |
          echo "üìä Processing security analysis results..."
          
          python -c "
          import json
          import os
          from pathlib import Path
          
          def load_json_safe(filepath):
              try:
                  with open(filepath, 'r') as f:
                      return json.load(f)
              except:
                  return {}
          
          results_dir = Path('security_results')
          
          # Load all security scan results
          repoaudit_results = load_json_safe(results_dir / 'repoaudit_results.json')
          bandit_results = load_json_safe(results_dir / 'bandit_results.json')
          safety_results = load_json_safe(results_dir / 'safety_results.json')
          semgrep_results = load_json_safe(results_dir / 'semgrep_results.json')
          
          # Count issues by severity
          critical_issues = 0
          high_issues = 0
          medium_issues = 0
          low_issues = 0
          
          # Process RepoAudit results
          for issue in repoaudit_results.get('issues', []):
              severity = issue.get('severity', 'medium').lower()
              if severity == 'critical':
                  critical_issues += 1
              elif severity == 'high':
                  high_issues += 1
              elif severity == 'medium':
                  medium_issues += 1
              else:
                  low_issues += 1
          
          # Process Bandit results
          for issue in bandit_results.get('results', []):
              severity = issue.get('issue_severity', 'MEDIUM').lower()
              if 'high' in severity:
                  high_issues += 1
              elif 'medium' in severity:
                  medium_issues += 1
              else:
                  low_issues += 1
          
          # Process Semgrep results
          for issue in semgrep_results.get('results', []):
              severity = issue.get('extra', {}).get('severity', 'INFO').lower()
              if 'error' in severity:
                  high_issues += 1
              elif 'warning' in severity:
                  medium_issues += 1
              else:
                  low_issues += 1
          
          # Process Safety results (vulnerabilities)
          vulnerabilities = safety_results.get('vulnerabilities', [])
          for vuln in vulnerabilities:
              high_issues += 1  # All vulnerabilities considered high
          
          total_issues = critical_issues + high_issues + medium_issues + low_issues
          
          # Calculate security score (0-100)
          if total_issues == 0:
              security_score = 100
          else:
              # Weighted scoring: critical=-40, high=-20, medium=-10, low=-5
              penalty = (critical_issues * 40 + high_issues * 20 + medium_issues * 10 + low_issues * 5)
              security_score = max(0, 100 - penalty)
          
          # Determine if security gate passes
          security_gate_passes = critical_issues == 0 and high_issues <= 3
          
          # Save summary
          summary = {
              'total_issues': total_issues,
              'critical_issues': critical_issues,
              'high_issues': high_issues,
              'medium_issues': medium_issues,
              'low_issues': low_issues,
              'security_score': security_score,
              'security_gate_passes': security_gate_passes,
              'scan_timestamp': '$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")',
              'tools_used': ['repoaudit', 'bandit', 'safety', 'semgrep']
          }
          
          with open('security_results/summary.json', 'w') as f:
              json.dump(summary, f, indent=2)
          
          # Set GitHub outputs
          print(f'Security Score: {security_score}/100')
          print(f'Critical Issues: {critical_issues}')
          print(f'High Issues: {high_issues}')
          print(f'Total Issues: {total_issues}')
          print(f'Security Gate: {\"PASS\" if security_gate_passes else \"FAIL\"}')
          
          # Set environment variables for next steps
          os.system(f'echo \"SECURITY_SCORE={security_score}\" >> \$GITHUB_ENV')
          os.system(f'echo \"CRITICAL_ISSUES={critical_issues}\" >> \$GITHUB_ENV')
          os.system(f'echo \"HIGH_ISSUES={high_issues}\" >> \$GITHUB_ENV')
          os.system(f'echo \"TOTAL_ISSUES={total_issues}\" >> \$GITHUB_ENV')
          os.system(f'echo \"SECURITY_GATE_PASSES={security_gate_passes}\" >> \$GITHUB_ENV')
          "
          
      - name: üö® Security Gate Enforcement
        if: env.SECURITY_GATE_PASSES == 'false'
        run: |
          echo "üö® SECURITY GATE FAILED"
          echo "Critical Issues: ${{ env.CRITICAL_ISSUES }}"
          echo "High Issues: ${{ env.HIGH_ISSUES }}"
          echo "Security Score: ${{ env.SECURITY_SCORE }}/100"
          echo ""
          echo "‚ùå This PR introduces critical security vulnerabilities."
          echo "Please review and fix security issues before merging."
          exit 1
          
      - name: üìù Generate Security Report
        if: always()
        run: |
          echo "üìù Generating comprehensive security report..."
          
          python -c "
          import json
          from datetime import datetime
          from pathlib import Path
          
          # Load summary
          with open('security_results/summary.json', 'r') as f:
              summary = json.load(f)
          
          # Generate markdown report
          report = f'''# üîç Security Analysis Report
          
          **Analysis Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.head_ref || github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## üìä Security Score: {summary['security_score']}/100
          
          ### Issue Summary
          - üî¥ **Critical Issues:** {summary['critical_issues']}
          - üü† **High Issues:** {summary['high_issues']}
          - üü° **Medium Issues:** {summary['medium_issues']}
          - üîµ **Low Issues:** {summary['low_issues']}
          - **Total Issues:** {summary['total_issues']}
          
          ### Security Gate Status
          {'‚úÖ **PASSED**' if summary['security_gate_passes'] else '‚ùå **FAILED**'}
          
          ### Tools Used
          - ü§ñ **RepoAudit** - Multi-agent LLM-powered analysis
          - üêç **Bandit** - Python security linter
          - üõ°Ô∏è **Safety** - Dependency vulnerability scanner
          - üîç **Semgrep** - Static analysis pattern matching
          
          ### Recommendations
          '''
          
          if summary['critical_issues'] > 0:
              report += '''
          üö® **IMMEDIATE ACTION REQUIRED**
          - Critical security vulnerabilities detected
          - Review and fix all critical issues before deployment
          - Consider security audit by security team
          '''
          elif summary['high_issues'] > 3:
              report += '''
          ‚ö†Ô∏è **HIGH PRIORITY**
          - Multiple high-severity issues detected
          - Review and prioritize fixes
          - Consider additional security testing
          '''
          elif summary['security_score'] < 80:
              report += '''
          üìã **IMPROVEMENT NEEDED**
          - Security score below recommended threshold (80)
          - Address medium and high priority issues
          - Implement security best practices
          '''
          else:
              report += '''
          ‚úÖ **GOOD SECURITY POSTURE**
          - No critical security issues detected
          - Continue following security best practices
          - Regular security audits recommended
          '''
          
          with open('security_results/security_report.md', 'w') as f:
              f.write(report)
          
          print('Security report generated successfully')
          "
          
      - name: üí¨ Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read security report
            const reportPath = 'security_results/security_report.md';
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              // Post comment with security analysis
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }
            
      - name: üì§ Upload Security Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-results
          path: security_results/
          retention-days: 30
          
      - name: üîî Notify Security Team (Critical Issues)
        if: env.CRITICAL_ISSUES != '0'
        uses: actions/github-script@v7
        with:
          script: |
            // Create security issue for critical vulnerabilities
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Critical Security Vulnerabilities Detected`,
              body: `## Security Alert
              
              Critical security vulnerabilities have been detected in the repository.
              
              **Critical Issues:** ${{ env.CRITICAL_ISSUES }}
              **High Issues:** ${{ env.HIGH_ISSUES }}
              **Security Score:** ${{ env.SECURITY_SCORE }}/100
              
              **Immediate Action Required:**
              1. Review the security analysis results
              2. Fix all critical vulnerabilities
              3. Run additional security testing
              4. Consider security team review
              
              See the [security analysis workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed results.
              
              ---
              ü§ñ Automated Security Alert from RepoAudit Integration`,
              labels: ['security', 'critical', 'vulnerability'],
              assignees: ['${{ github.actor }}']
            });
            
      - name: ‚úÖ Security Analysis Complete
        run: |
          echo "üéâ Security analysis completed successfully!"
          echo "Security Score: ${{ env.SECURITY_SCORE }}/100"
          echo "Gate Status: ${{ env.SECURITY_GATE_PASSES == 'true' && 'PASSED' || 'FAILED' }}"
          echo ""
          echo "üìã Next Steps:"
          if [ "${{ env.SECURITY_GATE_PASSES }}" = "true" ]; then
            echo "‚úÖ Security gate passed - PR can proceed"
            echo "‚úÖ No critical security issues detected"
            echo "üìä Review detailed results in artifacts"
          else
            echo "‚ùå Security gate failed - fix issues before merging"
            echo "üîç Review security report for details"
            echo "üõ†Ô∏è Address critical and high-priority vulnerabilities"
          fi