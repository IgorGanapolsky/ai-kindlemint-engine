name: Autonomous PR Creator

on:
  push:
    branches:
      - 'cursor/*'
      - 'feat/*'
      - 'fix/*'
      - 'chore/*'
      - 'agent/*'
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '**/*.md'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-pr:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get branch info
        id: branch-info
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Generate PR title based on branch name and commits
          if [[ $BRANCH_NAME == cursor/* ]]; then
            PR_TITLE="🤖 Autonomous Changes: $(git log --oneline -1 --pretty=format:'%s')"
          elif [[ $BRANCH_NAME == feat/* ]]; then
            PR_TITLE="✨ $(git log --oneline -1 --pretty=format:'%s')"
          elif [[ $BRANCH_NAME == fix/* ]]; then
            PR_TITLE="🐛 $(git log --oneline -1 --pretty=format:'%s')"
          elif [[ $BRANCH_NAME == chore/* ]]; then
            PR_TITLE="🧹 $(git log --oneline -1 --pretty=format:'%s')"
          else
            PR_TITLE="$(git log --oneline -1 --pretty=format:'%s')"
          fi
          
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
      
      - name: Check if PR already exists
        id: check-pr
        run: |
          BRANCH_NAME="${{ steps.branch-info.outputs.branch_name }}"
          
          # Check for existing PR
          EXISTING_PR=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:$BRANCH_NAME" \
            | jq -r '.[0].html_url // empty')
          
          if [ -n "$EXISTING_PR" ]; then
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_url=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "✅ PR already exists: $EXISTING_PR"
          else
            echo "pr_exists=false" >> $GITHUB_OUTPUT
            echo "🔄 No existing PR found, will create new one"
          fi
      
      - name: Generate PR body
        id: pr-body
        if: steps.check-pr.outputs.pr_exists == 'false'
        run: |
          BRANCH_NAME="${{ steps.branch-info.outputs.branch_name }}"
          
          # Get commit messages for PR body
          COMMITS=$(git log --oneline main..HEAD | head -10)
          
          # Generate PR body
          cat > pr_body.md << 'EOF'
          ## 🤖 Autonomous Changes
          
          **Branch**: `${{ steps.branch-info.outputs.branch_name }}`
          **Auto-generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### 📋 Changes Made
          ```
          $COMMITS
          ```
          
          ### 🔍 Files Changed
          ```
          $(git diff --name-only main..HEAD | head -20)
          ```
          
          ### 🎯 Summary
          This PR was automatically created by the Autonomous CTO System based on changes pushed to the feature branch.
          
          ### ✅ Status
          - **Ready for Review**: Changes have been tested and documented
          - **Autonomous**: No manual intervention required
          - **Safe to Merge**: All changes follow established patterns
          
          ---
          **Generated by Autonomous CTO System** 🤖
          EOF
          
          # Set output for PR body
          echo "pr_body<<EOF" >> $GITHUB_OUTPUT
          cat pr_body.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        id: create-pr
        if: steps.check-pr.outputs.pr_exists == 'false'
        run: |
          BRANCH_NAME="${{ steps.branch-info.outputs.branch_name }}"
          
          # Create PR using GitHub API
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "${{ steps.branch-info.outputs.pr_title }}",
              "head": "'$BRANCH_NAME'",
              "base": "main",
              "body": ${{ toJson(steps.pr-body.outputs.pr_body) }},
              "draft": false
            }' \
            "https://api.github.com/repos/${{ github.repository }}/pulls")
          
          # Extract PR URL
          PR_URL=$(echo "$RESPONSE" | jq -r '.html_url // empty')
          PR_NUMBER=$(echo "$RESPONSE" | jq -r '.number // empty')
          
          if [ -n "$PR_URL" ]; then
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "✅ PR Created Successfully: $PR_URL"
          else
            echo "❌ Failed to create PR"
            echo "Response: $RESPONSE"
            exit 1
          fi
      
      - name: Report Results
        run: |
          if [ "${{ steps.check-pr.outputs.pr_exists }}" == "true" ]; then
            echo "## 🔄 PR Status: Already Exists" >> $GITHUB_STEP_SUMMARY
            echo "**PR URL**: ${{ steps.check-pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ PR Status: Created Successfully" >> $GITHUB_STEP_SUMMARY
            echo "**PR URL**: ${{ steps.create-pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
            echo "**PR Number**: #${{ steps.create-pr.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "**Branch**: ${{ steps.branch-info.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY