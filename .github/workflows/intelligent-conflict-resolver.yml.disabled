name: Intelligent Conflict Resolution

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to resolve conflicts for'
        required: false
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  resolve-conflicts:
    name: Intelligent Conflict Resolution
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install openai anthropic PyGithub
          
      - name: Check for conflicting PRs
        id: check-conflicts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -c "
          import os
          from github import Github
          
          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo('${{ github.repository }}')
          
          # Get PR to check
          pr_number = ${{ github.event.inputs.pr_number || github.event.pull_request.number || 0 }}
          
          if pr_number == 0:
              # Find all conflicting PRs
              conflicting_prs = []
              for pr in repo.get_pulls(state='open'):
                  if pr.mergeable_state == 'dirty':
                      conflicting_prs.append(pr.number)
              
              if conflicting_prs:
                  print(f'Found {len(conflicting_prs)} PRs with conflicts: {conflicting_prs}')
                  print(f'::set-output name=has_conflicts::true')
                  print(f'::set-output name=pr_numbers::{conflicting_prs}')
              else:
                  print('No conflicting PRs found')
                  print(f'::set-output name=has_conflicts::false')
          else:
              pr = repo.get_pull(pr_number)
              if pr.mergeable_state == 'dirty':
                  print(f'PR #{pr_number} has conflicts')
                  print(f'::set-output name=has_conflicts::true')
                  print(f'::set-output name=pr_numbers::[{pr_number}]')
              else:
                  print(f'PR #{pr_number} has no conflicts')
                  print(f'::set-output name=has_conflicts::false')
          "
          
      - name: Resolve conflicts for each PR
        if: steps.check-conflicts.outputs.has_conflicts == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          python -c "
          import os
          import json
          import subprocess
          from github import Github
          
          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo('${{ github.repository }}')
          
          pr_numbers = ${{ steps.check-conflicts.outputs.pr_numbers }}
          
          for pr_number in pr_numbers:
              print(f'\\nüîß Resolving conflicts for PR #{pr_number}')
              pr = repo.get_pull(pr_number)
              
              try:
                  # Checkout PR branch
                  subprocess.run(['git', 'fetch', 'origin', f'pull/{pr_number}/head:pr-{pr_number}'], check=True)
                  subprocess.run(['git', 'checkout', f'pr-{pr_number}'], check=True)
                  
                  # Try to merge main
                  merge_result = subprocess.run(['git', 'merge', 'origin/main', '--no-commit'], capture_output=True)
                  
                  if merge_result.returncode != 0:
                      print('Conflicts detected, running intelligent resolver...')
                      
                      # Run our intelligent conflict resolver
                      resolver_result = subprocess.run([
                          'python', 'scripts/pr_orchestrator/merge_conflict_resolver.py',
                          '--auto-apply',
                          '--min-confidence', '0.7',
                          '--use-ai',
                          '--report', f'conflict_report_{pr_number}.json'
                      ], capture_output=True, text=True)
                      
                      print(resolver_result.stdout)
                      
                      if resolver_result.returncode == 0:
                          # Check if all conflicts were resolved
                          status = subprocess.run(['git', 'status', '--porcelain'], capture_output=True, text=True)
                          
                          if 'UU' not in status.stdout:  # No unmerged files
                              # Commit the resolution
                              subprocess.run(['git', 'add', '-A'], check=True)
                              subprocess.run(['git', 'commit', '-m', f'ü§ñ Auto-resolve conflicts with intelligent resolver\\n\\nUsed AI-powered conflict resolution with pattern matching'], check=True)
                              
                              # Push to PR branch
                              subprocess.run(['git', 'push', 'origin', f'pr-{pr_number}:{pr.head.ref}'], check=True)
                              
                              # Add comment to PR
                              with open(f'conflict_report_{pr_number}.json', 'r') as f:
                                  report = json.load(f)
                              
                              comment = f'''## ü§ñ Intelligent Conflict Resolution
                              
                              I've automatically resolved the merge conflicts in this PR using:
                              - **Pattern-based resolution** for common conflicts (imports, versions, etc.)
                              - **AI-powered resolution** for complex semantic conflicts
                              
                              ### Resolution Summary:
                              - **Total conflicts resolved:** {report.get('total_conflicts', 0)}
                              - **Files updated:** {report.get('total_files', 0)}
                              - **Average confidence:** {report.get('average_confidence', 0):.1%}
                              
                              All resolutions had confidence scores above 70%. Please review the changes.
                              '''
                              
                              pr.create_issue_comment(comment)
                              print(f'‚úÖ Successfully resolved conflicts for PR #{pr_number}')
                          else:
                              print(f'‚ö†Ô∏è  Some conflicts remain unresolved for PR #{pr_number}')
                              pr.create_issue_comment('‚ö†Ô∏è Attempted automatic conflict resolution but some conflicts require manual intervention.')
                      else:
                          print(f'‚ùå Conflict resolver failed for PR #{pr_number}')
                  else:
                      print(f'No conflicts found for PR #{pr_number}')
                      
              except Exception as e:
                  print(f'Error processing PR #{pr_number}: {e}')
                  continue
          "
          
      - name: Upload resolution reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conflict-resolution-reports
          path: conflict_report_*.json