name: Continuous PR Resolver

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes - aggressive!
  workflow_dispatch:
    inputs:
      force_merge:
        description: 'Force merge all viable PRs'
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  actions: write

jobs:
  resolve-all-prs:
    name: Continuously Resolve All PRs
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Process All Open PRs
        uses: actions/github-script@v7
        env:
          FORCE_MERGE: ${{ inputs.force_merge }}
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Get all open PRs
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'asc'
            });
            
            console.log(`üîç Found ${prs.length} open PRs to process`);
            
            for (const pr of prs) {
              console.log(`\nüìã Processing PR #${pr.number}: ${pr.title}`);
              
              try {
                // Skip drafts unless force merge
                if (pr.draft && process.env.FORCE_MERGE !== 'true') {
                  console.log('‚è≠Ô∏è Skipping draft PR');
                  continue;
                }
                
                // Get detailed PR info
                const { data: pullRequest } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number
                });
                
                // Check mergeable state
                console.log(`Mergeable: ${pullRequest.mergeable}, State: ${pullRequest.mergeable_state}`);
                
                // Handle different states
                if (pullRequest.mergeable_state === 'dirty' || pullRequest.mergeable_state === 'conflicting') {
                  console.log('üîß Attempting to resolve merge conflicts...');
                  
                  try {
                    // Fetch and checkout PR branch
                    execSync(`git fetch origin pull/${pr.number}/head:pr-${pr.number}`, { stdio: 'inherit' });
                    execSync(`git checkout pr-${pr.number}`, { stdio: 'inherit' });
                    
                    // Merge main with conflict resolution
                    execSync('git fetch origin main', { stdio: 'inherit' });
                    
                    // Attempt auto-merge with theirs strategy for conflicts
                    try {
                      execSync('git merge origin/main --no-edit', { stdio: 'inherit' });
                    } catch (mergeError) {
                      console.log('‚ö†Ô∏è Auto-merge failed, using theirs strategy');
                      execSync('git reset --hard', { stdio: 'inherit' });
                      execSync('git merge origin/main --strategy-option=theirs --no-edit', { stdio: 'inherit' });
                    }
                    
                    // Push resolved branch
                    execSync(`git push origin pr-${pr.number}:${pr.head.ref} --force`, { stdio: 'inherit' });
                    console.log('‚úÖ Conflicts resolved and pushed');
                    
                    // Wait for checks to update
                    await new Promise(resolve => setTimeout(resolve, 5000));
                  } catch (error) {
                    console.log(`‚ùå Could not resolve conflicts: ${error.message}`);
                  }
                }
                
                // Check for failed checks
                const { data: checkRuns } = await github.rest.checks.listForRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: pr.head.sha
                });
                
                const failedChecks = checkRuns.check_runs.filter(check => 
                  check.conclusion === 'failure' && 
                  !['DeepSource', 'Vercel'].includes(check.name) // Ignore these
                );
                
                if (failedChecks.length > 0) {
                  console.log(`‚ö†Ô∏è ${failedChecks.length} failed checks found`);
                  
                  // Retry failed workflows
                  for (const check of failedChecks) {
                    if (check.app.slug === 'github-actions') {
                      try {
                        const workflowRunId = check.external_id;
                        await github.rest.actions.reRunWorkflow({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          run_id: workflowRunId
                        });
                        console.log(`üîÑ Retried workflow: ${check.name}`);
                      } catch (error) {
                        console.log(`Could not retry ${check.name}`);
                      }
                    }
                  }
                }
                
                // Final merge attempt
                const { data: finalPr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number
                });
                
                if (finalPr.mergeable === true || process.env.FORCE_MERGE === 'true') {
                  try {
                    await github.rest.pulls.merge({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: pr.number,
                      merge_method: 'squash',
                      commit_title: `${pr.title} [Auto-resolved by Continuous Orchestration]`
                    });
                    console.log(`‚úÖ Successfully merged PR #${pr.number}`);
                  } catch (mergeError) {
                    console.log(`‚ùå Could not merge: ${mergeError.message}`);
                    
                    // Add comment about status
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: pr.number,
                      body: `ü§ñ **Continuous Resolver Status**\n\nUnable to auto-merge due to: ${mergeError.message}\n\nManual intervention may be required.`
                    });
                  }
                }
                
              } catch (error) {
                console.log(`‚ùå Error processing PR #${pr.number}: ${error.message}`);
              }
              
              // Return to main branch
              try {
                execSync('git checkout main', { stdio: 'inherit' });
              } catch (e) {
                // Ignore checkout errors
              }
            }
            
            console.log('\n‚úÖ Continuous PR resolution complete');
      
      - name: Report Status
        if: always()
        run: |
          echo "ü§ñ Continuous PR Resolver completed at $(date)"
          echo "Next run in 5 minutes..."