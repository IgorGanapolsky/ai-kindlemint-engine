name: Deploy Portfolio Management System

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/portfolio-table.yaml'
      - 'lambda/niche_research_agent.py'
      - 'lambda/multi_series_orchestrator.py'
      - 'lambda/ceo_portfolio_dashboard.py'
      - 'kindlemint/portfolio/**'
      - '.github/workflows/deploy-portfolio.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  deploy-portfolio-infrastructure:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy Portfolio DynamoDB Table
      run: |
        echo "üóÑÔ∏è Deploying Portfolio DynamoDB Table..."
        aws cloudformation deploy \
          --template-file infrastructure/portfolio-table.yaml \
          --stack-name kindlemint-portfolio-tracker \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}
        echo "‚úÖ Portfolio table deployed successfully"

  package-and-deploy-lambdas:
    needs: deploy-portfolio-infrastructure
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 requests

    - name: Package Lambda functions
      run: |
        echo "üì¶ Packaging Lambda functions..."
        
        # Create deployment packages
        mkdir -p lambda-packages
        
        # Package niche research agent
        cd lambda-packages
        mkdir niche-research-agent
        cp ../lambda/niche_research_agent.py niche-research-agent/
        cp -r ../kindlemint niche-research-agent/
        cd niche-research-agent
        zip -r ../niche-research-agent.zip .
        cd ..
        
        # Package multi-series orchestrator
        mkdir multi-series-orchestrator
        cp ../lambda/multi_series_orchestrator.py multi-series-orchestrator/
        cp -r ../kindlemint multi-series-orchestrator/
        cd multi-series-orchestrator
        zip -r ../multi-series-orchestrator.zip .
        cd ..
        
        # Package CEO dashboard
        mkdir ceo-portfolio-dashboard
        cp ../lambda/ceo_portfolio_dashboard.py ceo-portfolio-dashboard/
        cp -r ../kindlemint ceo-portfolio-dashboard/
        cd ceo-portfolio-dashboard
        zip -r ../ceo-portfolio-dashboard.zip .
        cd ..
        
        ls -la *.zip

    - name: Deploy Niche Research Agent Lambda
      run: |
        echo "üîç Deploying Niche Research Agent..."
        
        # Check if function exists
        if aws lambda get-function --function-name kindlemint-niche-research-agent 2>/dev/null; then
          echo "Updating existing function..."
          aws lambda update-function-code \
            --function-name kindlemint-niche-research-agent \
            --zip-file fileb://lambda-packages/niche-research-agent.zip
        else
          echo "Creating new function..."
          aws lambda create-function \
            --function-name kindlemint-niche-research-agent \
            --runtime python3.11 \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/V3OrchestratorRole \
            --handler niche_research_agent.lambda_handler \
            --zip-file fileb://lambda-packages/niche-research-agent.zip \
            --timeout 300 \
            --memory-size 512 \
            --environment Variables='{
              "OPENAI_API_KEY":"${{ secrets.OPENAI_API_KEY }}",
              "GEMINI_API_KEY":"${{ secrets.GEMINI_API_KEY }}",
              "SLACK_WEBHOOK_URL":"${{ secrets.SLACK_WEBHOOK_URL }}"
            }'
        fi

    - name: Deploy Multi-Series Orchestrator Lambda
      run: |
        echo "üè≠ Deploying Multi-Series Orchestrator..."
        
        # Check if function exists
        if aws lambda get-function --function-name kindlemint-multi-series-orchestrator 2>/dev/null; then
          echo "Updating existing function..."
          aws lambda update-function-code \
            --function-name kindlemint-multi-series-orchestrator \
            --zip-file fileb://lambda-packages/multi-series-orchestrator.zip
        else
          echo "Creating new function..."
          aws lambda create-function \
            --function-name kindlemint-multi-series-orchestrator \
            --runtime python3.11 \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/V3OrchestratorRole \
            --handler multi_series_orchestrator.lambda_handler \
            --zip-file fileb://lambda-packages/multi-series-orchestrator.zip \
            --timeout 900 \
            --memory-size 1024 \
            --environment Variables='{
              "OPENAI_API_KEY":"${{ secrets.OPENAI_API_KEY }}",
              "GEMINI_API_KEY":"${{ secrets.GEMINI_API_KEY }}",
              "SLACK_WEBHOOK_URL":"${{ secrets.SLACK_WEBHOOK_URL }}"
            }'
        fi

    - name: Deploy CEO Portfolio Dashboard Lambda
      run: |
        echo "üìä Deploying CEO Portfolio Dashboard..."
        
        # Check if function exists
        if aws lambda get-function --function-name kindlemint-ceo-portfolio-dashboard 2>/dev/null; then
          echo "Updating existing function..."
          aws lambda update-function-code \
            --function-name kindlemint-ceo-portfolio-dashboard \
            --zip-file fileb://lambda-packages/ceo-portfolio-dashboard.zip
        else
          echo "Creating new function..."
          aws lambda create-function \
            --function-name kindlemint-ceo-portfolio-dashboard \
            --runtime python3.11 \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/V3OrchestratorRole \
            --handler ceo_portfolio_dashboard.lambda_handler \
            --zip-file fileb://lambda-packages/ceo-portfolio-dashboard.zip \
            --timeout 300 \
            --memory-size 512 \
            --environment Variables='{
              "OPENAI_API_KEY":"${{ secrets.OPENAI_API_KEY }}",
              "GEMINI_API_KEY":"${{ secrets.GEMINI_API_KEY }}",
              "SLACK_WEBHOOK_URL":"${{ secrets.SLACK_WEBHOOK_URL }}"
            }'
        fi

  setup-schedules:
    needs: package-and-deploy-lambdas
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup EventBridge Schedules
      run: |
        echo "‚è∞ Setting up EventBridge schedules..."
        
        # Niche Research Agent - Daily at 9 AM UTC
        aws events put-rule \
          --name kindlemint-niche-research-schedule \
          --schedule-expression "cron(0 9 * * ? *)" \
          --description "Daily niche research for KindleMint"
        
        aws events put-targets \
          --rule kindlemint-niche-research-schedule \
          --targets "Id"="1","Arn"="arn:aws:lambda:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:kindlemint-niche-research-agent","Input"='{"source":"scheduled_daily","max_opportunities":3}'
        
        # Multi-Series Orchestrator - Hourly
        aws events put-rule \
          --name kindlemint-orchestrator-schedule \
          --schedule-expression "rate(1 hour)" \
          --description "Hourly portfolio orchestration for KindleMint"
        
        aws events put-targets \
          --rule kindlemint-orchestrator-schedule \
          --targets "Id"="1","Arn"="arn:aws:lambda:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:kindlemint-multi-series-orchestrator","Input"='{"source":"scheduled_hourly"}'
        
        # CEO Dashboard - Daily at 8 AM UTC
        aws events put-rule \
          --name kindlemint-ceo-dashboard-schedule \
          --schedule-expression "cron(0 8 * * ? *)" \
          --description "Daily CEO dashboard for KindleMint"
        
        aws events put-targets \
          --rule kindlemint-ceo-dashboard-schedule \
          --targets "Id"="1","Arn"="arn:aws:lambda:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:kindlemint-ceo-portfolio-dashboard","Input"='{"source":"scheduled_daily"}'
        
        echo "‚úÖ EventBridge schedules configured"

    - name: Grant EventBridge permissions to Lambda
      run: |
        echo "üîê Granting EventBridge permissions..."
        
        # Niche Research Agent
        aws lambda add-permission \
          --function-name kindlemint-niche-research-agent \
          --statement-id allow-eventbridge-niche-research \
          --action lambda:InvokeFunction \
          --principal events.amazonaws.com \
          --source-arn arn:aws:events:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:rule/kindlemint-niche-research-schedule || true
        
        # Multi-Series Orchestrator
        aws lambda add-permission \
          --function-name kindlemint-multi-series-orchestrator \
          --statement-id allow-eventbridge-orchestrator \
          --action lambda:InvokeFunction \
          --principal events.amazonaws.com \
          --source-arn arn:aws:events:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:rule/kindlemint-orchestrator-schedule || true
        
        # CEO Dashboard
        aws lambda add-permission \
          --function-name kindlemint-ceo-portfolio-dashboard \
          --statement-id allow-eventbridge-dashboard \
          --action lambda:InvokeFunction \
          --principal events.amazonaws.com \
          --source-arn arn:aws:events:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:rule/kindlemint-ceo-dashboard-schedule || true
        
        echo "‚úÖ Portfolio Management System deployed successfully!"
        echo "üîç Niche Research Agent: Runs daily at 9 AM UTC"
        echo "üè≠ Multi-Series Orchestrator: Runs hourly" 
        echo "üìä CEO Dashboard: Runs daily at 8 AM UTC"