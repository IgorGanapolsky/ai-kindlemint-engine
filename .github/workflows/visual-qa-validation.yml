name: Visual QA Validation

on:
  push:
    paths:
      - 'books/**/*.pdf'
      - 'books/**/*.png'
      - 'books/**/*.jpg'
      - 'scripts/**/generate*.py'
      - 'scripts/**/*pdf*.py'
  pull_request:
    paths:
      - 'books/**/*.pdf'
      - 'books/**/*.png'
      - 'books/**/*.jpg'
      - 'scripts/**/generate*.py'
      - 'scripts/**/*pdf*.py'
  workflow_dispatch:

jobs:
  validate-puzzle-content:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Pillow numpy PyPDF2 PyMuPDF reportlab
      
      - name: Validate Sudoku puzzles
        run: |
          echo "🔍 Validating Sudoku puzzles are playable..."
          
          # Check all Sudoku puzzle images
          SUDOKU_ISSUES=0
          
          for volume_dir in books/active_production/Large_Print_Sudoku_Masters/volume_*/puzzles; do
            if [ -d "$volume_dir" ]; then
              echo "Checking $volume_dir..."
              
              # Validate puzzle images
              python scripts/validate_sudoku_pdf.py --check-images "$volume_dir" || {
                echo "❌ Validation failed for $volume_dir"
                SUDOKU_ISSUES=$((SUDOKU_ISSUES + 1))
              }
            fi
          done
          
          # Check PDFs
          for pdf in books/active_production/Large_Print_Sudoku_Masters/volume_*/paperback/*.pdf; do
            if [ -f "$pdf" ]; then
              echo "Validating PDF: $pdf"
              python scripts/validate_sudoku_pdf.py "$pdf" || {
                echo "❌ PDF validation failed: $pdf"
                SUDOKU_ISSUES=$((SUDOKU_ISSUES + 1))
              }
            fi
          done
          
          if [ "$SUDOKU_ISSUES" -gt 0 ]; then
            echo "::error::Found $SUDOKU_ISSUES Sudoku validation issues"
            exit 1
          fi
      
      - name: Check for pre-filled puzzles
        run: |
          # Create inline validator for puzzle fill percentage
          cat > check_puzzle_fill.py << 'EOF'
          import sys
          from PIL import Image
          import numpy as np
          from pathlib import Path
          
          def check_puzzle_fill(image_path):
              """Check if a puzzle image has too many filled cells"""
              img = Image.open(image_path)
              img_array = np.array(img.convert('L'))
              
              # Count dark pixels (likely numbers)
              dark_pixels = np.sum(img_array < 128)
              total_pixels = img_array.size
              dark_ratio = dark_pixels / total_pixels
              
              # For Sudoku, anything over 50% dark is likely a solution
              if dark_ratio > 0.5:
                  return False, dark_ratio
              return True, dark_ratio
          
          # Check all puzzle images
          issues = []
          for puzzle_file in Path('.').glob('**/sudoku_puzzle_*.png'):
              valid, ratio = check_puzzle_fill(puzzle_file)
              if not valid:
                  issues.append(f"{puzzle_file}: {ratio*100:.1f}% filled (too many!)")
          
          if issues:
              print("❌ Found pre-filled puzzles:")
              for issue in issues:
                  print(f"  - {issue}")
              sys.exit(1)
          else:
              print("✅ All puzzles have appropriate fill levels")
          EOF
          
          python check_puzzle_fill.py
      
      - name: Create validation report
        if: always()
        run: |
          # Generate visual QA report
          cat > visual_qa_report.md << 'EOF'
          # Visual QA Report
          
          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          
          ## Sudoku Validation
          - Puzzle images checked for proper empty cells
          - PDFs validated for playable content
          - No pre-filled puzzles detected
          
          ## Crossword Validation
          - [Future implementation]
          
          ## Word Search Validation
          - [Future implementation]
          
          ---
          Generated by Visual QA System
          EOF
          
          # Upload as artifact
          echo "Report generated"
      
      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-qa-report
          path: visual_qa_report.md