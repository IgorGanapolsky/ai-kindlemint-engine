name: Daily Summary Report

on:
  schedule:
    # Run daily at 11 PM UTC (6 PM EST / 3 PM PST)
    - cron: '0 23 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  daily-summary:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install full requirements if available
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
          pip install -e . || echo "Failed to install some requirements"
        else
          # Fallback to core dependencies needed for scripts
          pip install requests pandas python-dotenv PyMuPDF PyPDF2 Pillow reportlab
        fi
        # Install jq for JSON processing
        sudo apt-get update && sudo apt-get install -y jq

    - name: Generate Daily Summary
      run: |
        export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
        if [ -f "scripts/daily_summary_generator.py" ]; then
          python scripts/daily_summary_generator.py || {
            echo "‚ö†Ô∏è Daily summary generator failed with exit code: $?"
            echo "Creating minimal summary..."
            mkdir -p reports/daily-summaries
            echo '{"date": "'$(date +%Y-%m-%d)'", "status": "minimal", "production": {"total_books": 0, "books_generated_today": 0, "series_status": []}, "quality": {"qa_pass_rate": 0}, "revenue_estimate": {"monthly_estimate": 0}, "market_research": {"trending_keywords": []}, "next_actions": []}' > reports/daily-summaries/latest.json
          }
        else
          echo "‚ö†Ô∏è daily_summary_generator.py not found, creating minimal summary"
          mkdir -p reports/daily-summaries
          echo '{"date": "'$(date +%Y-%m-%d)'", "status": "minimal", "production": {"total_books": 0, "books_generated_today": 0, "series_status": []}, "quality": {"qa_pass_rate": 0}, "revenue_estimate": {"monthly_estimate": 0}, "market_research": {"trending_keywords": []}, "next_actions": []}' > reports/daily-summaries/latest.json
        fi

    - name: Create Summary Dashboard
      run: |
        # Create a dashboard markdown file
        python -c "
import json
from datetime import datetime
from pathlib import Path

# Read latest summary
summary_path = Path('reports/daily-summaries/latest.json')
if summary_path.exists():
    with open(summary_path) as f:
        summary = json.load(f)

    # Create dashboard
    dashboard = f'''# üìä KindleMint Dashboard

*Last Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} UTC*

## üöÄ Quick Stats

| Metric | Value | Trend |
|--------|-------|-------|
| **Total Books** | {summary['production']['total_books']} | üìà |
| **Monthly Revenue** | \${summary['revenue_estimate']['monthly_estimate']:,.0f} | üí∞ |
| **QA Pass Rate** | {summary['quality']['qa_pass_rate']:.0f}% | ‚úÖ |
| **Daily Production** | {summary['production']['books_generated_today']} books | üìö |

## üìà Series Progress

'''

    for series in summary['production']['series_status']:
        volumes = len(series['volumes'])
        dashboard += f'### {series[\"name\"]}\n'
        dashboard += f'Progress: ' + '‚ñà' * volumes + '‚ñë' * (10 - volumes) + f' ({volumes}/10)\n\n'

    dashboard += f'''
## üî• Market Trends

**Top Keywords Today:**
'''
    for kw in summary['market_research']['trending_keywords'][:3]:
        dashboard += f'- {kw}\n'

    dashboard += f'''

## üí° Actions Needed

'''
    for i, action in enumerate(summary['next_actions'][:3], 1):
        dashboard += f'{i}. {action}\n'

    dashboard += '''

---
[View Full Report](reports/daily-summaries/latest.md) | [Historical Data](reports/daily-summaries/)
'''

    with open('DASHBOARD.md', 'w') as f:
        f.write(dashboard)

    print('‚úÖ Dashboard created')
else:
    print('‚ö†Ô∏è No summary data found')
"

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add reports/daily-summaries/ DASHBOARD.md || true
        git diff --quiet && git diff --staged --quiet || (
          git commit -m "üìä Daily summary update - $(date +'%Y-%m-%d')

          Total books: $(grep -o 'total_books\": [0-9]*' reports/daily-summaries/latest.json | grep -o '[0-9]*')
          Monthly revenue estimate: $(grep -o 'monthly_estimate\": [0-9]*' reports/daily-summaries/latest.json | grep -o '[0-9]*')

          View full report: reports/daily-summaries/latest.md" && \
          git push
        )

    - name: Send Slack notification
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        # Check if webhook is configured
        if [ -z "$SLACK_WEBHOOK_URL" ]; then
          echo "No Slack webhook configured, skipping notification"
          exit 0
        fi

        # Extract key metrics
        if [ -f "reports/daily-summaries/latest.json" ]; then
          BOOKS=$(jq -r '.production.total_books' reports/daily-summaries/latest.json)
          REVENUE=$(jq -r '.revenue_estimate.monthly_estimate' reports/daily-summaries/latest.json)
          QA_RATE=$(jq -r '.quality.qa_pass_rate' reports/daily-summaries/latest.json)

          # Format revenue with commas
          REVENUE_FMT=$(printf "%'.0f" $REVENUE)

          # Send to Slack
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"üìä KindleMint Daily Summary\",
              \"blocks\": [
                {
                  \"type\": \"header\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"üìä KindleMint Daily Summary\"
                  }
                },
                {
                  \"type\": \"section\",
                  \"fields\": [
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Total Books:* ${BOOKS}\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Monthly Revenue:* \$${REVENUE_FMT}\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*QA Pass Rate:* ${QA_RATE}%\"
                    }
                  ]
                },
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"üìà View full report on GitHub\"
                  }
                }
              ]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }} || true
        fi

    - name: Create Issue for Low QA
      if: always()
      run: |
        # Check if QA rate is low
        if [ -f "reports/daily-summaries/latest.json" ]; then
          QA_RATE=$(jq -r '.quality.qa_pass_rate' reports/daily-summaries/latest.json)
          if (( $(echo "$QA_RATE < 80" | bc -l) )); then
            gh issue create \
              --title "‚ö†Ô∏è Low QA Pass Rate: ${QA_RATE}%" \
              --body "The daily QA pass rate has dropped below 80%. Please review recent changes and fix quality issues.

              View the full report: [Daily Summary](reports/daily-summaries/latest.md)" \
              --label "quality,automated" || true
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
