name: AI Development Team - Intelligent PR Review & Merge System

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  workflow_run:
    workflows: ["PR Validation Pipeline"]
    types: [completed]
  issue_comment:
    types: [created]
  schedule:
    - cron: '*/30 * * * *'  # Check stale PRs every 30 minutes

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  actions: read

jobs:
  ai-team-review:
    name: AI Development Team Review
    runs-on: ubuntu-latest
    outputs:
      team_decision: ${{ steps.team-orchestrator.outputs.decision }}
      team_confidence: ${{ steps.team-orchestrator.outputs.confidence }}
      consensus_reached: ${{ steps.team-orchestrator.outputs.consensus }}
      escalation_required: ${{ steps.team-orchestrator.outputs.escalation }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install PyGithub openai anthropic pyyaml requests psutil
          pip install -e .
          
      - name: AI Development Team Orchestrator
        id: team-orchestrator
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "🚀 Starting AI Development Team review..."
          
          # Run the AI Development Team Orchestrator
          python -c "
          import asyncio
          import os
          import json
          import sys
          sys.path.insert(0, 'src')
          
          from kindlemint.agents.ai_teammates.development_team_orchestrator import AIDevelopmentTeamOrchestrator
          
          async def main():
              github_token = os.environ['GITHUB_TOKEN']
              anthropic_key = os.environ['ANTHROPIC_API_KEY']
              
              # Initialize orchestrator
              orchestrator = AIDevelopmentTeamOrchestrator(github_token, anthropic_key)
              
              # Orchestrate team review
              team_analysis = await orchestrator.orchestrate_team_review(
                  '${{ github.repository }}', 
                  ${{ github.event.pull_request.number }}
              )
              
              # Extract results
              decision = team_analysis.team_decision
              
              # Output results for GitHub Actions
              print(f'::set-output name=decision::{decision.final_decision}')
              print(f'::set-output name=confidence::{decision.confidence:.3f}')
              print(f'::set-output name=consensus::{decision.team_consensus}')
              print(f'::set-output name=escalation::{decision.escalation_required}')
              
              # Save detailed analysis
              analysis_data = {
                  'final_decision': decision.final_decision,
                  'confidence': decision.confidence,
                  'team_consensus': decision.team_consensus,
                  'escalation_required': decision.escalation_required,
                  'primary_reasoning': decision.primary_reasoning,
                  'business_alignment': decision.business_alignment,
                  'risk_assessment': decision.risk_assessment,
                  'coordination_metrics': team_analysis.coordination_metrics,
                  'timestamp': '$(date -Iseconds)'
              }
              
              with open('ai_team_analysis.json', 'w') as f:
                  json.dump(analysis_data, f, indent=2)
              
              return decision.final_decision
          
          # Run the orchestrator
          result = asyncio.run(main())
          print(f'AI Development Team Decision: {result}')
          "
          
      - name: Post AI Team Summary
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const analysis = JSON.parse(fs.readFileSync('ai_team_analysis.json', 'utf8'));
            
            const emoji = {
              'merge': '✅',
              'reject': '❌',
              'escalate': '🚨',
              'wait': '⏳'
            };
            
            const comment = `## 🤖 AI Development Team - Quick Summary
            
            **Team Decision:** ${emoji[analysis.final_decision] || '❓'} **${analysis.final_decision.toUpperCase()}**
            **Confidence:** ${(analysis.confidence * 100).toFixed(1)}%
            **Team Consensus:** ${analysis.team_consensus ? 'Yes' : 'No'}
            
            ${analysis.escalation_required ? '🚨 **Escalation Required**' : ''}
            
            *Full detailed analysis available in team decision comment below.*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          
      - name: Upload AI Team Analysis Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai-team-analysis-${{ github.event.pull_request.number }}
          path: |
            ai_team_analysis.json

  execute-team-decision:
    name: Execute AI Team Decision
    needs: ai-team-review
    runs-on: ubuntu-latest
    if: needs.ai-team-review.outputs.team_decision == 'merge'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Download AI Team Analysis
        uses: actions/download-artifact@v4
        with:
          name: ai-team-analysis-${{ github.event.pull_request.number }}
          
      - name: Post Execution Status
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const analysis = JSON.parse(fs.readFileSync('ai_team_analysis.json', 'utf8'));
            
            const comment = `## 🚀 AI Team Decision Execution
            
            **Executing Team Decision:** MERGE (Confidence: ${(analysis.confidence * 100).toFixed(1)}%)
            
            ### Execution Status:
            - **Team Consensus:** ${analysis.team_consensus ? '✅ Achieved' : '⚠️ Majority'}
            - **Business Alignment:** ${analysis.business_alignment.replace('_', ' ').toUpperCase()}
            - **Auto-merge:** Enabled and waiting for status checks
            
            The AI Development Team has determined this PR is ready for autonomous merge.
            
            ### Override Commands:
            - Comment \`/hold\` to prevent auto-merge
            - Comment \`/escalate\` to request human review
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Enable Auto-Merge
        if: needs.ai-team-review.outputs.team_confidence > 0.70
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ github.event.pull_request.number }} \
            --auto \
            --merge \
            --delete-branch \
            --subject "Auto-merge: ${{ github.event.pull_request.title }}" \
            --body "Merged by AI Development Team with ${{ needs.ai-team-review.outputs.team_confidence }}% confidence"
            
      - name: Post-Merge Validation
        run: |
          echo "🎯 AI Development Team autonomous merge completed successfully"
          echo "📊 Team Decision Confidence: ${{ needs.ai-team-review.outputs.team_confidence }}"
          echo "🤝 Team Consensus: ${{ needs.ai-team-review.outputs.consensus }}"
          
          # Log team coordination metrics for future improvements
          curl -X POST "https://api.github.com/repos/${{ github.repository }}/dispatches" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "event_type": "ai_team_merge_success",
              "client_payload": {
                "pr_number": ${{ github.event.pull_request.number }},
                "confidence": "${{ needs.ai-team-review.outputs.team_confidence }}",
                "consensus": "${{ needs.ai-team-review.outputs.consensus }}"
              }
            }' || echo "Metrics logging failed (non-critical)"

  monitor-stale-prs:
    name: Monitor Stale PRs
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Check Stale PRs
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'asc'
            });
            
            const now = new Date();
            const staleDays = 7;
            
            for (const pr of pulls) {
              const created = new Date(pr.created_at);
              const daysOld = (now - created) / (1000 * 60 * 60 * 24);
              
              if (daysOld > staleDays) {
                // Re-run analysis on stale PRs
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'pr-orchestrator.yml',
                  ref: 'main',
                  inputs: {
                    pr_number: pr.number.toString()
                  }
                });
              }
            }

  handle-ai-team-commands:
    name: Handle AI Team Commands
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/')
    
    steps:
      - name: Parse AI Team Command
        id: parse
        uses: actions/github-script@v6
        with:
          script: |
            const comment = context.payload.comment.body.trim();
            
            if (comment === '/merge') {
              core.setOutput('command', 'merge');
            } else if (comment === '/hold') {
              core.setOutput('command', 'hold');
            } else if (comment === '/review') {
              core.setOutput('command', 'review');
            } else if (comment === '/escalate') {
              core.setOutput('command', 'escalate');
            } else if (comment === '/team-analyze') {
              core.setOutput('command', 'team-analyze');
            }
            
      - name: Execute AI Team Command
        if: steps.parse.outputs.command
        uses: actions/github-script@v6
        with:
          script: |
            const command = '${{ steps.parse.outputs.command }}';
            const pr_number = context.issue.number;
            
            switch(command) {
              case 'merge':
                // Force merge with admin override
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr_number,
                  merge_method: 'merge'
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr_number,
                  body: '🤖 **Manual Override:** PR merged by admin command, bypassing AI Development Team decision.'
                });
                break;
                
              case 'hold':
                // Add hold label and disable auto-merge
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr_number,
                  labels: ['do-not-merge']
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr_number,
                  body: '⏸️ **Hold Applied:** Auto-merge disabled. AI Development Team decisions suspended until hold is removed.'
                });
                break;
                
              case 'escalate':
                // Add escalation label and notify team
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr_number,
                  labels: ['needs-human-review', 'escalated']
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr_number,
                  body: '🚨 **Escalated for Human Review:** This PR has been flagged for manual review by senior developers. AI Team decisions suspended.'
                });
                break;
                
              case 'review':
              case 'team-analyze':
                // Trigger AI Development Team re-analysis
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'pr-orchestrator.yml',
                  ref: 'main',
                  inputs: {
                    pr_number: pr_number.toString()
                  }
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr_number,
                  body: '🔄 **AI Team Re-Analysis Requested:** The AI Development Team will perform a fresh comprehensive review of this PR.'
                });
                break;
            }
            
            // Acknowledge command
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });