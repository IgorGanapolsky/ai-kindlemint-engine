name: PDF Quality Check

on:
  pull_request:
    paths:
      - 'books/**'
      - 'scripts/**/*.py'
      - 'src/kindlemint/generators/**'
  workflow_dispatch:
    inputs:
      pdf_path:
        description: 'Path to PDF to validate'
        required: false
        type: string

jobs:
  pdf-quality-validation:
    name: Validate PDF Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          sudo apt-get update
          sudo apt-get install -y poppler-utils  # For pdftotext, pdfinfo
          
      - name: Find PDFs to validate
        id: find-pdfs
        run: |
          if [ -n "${{ inputs.pdf_path }}" ]; then
            echo "pdfs=${{ inputs.pdf_path }}" >> $GITHUB_OUTPUT
          else
            # Find recently modified PDFs
            pdfs=$(find books -name "*.pdf" -mtime -1 | head -5)
            echo "pdfs<<EOF" >> $GITHUB_OUTPUT
            echo "$pdfs" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
      - name: Run QA validation on PDFs
        if: steps.find-pdfs.outputs.pdfs != ''
        run: |
          echo "üîç Validating PDF quality..."
          failed=0
          
          while IFS= read -r pdf; do
            if [ -n "$pdf" ]; then
              echo "Checking: $pdf"
              python scripts/qa_validation_pipeline.py "$pdf" || failed=$((failed + 1))
            fi
          done <<< "${{ steps.find-pdfs.outputs.pdfs }}"
          
          if [ $failed -gt 0 ]; then
            echo "‚ùå $failed PDFs failed quality validation"
            exit 1
          else
            echo "‚úÖ All PDFs passed quality validation"
          fi
          
      - name: Check for repetitive content
        if: steps.find-pdfs.outputs.pdfs != ''
        run: |
          echo "üîç Checking for repetitive content..."
          failed=0
          
          while IFS= read -r pdf; do
            if [ -n "$pdf" ]; then
              # Extract text and check for repetition
              pdftotext "$pdf" - | python -c "
import sys
text = sys.stdin.read()

# Check instruction repetition
instructions = text.count('INSTRUCTIONS: Fill in the empty squares so that')
total_puzzles = text.count('Puzzle ')

if total_puzzles > 0 and instructions / total_puzzles > 0.7:
    print(f'‚ùå High instruction repetition: {instructions}/{total_puzzles} puzzles')
    sys.exit(1)
else:
    print(f'‚úÖ Good instruction variety: {instructions}/{total_puzzles} repetitions')
"
              if [ $? -ne 0 ]; then
                failed=$((failed + 1))
              fi
            fi
          done <<< "${{ steps.find-pdfs.outputs.pdfs }}"
          
          if [ $failed -gt 0 ]; then
            echo "‚ùå $failed PDFs have repetitive content"
            exit 1
          fi
          
      - name: Upload QA reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: qa-reports
          path: |
            **/qa/*.json
            **/qa_orchestration/*.json
          retention-days: 30