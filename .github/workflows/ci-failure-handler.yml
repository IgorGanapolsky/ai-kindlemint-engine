name: CI Failure Handler

on:
  workflow_run:
    workflows: ["Unified CI", "Social Media Automation"]
    types: [completed]
    branches: [main, 'feature/**']

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  handle-failures:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install fix tools
      run: |
        pip install black isort autopep8 autoflake
    
    - name: Analyze failure type
      id: analyze
      run: |
        echo "🔍 Analyzing workflow failure..."
        
        # Get workflow run details
        RUN_ID="${{ github.event.workflow_run.id }}"
        LOGS=$(gh run view $RUN_ID --log-failed 2>/dev/null || echo "")
        
        # Detect failure type
        if echo "$LOGS" | grep -q "ModuleNotFoundError\|ImportError"; then
          echo "failure_type=import" >> $GITHUB_OUTPUT
        elif echo "$LOGS" | grep -q "SyntaxError\|IndentationError"; then
          echo "failure_type=syntax" >> $GITHUB_OUTPUT
        elif echo "$LOGS" | grep -q "black\|flake8\|formatting"; then
          echo "failure_type=formatting" >> $GITHUB_OUTPUT
        else
          echo "failure_type=other" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Auto-fix imports
      if: steps.analyze.outputs.failure_type == 'import'
      run: |
        echo "🔧 Fixing import issues..."
        
        # Fix import ordering
        isort . --profile black
        
        # Remove unused imports
        autoflake --in-place --remove-all-unused-imports --recursive .
        
        # Add missing __init__.py files
        find . -type d -name "scripts" -o -name "tests" | while read dir; do
          [ ! -f "$dir/__init__.py" ] && touch "$dir/__init__.py"
        done
    
    - name: Auto-fix syntax
      if: steps.analyze.outputs.failure_type == 'syntax'
      run: |
        echo "🔧 Fixing syntax issues..."
        
        # Use autopep8 for basic fixes
        autopep8 --in-place --recursive --aggressive --aggressive .
        
        # Format with black (may fix some syntax issues)
        black . --quiet || true
    
    - name: Auto-fix formatting
      if: steps.analyze.outputs.failure_type == 'formatting'
      run: |
        echo "🔧 Fixing formatting issues..."
        
        # Apply black formatting
        black .
        
        # Fix import ordering
        isort . --profile black
    
    - name: Create fix PR
      if: steps.analyze.outputs.failure_type != 'other'
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          BRANCH="fix/auto-ci-${{ steps.analyze.outputs.failure_type }}-$(date +%s)"
          git checkout -b $BRANCH
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add -A
          git commit -m "fix: Auto-fix ${{ steps.analyze.outputs.failure_type }} errors from CI failure
          
          - Workflow: ${{ github.event.workflow_run.name }}
          - Run ID: ${{ github.event.workflow_run.id }}
          - Failure type: ${{ steps.analyze.outputs.failure_type }}
          
          🤖 Generated by CI Failure Handler"
          
          git push -u origin $BRANCH
          
          gh pr create \
            --title "🔧 Auto-fix: ${{ steps.analyze.outputs.failure_type }} errors" \
            --body "## 🤖 Automated CI Fix
            
            This PR automatically fixes CI failures detected in workflow run #${{ github.event.workflow_run.id }}
            
            **Failure Type:** ${{ steps.analyze.outputs.failure_type }}
            **Workflow:** ${{ github.event.workflow_run.name }}
            
            ### Fixes Applied:
            $(if [ "${{ steps.analyze.outputs.failure_type }}" = "import" ]; then
              echo "- ✅ Fixed import ordering with isort"
              echo "- ✅ Removed unused imports"
              echo "- ✅ Added missing __init__.py files"
            elif [ "${{ steps.analyze.outputs.failure_type }}" = "syntax" ]; then
              echo "- ✅ Fixed syntax errors with autopep8"
              echo "- ✅ Applied black formatting"
            elif [ "${{ steps.analyze.outputs.failure_type }}" = "formatting" ]; then
              echo "- ✅ Applied black code formatting"
              echo "- ✅ Fixed import ordering"
            fi)
            
            Please review and merge if CI passes.
            
            ---
            🤖 Auto-generated by CI Failure Handler" \
            --label "automated" \
            --label "ci-fix" \
            --label "high-trust"
        else
          echo "No changes needed - failure may require manual intervention"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}