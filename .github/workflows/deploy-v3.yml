name: Deploy V3 Zero-Touch Publishing Engine

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
  push:
    branches:
      - main
    paths:
      - 'kindlemint/**'
      - 'lambda/**'
      - 'docker/**'
      - 'infrastructure/**'
      - '.github/workflows/deploy-v3.yml'

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: kindlemint-v3

jobs:
  deploy-v3-engine:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 requests
        
    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names "${PROJECT_NAME}-kdp-publisher" --region $AWS_REGION || \
        aws ecr create-repository \
          --repository-name "${PROJECT_NAME}-kdp-publisher" \
          --image-scanning-configuration scanOnPush=true \
          --region $AWS_REGION
          
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Get AWS Account ID
      id: aws-account
      run: |
        echo "account-id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-kdp-publisher
        IMAGE_TAG: latest
      run: |
        docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      id: build-image
      
    - name: Deploy CloudFormation infrastructure
      run: |
        aws cloudformation deploy \
          --template-file infrastructure/fargate-deployment.yaml \
          --stack-name "$PROJECT_NAME-infrastructure" \
          --parameter-overrides \
            ProjectName="$PROJECT_NAME" \
            ECRRepository="${{ steps.build-image.outputs.image }}" \
            KDPEmail="${{ secrets.KDP_EMAIL || 'test@example.com' }}" \
            KDPPassword="${{ secrets.KDP_PASSWORD || 'test-password' }}" \
            OpenAIAPIKey="${{ secrets.OPENAI_API_KEY || 'test-key' }}" \
            SlackWebhookURL="${{ secrets.SLACK_WEBHOOK_URL || 'https://hooks.slack.com/test' }}" \
          --capabilities CAPABILITY_IAM \
          --region $AWS_REGION
          
    - name: Get deployment outputs
      id: outputs
      run: |
        FARGATE_INVOKER_ARN=$(aws cloudformation describe-stacks \
          --stack-name "$PROJECT_NAME-infrastructure" \
          --query 'Stacks[0].Outputs[?OutputKey==`FargateInvokerFunctionArn`].OutputValue' \
          --output text \
          --region $AWS_REGION)
        V3_ORCHESTRATOR_ROLE_ARN=$(aws cloudformation describe-stacks \
          --stack-name "$PROJECT_NAME-infrastructure" \
          --query 'Stacks[0].Outputs[?OutputKey==`V3OrchestratorRoleArn`].OutputValue' \
          --output text \
          --region $AWS_REGION)
        echo "fargate-invoker-arn=$FARGATE_INVOKER_ARN" >> $GITHUB_OUTPUT
        echo "v3-orchestrator-role-arn=$V3_ORCHESTRATOR_ROLE_ARN" >> $GITHUB_OUTPUT
        
    - name: Deploy V3 orchestrator Lambda
      run: |
        # Create Lambda deployment package
        mkdir -p lambda-package
        cp lambda/v3_orchestrator.py lambda-package/lambda_function.py
        cp -r kindlemint lambda-package/
        cd lambda-package
        
        # Install dependencies
        pip install -t . boto3 openai requests python-docx pillow
        
        # Create zip package
        zip -r ../v3-orchestrator.zip .
        cd ..
        
        # Deploy Lambda function
        aws lambda create-function \
          --function-name "$PROJECT_NAME-orchestrator" \
          --runtime python3.11 \
          --role "${{ steps.outputs.outputs.v3-orchestrator-role-arn }}" \
          --handler lambda_function.lambda_handler \
          --zip-file fileb://v3-orchestrator.zip \
          --timeout 900 \
          --memory-size 1024 \
          --environment Variables="{
            FARGATE_INVOKER_ARN=${{ steps.outputs.outputs.fargate-invoker-arn }},
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY || 'test-key' }},
            ASSETS_BUCKET=kindlemint-books
          }" \
          --region $AWS_REGION || \
        aws lambda update-function-code \
          --function-name "$PROJECT_NAME-orchestrator" \
          --zip-file fileb://v3-orchestrator.zip \
          --region $AWS_REGION
          
    - name: Test deployment
      run: |
        echo "ðŸ§ª Testing V3 deployment..."
        aws lambda invoke \
          --function-name "$PROJECT_NAME-orchestrator" \
          --payload '{"topic": "GitHub Actions Test Book", "source": "github_actions"}' \
          --cli-binary-format raw-in-base64-out \
          test-response.json \
          --region $AWS_REGION
        
        echo "ðŸ“‹ Test Response:"
        cat test-response.json
        
    - name: Send success notification
      if: success()
      run: |
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H 'Content-type: application/json' \
          --data '{
            "text": "ðŸš€ V3 Zero-Touch Publishing Engine Deployed Successfully!",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "Deployment Status",
                    "value": "âœ… Complete",
                    "short": true
                  },
                  {
                    "title": "Environment", 
                    "value": "Production",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "'${{ github.sha }}'",
                    "short": true
                  }
                ]
              }
            ]
          }'
          
    - name: Send intelligent failure notification
      if: failure()
      run: |
        python scripts/automation/send_failure_notification.py \
          --context "V3 Zero-Touch Publishing Engine Deployment" \
          --workflow "deploy-v3" \
          --run-id "${{ github.run_id }}" \
          --business-impact "HIGH - Core publishing automation system offline" \
          --recommended-action "Check CloudFormation stack status and Lambda function deployment logs"