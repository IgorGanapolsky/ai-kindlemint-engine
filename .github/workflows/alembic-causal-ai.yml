name: Alembic Causal AI System

on:
  schedule:
    # Run every 30 minutes for continuous market monitoring
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Execution mode'
        required: true
        type: choice
        options:
          - full
          - events_only
          - causal_analysis_only
          - data_collection_only
        default: 'full'

jobs:
  alembic-orchestration:
    runs-on: ubuntu-latest
    timeout-minutes: 25  # Ensure it completes before next run
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Need full history for causal analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Initialize Worktree Infrastructure
        run: |
          python scripts/orchestration/autonomous_worktree_manager.py --init
      
      - name: Run Event Monitoring
        if: ${{ github.event.inputs.mode == 'full' || github.event.inputs.mode == 'events_only' }}
        run: |
          python -c "
          import asyncio
          from scripts.orchestration.alembic_orchestrator import AlembicOrchestrator
          
          async def run_events():
              orchestrator = AlembicOrchestrator()
              # Run for 10 minutes
              orchestrator.config['event_detection_interval_minutes'] = 2
              await asyncio.wait_for(
                  orchestrator._event_monitoring_loop(),
                  timeout=600
              )
          
          asyncio.run(run_events())
          "
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        continue-on-error: true
      
      - name: Run Causal Analysis
        if: ${{ github.event.inputs.mode == 'full' || github.event.inputs.mode == 'causal_analysis_only' }}
        run: |
          python -c "
          import asyncio
          from scripts.orchestration.alembic_orchestrator import AlembicOrchestrator
          
          async def run_causal():
              orchestrator = AlembicOrchestrator()
              await orchestrator._analyze_campaign_effectiveness()
              await orchestrator._analyze_price_elasticity()
              await orchestrator._analyze_series_impact()
              insights = await orchestrator._generate_causal_insights()
              await orchestrator._save_insights_report(insights)
          
          asyncio.run(run_causal())
          "
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
      - name: Collect Private Data
        if: ${{ github.event.inputs.mode == 'full' || github.event.inputs.mode == 'data_collection_only' }}
        run: |
          python -c "
          import asyncio
          from scripts.orchestration.alembic_orchestrator import AlembicOrchestrator
          
          async def collect_data():
              orchestrator = AlembicOrchestrator()
              await orchestrator._collect_kdp_analytics()
              await orchestrator._collect_website_analytics()
              await orchestrator._process_reader_surveys()
          
          asyncio.run(collect_data())
          "
        continue-on-error: true
      
      - name: Generate Executive Dashboard
        if: always()
        run: |
          python scripts/orchestration/ceo_dashboard.py --alembic-insights
      
      - name: Upload Causal Insights
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: causal-insights-${{ github.run_id }}
          path: reports/causal_insights/
          retention-days: 30
      
      - name: Send Slack Notification
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Alembic Causal AI System encountered an issue'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  human-checkpoints:
    runs-on: ubuntu-latest
    needs: alembic-orchestration
    if: ${{ github.event.inputs.mode == 'full' }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Check for Pending Human Reviews
        id: check_reviews
        run: |
          # Check if there are pending human creativity checkpoints
          python -c "
          from pathlib import Path
          import json
          
          pending_file = Path('data/pending_human_reviews.json')
          if pending_file.exists():
              with open(pending_file) as f:
                  pending = json.load(f)
                  if pending:
                      print('::set-output name=has_pending::true')
                      print(f'Found {len(pending)} pending reviews')
          "
      
      - name: Create Human Review Issue
        if: steps.check_reviews.outputs.has_pending == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸŽ¨ Human Creativity Checkpoint Required',
              body: `The Alembic AI system has identified decisions that require human creativity input.
              
              Please review the pending items at:
              - [Vercel Dashboard](https://ai-kindlemint-engine-8cgfskwhj-igorganapolskys-projects.vercel.app/admin)
              
              Time-sensitive: These decisions have a 4-hour timeout before AI fallback.`,
              labels: ['human-review', 'alembic-ai']
            });
            console.log(`Created issue #${issue.data.number}`)