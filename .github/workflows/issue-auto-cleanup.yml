name: Auto Issue Cleanup

on:
  schedule:
    - cron: '0 * * * *'  # Every hour
  workflow_dispatch:
  issues:
    types: [opened]

jobs:
  cleanup-automation-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install pygithub pyyaml
      
      - name: Run automated cleanup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/automated_issue_cleanup.py
      
      - name: Close duplicate merge reports
        uses: actions/github-script@v7
        with:
          script: |
            // Get all open issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'merge-report',
              per_page: 100
            });
            
            // Group by date
            const reportsByDate = {};
            const mergeReportRegex = /^Aggressive Merge Report - (\d{1,2}\/\d{1,2}\/\d{4})$/;
            
            for (const issue of issues.data) {
              const match = issue.title.match(mergeReportRegex);
              if (match) {
                const date = match[1];
                if (!reportsByDate[date]) {
                  reportsByDate[date] = [];
                }
                reportsByDate[date].push(issue);
              }
            }
            
            // Keep only the newest issue for each date
            for (const [date, dateIssues] of Object.entries(reportsByDate)) {
              if (dateIssues.length > 1) {
                // Sort by created_at descending (newest first)
                dateIssues.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                
                // Close all but the newest
                for (let i = 1; i < dateIssues.length; i++) {
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: dateIssues[i].number,
                    state: 'closed'
                  });
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: dateIssues[i].number,
                    body: 'ðŸ¤– Auto-closed: Duplicate merge report. Keeping only the latest report for this date.'
                  });
                  
                  console.log(`Closed duplicate issue #${dateIssues[i].number}`);
                }
              }
            }
            
            // Close reports older than 7 days
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
            
            for (const issue of issues.data) {
              if (new Date(issue.created_at) < sevenDaysAgo) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: 'ðŸ¤– Auto-closed: Merge report older than 7 days.'
                });
                
                console.log(`Closed old issue #${issue.number}`);
              }
            }