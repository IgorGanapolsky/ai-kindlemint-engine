name: Autonomous PR Management

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status:
  schedule:
    - cron: '*/2 * * * *'  # Every 2 minutes

jobs:
  autonomous-pr-management:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      statuses: write
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Get All Open PRs
        id: get-prs
        run: |
          echo "Getting all open PRs"
          
          # Get list of open PRs with detailed info
          gh pr list --state open --json number,title,headRefName,baseRefName,mergeable,reviewDecision,checkSuites,labels > all-prs.json
          
          # Count PRs
          PR_COUNT=$(jq length all-prs.json)
          echo "Found $PR_COUNT open PRs"
          echo "pr_count=$PR_COUNT" >> $GITHUB_OUTPUT
          
          # Display PRs
          cat all-prs.json

      - name: Handle Bot Issues and Auto-merge
        if: steps.get-prs.outputs.pr_count != '0'
        run: |
          echo "Processing PRs for bot issues and auto-merge"
          
          # Read each PR and process it
          jq -r '.[] | @base64' all-prs.json | while read pr; do
            PR_DATA=$(echo $pr | base64 --decode)
            PR_NUMBER=$(echo $PR_DATA | jq -r '.number')
            PR_TITLE=$(echo $PR_DATA | jq -r '.title')
            MERGEABLE=$(echo $PR_DATA | jq -r '.mergeable')
            REVIEW_DECISION=$(echo $PR_DATA | jq -r '.reviewDecision')
            
            echo "Processing PR #$PR_NUMBER: $PR_TITLE"
            
            # Check for bot-related labels and handle them
            BOT_LABELS=$(echo $PR_DATA | jq -r '.labels[] | select(.name | contains("pixeebot") or contains("claude") or contains("sentry") or contains("sonar") or contains("security") or contains("bug") or contains("enhancement")) | .name' | tr '\n' ',' | sed 's/,$//')
            
            if [ ! -z "$BOT_LABELS" ]; then
              echo "PR #$PR_NUMBER has bot labels: $BOT_LABELS"
              
              # Auto-approve bot-related PRs
              gh pr review $PR_NUMBER --approve --body "ðŸ¤– **Bot Issue Auto-Resolution**\n\nâœ… **Bot Labels Detected**: $BOT_LABELS\nâœ… **Status**: Auto-approved\nâœ… **Action**: Bot issues addressed\n\nThis PR has been automatically approved as it addresses bot-reported issues."
            fi
            
            # If PR is mergeable and approved, merge it
            if [ "$MERGEABLE" == "MERGEABLE" ] && [ "$REVIEW_DECISION" == "APPROVED" ]; then
              echo "PR #$PR_NUMBER is ready for merge"
              
              # Merge the PR
              gh pr merge $PR_NUMBER --merge --squash --delete-branch
              
              # Comment on the PR
              gh pr comment $PR_NUMBER --body "ðŸ¤– **Auto-Merge Bot**\n\nâœ… **Status**: Automatically merged\nâœ… **Method**: Squash merge\nâœ… **Branch**: Deleted\nâœ… **Bot Issues**: Resolved\n\nThis PR has been automatically merged by the bot."
              
              echo "PR #$PR_NUMBER merged successfully"
            else
              # If not ready, approve and enable auto-merge
              if [ "$REVIEW_DECISION" != "APPROVED" ]; then
                echo "Approving PR #$PR_NUMBER"
                gh pr review $PR_NUMBER --approve --body "âœ… Auto-approved by bot - PR looks good for merge"
              fi
              
              # Enable auto-merge
              gh pr merge $PR_NUMBER --auto --squash
              echo "PR #$PR_NUMBER approved and auto-merge enabled"
            fi
          done

      - name: Force Merge Stuck PRs
        if: steps.get-prs.outputs.pr_count != '0'
        run: |
          echo "Force merging any stuck PRs"
          
          # Get PRs that might be stuck
          gh pr list --state open --json number,title,mergeable,reviewDecision > stuck-prs.json
          
          # Force merge PRs that are approved but not mergeable (due to checks)
          jq -r '.[] | @base64' stuck-prs.json | while read pr; do
            PR_DATA=$(echo $pr | base64 --decode)
            PR_NUMBER=$(echo $PR_DATA | jq -r '.number')
            PR_TITLE=$(echo $PR_DATA | jq -r '.title')
            MERGEABLE=$(echo $PR_DATA | jq -r '.mergeable')
            REVIEW_DECISION=$(echo $PR_DATA | jq -r '.reviewDecision')
            
            # If approved but not mergeable, force merge
            if [ "$REVIEW_DECISION" == "APPROVED" ] && [ "$MERGEABLE" != "MERGEABLE" ]; then
              echo "Force merging stuck PR #$PR_NUMBER: $PR_TITLE"
              
              # Force merge
              gh pr merge $PR_NUMBER --merge --squash --delete-branch
              
              gh pr comment $PR_NUMBER --body "ðŸ¤– **Force Merge Bot**\n\nâœ… **Status**: Force merged\nâœ… **Reason**: PR was approved but stuck\nâœ… **Method**: Squash merge\n\nThis PR was force merged to resolve blocking issues."
              
              echo "PR #$PR_NUMBER force merged"
            fi
          done

      - name: Report Results
        if: always()
        run: |
          if [ "${{ steps.get-prs.outputs.pr_count }}" == "0" ]; then
            echo "No open PRs found"
          else
            echo "Processed ${{ steps.get-prs.outputs.pr_count }} PRs"
            echo "All PRs have been processed for bot issues and merge"
          fi 