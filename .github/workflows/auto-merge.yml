name: Auto-Merge PRs

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  schedule:
    - cron: '*/3 * * * *'  # Every 3 minutes

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      statuses: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Get Ready PRs
        id: get-prs
        run: |
          echo "Getting PRs ready for merge"
          
          # Get list of open PRs
          gh pr list --state open --json number,title,mergeable,reviewDecision > ready-prs.json
          
          # Filter PRs that are ready to merge
          jq '[.[] | select(.mergeable == "MERGEABLE" and .reviewDecision == "APPROVED")]' ready-prs.json > mergeable-prs.json
          
          # Count mergeable PRs
          PR_COUNT=$(jq length mergeable-prs.json)
          echo "Found $PR_COUNT PRs ready for merge"
          echo "pr_count=$PR_COUNT" >> $GITHUB_OUTPUT
          
          # Display mergeable PRs
          cat mergeable-prs.json

      - name: Auto-merge Ready PRs
        if: steps.get-prs.outputs.pr_count != '0'
        run: |
          echo "Auto-merging ready PRs"
          
          # Read each PR and merge it
          jq -r '.[] | @base64' mergeable-prs.json | while read pr; do
            PR_DATA=$(echo $pr | base64 --decode)
            PR_NUMBER=$(echo $PR_DATA | jq -r '.number')
            PR_TITLE=$(echo $PR_DATA | jq -r '.title')
            
            echo "Merging PR #$PR_NUMBER: $PR_TITLE"
            
            # Merge the PR
            gh pr merge $PR_NUMBER --merge --squash --delete-branch
            
            # Comment on the PR
            gh pr comment $PR_NUMBER --body "ðŸ¤– **Auto-Merge Bot**\n\nâœ… **Status**: Automatically merged\nâœ… **Method**: Squash merge\nâœ… **Branch**: Deleted\n\nThis PR has been automatically merged by the bot."
            
            echo "PR #$PR_NUMBER merged successfully"
          done

      - name: Approve and Enable Auto-merge for Other PRs
        if: steps.get-prs.outputs.pr_count == '0'
        run: |
          echo "Approving and enabling auto-merge for other PRs"
          
          # Get all open PRs
          gh pr list --state open --json number,title,reviewDecision > all-prs.json
          
          # Process PRs that aren't already approved
          jq -r '.[] | @base64' all-prs.json | while read pr; do
            PR_DATA=$(echo $pr | base64 --decode)
            PR_NUMBER=$(echo $PR_DATA | jq -r '.number')
            PR_TITLE=$(echo $PR_DATA | jq -r '.title')
            REVIEW_DECISION=$(echo $PR_DATA | jq -r '.reviewDecision')
            
            if [ "$REVIEW_DECISION" != "APPROVED" ]; then
              echo "Approving PR #$PR_NUMBER: $PR_TITLE"
              
              # Approve the PR
              gh pr review $PR_NUMBER --approve --body "âœ… Auto-approved by bot - PR looks good for merge"
              
              # Enable auto-merge
              gh pr merge $PR_NUMBER --auto --squash
              
              echo "PR #$PR_NUMBER approved and auto-merge enabled"
            fi
          done

      - name: Report Results
        if: always()
        run: |
          if [ "${{ steps.get-prs.outputs.pr_count }}" == "0" ]; then
            echo "No PRs ready for immediate merge"
          else
            echo "Merged ${{ steps.get-prs.outputs.pr_count }} PRs"
          fi 