name: Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'tests/**'
      - 'requirements*.txt'
      - '.github/workflows/tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'tests/**'
      - 'requirements*.txt'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    name: Test Python ${{ matrix.python-version }}
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements-pinned.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-pinned.txt
    
    - name: 🧪 Run unit tests
      run: |
        python run_tests.py --unit
    
    - name: 🔗 Run integration tests
      run: |
        python run_tests.py --integration
    
    - name: 📊 Generate test report
      if: always()
      run: |
        python -m pytest tests/ --junit-xml=test-results.xml --cov=scripts --cov-report=xml
      continue-on-error: true
    
    - name: 📤 Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          coverage.xml
    
    - name: 💬 Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🧪 Test Results\n\n';
          comment += `Python ${{ matrix.python-version }}: `;
          comment += '${{ job.status }}' === 'success' ? '✅ Passed' : '❌ Failed';
          comment += '\n\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });