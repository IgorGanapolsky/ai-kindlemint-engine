name: Debug Market Research

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'scripts/market_research*.py'
      - '.github/workflows/debug_market_research.yml'

jobs:
  debug:
    runs-on: ubuntu-latest
    
    steps:
    - name: üîÑ Checkout
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install full requirements if available
        if [ -f requirements.txt ]; then 
          pip install -r requirements.txt || echo "Failed to install some requirements"
        else
          # Fallback to minimal dependencies
          pip install requests pandas python-dotenv PyMuPDF PyPDF2 Pillow reportlab
        fi
        
    - name: üîç Check if script exists
      run: |
        echo "Checking for market research script..."
        ls -la scripts/
        if [ -f "scripts/market_research_csv_output.py" ]; then
          echo "‚úÖ Script found!"
        else
          echo "‚ùå Script not found!"
          exit 1
        fi
        
    - name: üß™ Test script import
      run: |
        export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
        python << 'EOF'
        import sys
        import traceback
        # Ensure project root is in Python path
        import os
        sys.path.insert(0, os.environ.get('GITHUB_WORKSPACE', '.'))
        sys.path.append('scripts')
        try:
            import market_research_csv_output
            print('‚úÖ Script imported successfully')
        except Exception as e:
            print(f'‚ùå Import failed: {e}')
            traceback.print_exc()
            # Don't fail the workflow, just report the error
            print('Continuing with workflow...')
        EOF
        
    - name: üìä Run minimal test
      run: |
        export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
        mkdir -p research/test
        if [ -f "scripts/market_research_csv_output.py" ]; then
          python scripts/market_research_csv_output.py 2>&1 || {
            echo "Script failed with exit code: $?"
            echo "Continuing for debugging..."
          }
        else
          echo "‚ö†Ô∏è market_research_csv_output.py not found, skipping test"
        fi
        
    - name: üìÅ Check output
      id: output_check
      run: |
        echo "Checking research directory..."
        ls -la research/ || echo "No research directory"
        
        # Count CSV files
        csv_count=$(find research -type f -name "*.csv" 2>/dev/null | wc -l || echo "0")
        echo "csv_count=$csv_count" >> $GITHUB_OUTPUT
        
        # Get file list with details
        csv_files=$(find research -type f -name "*.csv" 2>/dev/null || echo "")
        echo "csv_files<<EOF" >> $GITHUB_OUTPUT
        echo "$csv_files" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Get all generated files with sizes
        all_files=$(find research -type f 2>/dev/null | while read f; do
          size=$(ls -lh "$f" | awk '{print $5}')
          echo "‚Ä¢ $(basename "$f") ($size)"
        done || echo "No files found")
        echo "all_files<<EOF" >> $GITHUB_OUTPUT
        echo "$all_files" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: üì§ Upload Research Artifacts
      if: success() && steps.output_check.outputs.csv_count != '0'
      uses: actions/upload-artifact@v4
      with:
        name: market-research-${{ github.run_number }}
        path: research/
        retention-days: 7
        
    - name: üí¨ Send Slack Notification
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [ -z "$SLACK_WEBHOOK_URL" ]; then
          echo "No Slack webhook configured"
          exit 0
        fi
        
        # Determine status
        if [ "${{ job.status }}" == "success" ]; then
          COLOR="good"
          EMOJI="‚úÖ"
          STATUS="Success"
        else
          COLOR="danger"
          EMOJI="‚ùå"
          STATUS="Failed"
        fi
        
        # Build detailed message
        CSV_COUNT="${{ steps.output_check.outputs.csv_count }}"
        ALL_FILES="${{ steps.output_check.outputs.all_files }}"
        
        # Create files section if files were generated
        FILES_SECTION=""
        if [ "$CSV_COUNT" -gt 0 ]; then
          FILES_SECTION=$(cat <<SECTION
              ,{
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*üìÑ Generated Files:*\n$ALL_FILES"
                }
              }
SECTION
          )
        fi
        
        PAYLOAD=$(cat <<EOF
        {
          "attachments": [{
            "color": "$COLOR",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "$EMOJI Debug Market Research - $STATUS"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Workflow:* Debug Market Research"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Status:* $STATUS"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*CSV Files Generated:* $CSV_COUNT"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Triggered By:* ${{ github.actor }}"
                  }
                ]
              }$FILES_SECTION,
              {
                "type": "context",
                "elements": [{
                  "type": "mrkdwn",
                  "text": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View in GitHub> | <https://github.com/${{ github.repository }}/suites/${{ github.run_id }}/artifacts|Download Artifacts>"
                }]
              }
            ]
          }]
        }
        EOF
        )
        
        curl -X POST -H 'Content-type: application/json' \
          --data "$PAYLOAD" \
          "$SLACK_WEBHOOK_URL"