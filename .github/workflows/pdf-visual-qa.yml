name: PDF Visual QA Validation

on:
  push:
    paths:
      - '**.pdf'
      - 'src/kindlemint/generators/**.py'
      - 'scripts/**sudoku**.py'
      - 'scripts/**pdf**.py'
  pull_request:
    paths:
      - '**.pdf'
      - 'src/kindlemint/generators/**.py'
  workflow_dispatch:
    inputs:
      pdf_path:
        description: 'Path to PDF to validate'
        required: false
        type: string

jobs:
  visual-qa:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          poppler-utils \
          tesseract-ocr \
          tesseract-ocr-eng \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1
          
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-visual-qa.txt
        
    - name: Find PDF files
      id: find-pdfs
      run: |
        if [ -n "${{ github.event.inputs.pdf_path }}" ]; then
          echo "pdfs=${{ github.event.inputs.pdf_path }}" >> $GITHUB_OUTPUT
        else
          # Find all PDF files in common locations
          pdfs=$(find . -name "*.pdf" -path "*/books/*" -o -name "*Sudoku*.pdf" -o -name "*Crossword*.pdf" | head -10)
          echo "pdfs<<EOF" >> $GITHUB_OUTPUT
          echo "$pdfs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
    - name: Run Visual QA Validation
      if: steps.find-pdfs.outputs.pdfs != ''
      run: |
        echo "üîç Running Visual QA on PDFs..."
        
        # Process each PDF
        while IFS= read -r pdf; do
          if [ -f "$pdf" ]; then
            echo ""
            echo "üìÑ Validating: $pdf"
            echo "================================"
            
            python -m src.kindlemint.validators.integrated_pdf_validator "$pdf" || true
            
            # Check if visual report was generated
            report_name="${pdf%.pdf}_visual_qa_report.json"
            if [ -f "$report_name" ]; then
              echo "üìä Visual QA Report Summary:"
              python -c "
import json
with open('$report_name', 'r') as f:
    report = json.load(f)
    print(f\"  Status: {report.get('status', 'Unknown')}\")
    print(f\"  Pages: {report.get('total_pages', 0)}\")
    print(f\"  Text Overlaps: {len(report.get('text_overlaps', []))}\")
    print(f\"  Margin Issues: {len(report.get('margin_violations', []))}\")
    print(f\"  Layout Issues: {len(report.get('layout_violations', []))}\")
              "
            fi
          fi
        done <<< "${{ steps.find-pdfs.outputs.pdfs }}"
        
    - name: Upload Visual QA Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: visual-qa-reports
        path: |
          *_visual_qa_report.json
          *_complete_validation_report.json
          visual_qa_page_*_annotated.png
          diff_page_*.png
        retention-days: 30
        
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const glob = require('glob');
          
          // Find all validation reports
          const reports = glob.sync('*_visual_qa_report.json');
          
          if (reports.length === 0) {
            return;
          }
          
          let comment = '## üîç PDF Visual QA Results\n\n';
          let hasIssues = false;
          
          for (const reportPath of reports) {
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            const pdfName = reportPath.replace('_visual_qa_report.json', '');
            
            comment += `### üìÑ ${pdfName}\n`;
            comment += `**Status**: ${report.status}\n\n`;
            
            if (report.text_overlaps?.length > 0) {
              hasIssues = true;
              comment += `‚ùå **Text Overlaps**: ${report.text_overlaps.length} found\n`;
              report.text_overlaps.slice(0, 3).forEach(overlap => {
                comment += `  - Page ${overlap.page}: "${overlap.text1}" overlaps "${overlap.text2}"\n`;
              });
              comment += '\n';
            }
            
            if (report.margin_violations?.length > 0) {
              hasIssues = true;
              comment += `‚ùå **Margin Violations**: ${report.margin_violations.length} found\n`;
              report.margin_violations.slice(0, 3).forEach(violation => {
                comment += `  - Page ${violation.page}: ${violation.type} (${violation.actual} instead of ${violation.expected})\n`;
              });
              comment += '\n';
            }
            
            if (report.recommendations?.length > 0) {
              comment += '**Recommendations**:\n';
              report.recommendations.slice(0, 3).forEach(rec => {
                comment += `- ${rec}\n`;
              });
            }
            
            comment += '\n---\n\n';
          }
          
          if (hasIssues) {
            comment += '‚ö†Ô∏è **Action Required**: Please fix the visual issues before merging.\n';
          } else {
            comment += '‚úÖ **All PDFs passed visual QA!**\n';
          }
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: Fail if Critical Issues
      run: |
        # Check all reports for critical issues
        critical_issues=0
        
        for report in *_visual_qa_report.json; do
          if [ -f "$report" ]; then
            status=$(python -c "import json; print(json.load(open('$report'))['status'])")
            overlaps=$(python -c "import json; print(len(json.load(open('$report')).get('text_overlaps', [])))")
            
            if [ "$status" = "FAIL" ] || [ "$overlaps" -gt 0 ]; then
              critical_issues=$((critical_issues + 1))
            fi
          fi
        done
        
        if [ $critical_issues -gt 0 ]; then
          echo "‚ùå Found $critical_issues PDFs with critical visual issues!"
          exit 1
        else
          echo "‚úÖ All PDFs passed visual QA"
        fi