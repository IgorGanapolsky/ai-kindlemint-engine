name: Security Orchestration

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        type: choice
        options:
          - full
          - secrets_only
          - dependencies_only
          - quick
        default: 'full'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Need full history for comprehensive analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-security-pip-${{ hashFiles('**/requirements.txt') }}
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep
          pip install -r requirements.txt
      
      - name: Run Security Orchestrator
        id: security_scan
        run: |
          echo "🔍 Running comprehensive security scan..."
          python scripts/orchestration/security_orchestrator.py
          
          # Check exit code
          if [ $? -eq 0 ]; then
            echo "scan_result=passed" >> $GITHUB_OUTPUT
          else
            echo "scan_result=failed" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
      
      - name: Run Secret Detection
        if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets_only' }}
        run: |
          echo "🔐 Scanning for hardcoded secrets..."
          
          # Use multiple tools for comprehensive secret detection
          
          # 1. Our custom security orchestrator (already ran above)
          
          # 2. GitLeaks (if available)
          if command -v gitleaks &> /dev/null; then
            gitleaks detect --source . --verbose
          fi
          
          # 3. TruffleHog (if available)  
          if command -v trufflehog &> /dev/null; then
            trufflehog filesystem . --no-update
          fi
        continue-on-error: true
      
      - name: Run Dependency Vulnerability Scan
        if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies_only' }}
        run: |
          echo "📦 Scanning dependencies for vulnerabilities..."
          
          # Check Python dependencies
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --json > safety_report.json || true
            cat safety_report.json
          fi
          
          # Check for outdated packages
          pip list --outdated --format=json > outdated_packages.json || true
        continue-on-error: true
      
      - name: Run Static Code Analysis
        if: ${{ github.event.inputs.scan_type == 'full' }}
        run: |
          echo "🔧 Running static security analysis..."
          
          # Bandit for Python security issues
          bandit -r . -f json -o bandit_report.json || true
          
          # Semgrep for additional security patterns
          if command -v semgrep &> /dev/null; then
            semgrep --config=auto --json --output=semgrep_report.json . || true
          fi
        continue-on-error: true
      
      - name: Check for Sensitive Files
        run: |
          echo "📁 Checking for sensitive files..."
          
          # Check for files that shouldn't be committed
          sensitive_files=(
            ".env"
            "*.pem"
            "*.key" 
            "*.p12"
            "*.pfx"
            "id_rsa"
            "id_dsa"
            "*.sql"
            "*.dump"
          )
          
          found_sensitive=false
          for pattern in "${sensitive_files[@]}"; do
            if find . -name "$pattern" -not -path "./.git/*" -not -path "./venv/*" | grep -q .; then
              echo "⚠️ Found sensitive file pattern: $pattern"
              find . -name "$pattern" -not -path "./.git/*" -not -path "./venv/*"
              found_sensitive=true
            fi
          done
          
          if [ "$found_sensitive" = true ]; then
            echo "::warning::Sensitive files detected in repository"
          fi
      
      - name: Generate Security Report
        if: always()
        run: |
          echo "📊 Generating comprehensive security report..."
          
          # Combine all reports
          python -c "
          import json
          import os
          from datetime import datetime
          
          report = {
              'timestamp': datetime.now().isoformat(),
              'workflow_run_id': '${{ github.run_id }}',
              'commit_sha': '${{ github.sha }}',
              'scan_type': '${{ github.event.inputs.scan_type || 'full' }}',
              'reports': {}
          }
          
          # Load individual reports if they exist
          reports_to_check = [
              ('safety', 'safety_report.json'),
              ('bandit', 'bandit_report.json'), 
              ('semgrep', 'semgrep_report.json'),
              ('outdated', 'outdated_packages.json')
          ]
          
          for name, filename in reports_to_check:
              if os.path.exists(filename):
                  try:
                      with open(filename) as f:
                          report['reports'][name] = json.load(f)
                  except:
                      pass
          
          # Save combined report
          os.makedirs('reports/security', exist_ok=True)
          with open('reports/security/github_actions_security_report.json', 'w') as f:
              json.dump(report, f, indent=2)
          
          print('Security report generated')
          "
      
      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            reports/security/
            safety_report.json
            bandit_report.json
            semgrep_report.json
            outdated_packages.json
          retention-days: 30
      
      - name: Security Check Summary
        if: always()
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.security_scan.outputs.scan_result }}" = "failed" ]; then
            echo "❌ **CRITICAL SECURITY ISSUES FOUND**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ This PR/commit contains critical security issues that must be addressed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the security report artifacts" >> $GITHUB_STEP_SUMMARY
            echo "2. Fix all critical and high severity issues" >> $GITHUB_STEP_SUMMARY
            echo "3. Re-run the security scan" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Security scan passed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No critical security issues detected." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Scan Type: ${{ github.event.inputs.scan_type || 'full' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Fail on Critical Issues
        if: steps.security_scan.outputs.scan_result == 'failed'
        run: |
          echo "💥 Failing workflow due to critical security issues"
          exit 1
      
      - name: Create Security Issue (if critical)
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Critical Security Issues Detected',
              body: `Critical security issues were detected in commit ${{ github.sha }}.
              
              **Scan Results:** Failed
              **Workflow:** ${{ github.run_id }}
              **Reports:** Available in workflow artifacts
              
              **Immediate Actions Required:**
              1. Review security report artifacts
              2. Address all critical issues  
              3. Verify fixes with security scan
              
              See [Security Documentation](docs/SECURITY_FIX.md) for guidance.`,
              labels: ['security', 'critical', 'bug']
            });
            console.log(`Created security issue #${issue.data.number}`);

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: security-scan
    if: failure() && github.event_name == 'push'
    
    steps:
      - name: Send Slack Notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 SECURITY ALERT: Critical issues detected in ${{ github.repository }}
            
            Commit: ${{ github.sha }}
            Workflow: ${{ github.run_id }}
            
            Immediate review required!
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}