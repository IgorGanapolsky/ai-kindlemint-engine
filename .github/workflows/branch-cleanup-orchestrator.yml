name: üßπ Branch Cleanup Orchestrator

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (analyze only, no deletions)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write
  pull-requests: read

jobs:
  cleanup-branches:
    name: üóëÔ∏è Clean Stale Branches
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Configure Git
      run: |
        git config --global user.name "Branch Cleanup Bot"
        git config --global user.email "bot@kindlemint.ai"
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Analyze Branches
      id: analyze
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üîç Analyzing branch health..."
        python scripts/branch_cleanup.py > branch_analysis.txt
        cat branch_analysis.txt
        
        # Extract stale branch count
        STALE_COUNT=$(grep "Stale branches:" branch_analysis.txt | awk '{print $3}')
        echo "stale_count=$STALE_COUNT" >> $GITHUB_OUTPUT
        
    - name: Delete Stale Branches
      if: github.event.inputs.dry_run != 'true' && steps.analyze.outputs.stale_count != '0'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üóëÔ∏è Deleting stale branches..."
        
        # Extract branch deletion commands and execute them
        sed -n '/git push origin --delete/p' branch_analysis.txt | while read -r cmd; do
          branch=$(echo "$cmd" | awk '{print $NF}')
          echo "Deleting branch: $branch"
          
          # Check if branch is not protected
          if [[ "$branch" != "main" && "$branch" != "develop" && "$branch" != "staging" ]]; then
            $cmd || echo "Failed to delete $branch (may already be deleted)"
          else
            echo "Skipping protected branch: $branch"
          fi
        done
        
    - name: Create Cleanup Report
      if: steps.analyze.outputs.stale_count != '0'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Create issue with cleanup report
        REPORT_BODY=$(cat <<EOF
        ## üßπ Branch Cleanup Report
        
        **Date**: $(date)
        **Mode**: ${{ github.event.inputs.dry_run == 'true' && 'Dry Run' || 'Live Cleanup' }}
        
        ### Analysis Results:
        \`\`\`
        $(cat branch_analysis.txt)
        \`\`\`
        
        ### Actions Taken:
        ${{ github.event.inputs.dry_run == 'true' && '- No branches were deleted (dry run mode)' || '- Stale branches have been deleted' }}
        
        ### Recommendations:
        - Developers should delete their local branches after PRs are merged
        - Use \`git remote prune origin\` to clean up local references
        - Consider enabling branch protection rules to auto-delete head branches
        
        ---
        *This report was generated by the Branch Cleanup Orchestrator*
        EOF
        )
        
        gh issue create \
          --title "üßπ Branch Cleanup Report - $(date +%Y-%m-%d)" \
          --body "$REPORT_BODY" \
          --label "maintenance,automated"
          
    - name: Update Branch Protection
      if: github.event.inputs.dry_run != 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üõ°Ô∏è Ensuring branch protection rules are configured..."
        
        # Enable automatic deletion of head branches for main
        gh api \
          --method PATCH \
          /repos/${{ github.repository }}/branches/main/protection \
          --field delete_branch_on_merge=true \
          2>/dev/null || echo "Branch protection update skipped"

  cleanup-local-refs:
    name: üßπ Cleanup Instructions
    runs-on: ubuntu-latest
    needs: cleanup-branches
    
    steps:
    - name: Post Cleanup Instructions
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üì¢ Branch cleanup complete!"
        echo ""
        echo "To clean up your local repository, run:"
        echo "  git remote prune origin"
        echo "  git branch -d \$(git branch --merged | grep -v main)"
        echo ""
        echo "To see all branches:"
        echo "  git branch -a"