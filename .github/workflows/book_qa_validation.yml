name: Book QA Validation

on:
  push:
    paths:
      - 'books/active_production/**/*.pdf'
      - 'scripts/**/*.py'
  pull_request:
    paths:
      - 'books/active_production/**/*.pdf'
      - 'scripts/**/*.py'
  workflow_dispatch:

jobs:
  quality-assurance:
    runs-on: ubuntu-latest
    name: üìö Book Quality Validation
    
    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        # Core libs (PyMuPDF brings fitz)
        pip install PyMuPDF reportlab PyPDF2 Pillow
        # Extra utils required by validators / workflow
        sudo apt-get update -y && sudo apt-get install -y jq
        # Ensure local repo modules are discoverable (e.g. puzzle_validators)
        echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

    # --------------------------------------------------------------------
    # Dynamically find every book (identified by metadata/collection.json)
    # and run the *new* content-first Enhanced QA Validator v2 on each one.
    # The validator exits non-zero if any critical issues are found, which
    # automatically fails the job ‚Äì no extra ‚Äúfail‚Äù step required.
    # --------------------------------------------------------------------

    - name: üóÇÔ∏è  Find book directories
      id: find-books
      run: |
        echo "book_dirs=$(find books/active_production -type f -name collection.json -print0 | xargs -0 -n1 dirname | tr '\n' ' ')" >> "$GITHUB_OUTPUT"

    - name: üîç Run Enhanced QA Validator v2
      if: steps.find-books.outputs.book_dirs != ''
      run: |
        echo "üîç Running QA on detected books..."
        EXIT_CODE=0
        for dir in ${{ steps.find-books.outputs.book_dirs }}; do
          echo "‚ñ∂Ô∏è  Validating ${dir}"
          python scripts/enhanced_qa_validator_v2.py "${dir}" --output-dir "${dir}"
          CODE=$?
          if [ $CODE -ne 0 ]; then
            echo "‚ùå QA failed for ${dir}"
            EXIT_CODE=$CODE
          fi
        done
        if [ $EXIT_CODE -ne 0 ]; then
          echo "One or more books failed QA."
          exit $EXIT_CODE
        fi

    - name: ‚ÑπÔ∏è  Skip QA (no books found)
      if: steps.find-books.outputs.book_dirs == ''
      run: echo "No books found in books/active_production ‚Äì skipping content QA."

    - name: üì¶ Upload QA Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: qa-reports
        path: books/active_production/**/ENHANCED_QA_REPORT_*.json
    
    - name: üí¨ Send Enhanced Slack Notification
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [ -z "$SLACK_WEBHOOK_URL" ]; then
          echo "No Slack webhook configured"
          exit 0
        fi
        
        # Parse QA results with detailed information
        TOTAL_BOOKS=0
        PASSED_BOOKS=0
        FAILED_BOOKS=0
        BOOK_DETAILS=""
        
        for report in $(find books/active_production -name "ENHANCED_QA_REPORT_*.json" 2>/dev/null); do
          TOTAL_BOOKS=$((TOTAL_BOOKS + 1))
          STATUS=$(jq -r '.overall_status' "$report" 2>/dev/null || echo "UNKNOWN")
          
          # Extract full book path
          BOOK_PATH=$(echo "$report" | sed 's|books/active_production/||' | sed 's|/ENHANCED_QA_REPORT.*||')
          
          if [ "$STATUS" == "PASS" ]; then
            PASSED_BOOKS=$((PASSED_BOOKS + 1))
            SCORE=$(jq -r '.summary.total_score // 100' "$report" 2>/dev/null)
            BOOK_DETAILS="${BOOK_DETAILS}‚Ä¢ ‚úÖ *${BOOK_PATH}*: PASSED (Score: ${SCORE})\n"
          else
            FAILED_BOOKS=$((FAILED_BOOKS + 1))
            ISSUES=$(jq -r '.summary.critical_issues_count // 0' "$report" 2>/dev/null)
            SCORE=$(jq -r '.summary.total_score // 0' "$report" 2>/dev/null)
            
            # Get first 2 critical issues
            CRITICAL_LIST=$(jq -r '.critical_issues[0:2][] | "    ‚Üí " + .description' "$report" 2>/dev/null || echo "")
            
            BOOK_DETAILS="${BOOK_DETAILS}‚Ä¢ ‚ùå *${BOOK_PATH}*: FAILED (Score: ${SCORE}, ${ISSUES} issues)\n"
            if [ -n "$CRITICAL_LIST" ]; then
              BOOK_DETAILS="${BOOK_DETAILS}${CRITICAL_LIST}\n"
            fi
          fi
        done
        
        # Determine overall status
        if [ "$FAILED_BOOKS" -eq 0 ] && [ "$TOTAL_BOOKS" -gt 0 ]; then
          COLOR="good"
          EMOJI="‚úÖ"
          STATUS="All books passed QA"
        elif [ "$TOTAL_BOOKS" -eq 0 ]; then
          COLOR="warning"
          EMOJI="‚ö†Ô∏è"
          STATUS="No books found to validate"
        else
          COLOR="danger"
          EMOJI="‚ùå"
          STATUS="$FAILED_BOOKS books failed QA"
        fi
        
        # Build enhanced message
        PAYLOAD=$(cat <<EOF
        {
          "attachments": [{
            "color": "$COLOR",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "$EMOJI Book QA Validation Results"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Summary:* ${STATUS}\n*Total Books:* ${TOTAL_BOOKS} | *Passed:* ${PASSED_BOOKS} | *Failed:* ${FAILED_BOOKS}"
                }
              }
        EOF
        )
        
        # Add book details if any
        if [ -n "$BOOK_DETAILS" ] && [ "$TOTAL_BOOKS" -gt 0 ]; then
          PAYLOAD="${PAYLOAD},
              {
                \"type\": \"divider\"
              },
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*üìö Detailed Results:*\n${BOOK_DETAILS}\"
                }
              }"
        fi
        
        PAYLOAD="${PAYLOAD},
              {
                \"type\": \"context\",
                \"elements\": [{
                  \"type\": \"mrkdwn\",
                  \"text\": \"<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View in GitHub> ‚Ä¢ Triggered by ${{ github.actor }}\"
                }]
              }
            ]
          }]
        }"
        
        echo "$PAYLOAD" | curl -X POST -H 'Content-type: application/json' \
          --data @- \
          "$SLACK_WEBHOOK_URL"