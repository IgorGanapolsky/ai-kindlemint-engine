name: Book QA Validation

on:
  push:
    paths:
      - 'books/active_production/**/*.pdf'
      - 'scripts/**/*.py'
  pull_request:
    paths:
      - 'books/active_production/**/*.pdf'
      - 'scripts/**/*.py'
  workflow_dispatch:

jobs:
  quality-assurance:
    runs-on: ubuntu-latest
    name: üìö Book Quality Validation
    
    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install Dependencies
      run: |
        pip install PyMuPDF reportlab pathlib PyPDF2 Pillow

    # --------------------------------------------------------------------
    # Dynamically find every book (identified by metadata/collection.json)
    # and run the *new* content-first Enhanced QA Validator v2 on each one.
    # The validator exits non-zero if any critical issues are found, which
    # automatically fails the job ‚Äì no extra ‚Äúfail‚Äù step required.
    # --------------------------------------------------------------------

    - name: üóÇÔ∏è  Find book directories
      id: find-books
      run: |
        echo "book_dirs=$(find books/active_production -type f -name collection.json -print0 | xargs -0 -n1 dirname | tr '\n' ' ')" >> "$GITHUB_OUTPUT"

    - name: üîç Run Enhanced QA Validator v2
      if: steps.find-books.outputs.book_dirs != ''
      run: |
        for dir in ${{ steps.find-books.outputs.book_dirs }}; do
          echo "Running Enhanced QA on ${dir} ..."
          python scripts/enhanced_qa_validator_v2.py "${dir}" --output-dir "${dir}"
        done

    - name: üì¶ Upload QA Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: qa-reports
        path: books/active_production/**/ENHANCED_QA_REPORT_*.json