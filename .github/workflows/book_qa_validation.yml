name: Book QA Validation

on:
  push:
    paths:
      - 'books/active_production/**/*.pdf'
      - 'scripts/**/*.py'
  pull_request:
    paths:
      - 'books/active_production/**/*.pdf'
      - 'scripts/**/*.py'
  workflow_dispatch:

jobs:
  quality-assurance:
    runs-on: ubuntu-latest
    name: üìö Book Quality Validation
    
    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install Dependencies
      run: |
        pip install PyMuPDF reportlab pathlib PyPDF2 Pillow

    # --------------------------------------------------------------------
    # Dynamically find every book (identified by metadata/collection.json)
    # and run the *new* content-first Enhanced QA Validator v2 on each one.
    # The validator exits non-zero if any critical issues are found, which
    # automatically fails the job ‚Äì no extra ‚Äúfail‚Äù step required.
    # --------------------------------------------------------------------

    - name: üóÇÔ∏è  Find book directories
      id: find-books
      run: |
        echo "book_dirs=$(find books/active_production -type f -name collection.json -print0 | xargs -0 -n1 dirname | tr '\n' ' ')" >> "$GITHUB_OUTPUT"

    - name: üîç Run Enhanced QA Validator v2
      if: steps.find-books.outputs.book_dirs != ''
      run: |
        for dir in ${{ steps.find-books.outputs.book_dirs }}; do
          echo "Running Enhanced QA on ${dir} ..."
          python scripts/enhanced_qa_validator_v2.py "${dir}" --output-dir "${dir}"
        done

    - name: üì¶ Upload QA Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: qa-reports
        path: books/active_production/**/ENHANCED_QA_REPORT_*.json
    
    - name: üí¨ Send Slack Notification
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [ -z "$SLACK_WEBHOOK_URL" ]; then
          echo "No Slack webhook configured"
          exit 0
        fi
        
        # Parse QA results
        TOTAL_BOOKS=0
        PASSED_BOOKS=0
        FAILED_BOOKS=0
        CRITICAL_ISSUES=""
        
        for report in $(find books/active_production -name "ENHANCED_QA_REPORT_*.json" 2>/dev/null); do
          TOTAL_BOOKS=$((TOTAL_BOOKS + 1))
          STATUS=$(jq -r '.overall_status' "$report" 2>/dev/null || echo "UNKNOWN")
          
          if [ "$STATUS" == "PASS" ]; then
            PASSED_BOOKS=$((PASSED_BOOKS + 1))
          else
            FAILED_BOOKS=$((FAILED_BOOKS + 1))
            BOOK_NAME=$(basename $(dirname "$report"))
            ISSUES=$(jq -r '.summary.critical_issues_count // 0' "$report" 2>/dev/null)
            CRITICAL_ISSUES="${CRITICAL_ISSUES}‚Ä¢ $BOOK_NAME: $ISSUES critical issues\n"
          fi
        done
        
        # Determine overall status
        if [ "$FAILED_BOOKS" -eq 0 ] && [ "$TOTAL_BOOKS" -gt 0 ]; then
          COLOR="good"
          EMOJI="‚úÖ"
          STATUS="All books passed QA"
        elif [ "$TOTAL_BOOKS" -eq 0 ]; then
          COLOR="warning"
          EMOJI="‚ö†Ô∏è"
          STATUS="No books found to validate"
        else
          COLOR="danger"
          EMOJI="‚ùå"
          STATUS="$FAILED_BOOKS books failed QA"
        fi
        
        # Build message
        PAYLOAD=$(cat <<EOF
        {
          "attachments": [{
            "color": "$COLOR",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "$EMOJI Book QA Validation"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Total Books:* $TOTAL_BOOKS"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Passed:* $PASSED_BOOKS"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Failed:* $FAILED_BOOKS"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Status:* $STATUS"
                  }
                ]
              }
        EOF
        )
        
        # Add critical issues if any
        if [ -n "$CRITICAL_ISSUES" ] && [ "$CRITICAL_ISSUES" != "" ]; then
          PAYLOAD="${PAYLOAD},
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Failed Books:*\n$CRITICAL_ISSUES\"
                }
              }"
        fi
        
        PAYLOAD="${PAYLOAD},
              {
                \"type\": \"context\",
                \"elements\": [{
                  \"type\": \"mrkdwn\",
                  \"text\": \"<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View in GitHub> ‚Ä¢ Triggered by ${{ github.actor }}\"
                }]
              }
            ]
          }]
        }"
        
        echo "$PAYLOAD" | curl -X POST -H 'Content-type: application/json' \
          --data @- \
          "$SLACK_WEBHOOK_URL"