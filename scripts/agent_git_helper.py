#!/usr/bin/env python3
"""
Git Helper for AI Agents - Automated PR Creation and Management
"""

import subprocess
import sys
import json
import os
from typing import Dict, List, Optional
from pathlib import Path


class AgentGitHelper:
    """Helper class for AI agents to interact with git repository safely"""
    
    def __init__(self, repo_path: str = "."):
        self.repo_path = Path(repo_path)
        self.config = self._load_agent_config()
        
    def _load_agent_config(self) -> Dict:
        """Load agent workflow configuration"""
        config_path = self.repo_path / ".github" / "agent-workflow.yml"
        if config_path.exists():
            import yaml
            with open(config_path) as f:
                return yaml.safe_load(f).get("agent_workflow", {})
        return {}
    
    def create_agent_branch(self, agent_type: str, task_name: str) -> str:
        """Create a new branch for agent work"""
        prefix = self.config.get("branch_prefix", "agent/")
        branch_name = f"{prefix}{agent_type}-{task_name}"
        
        # Clean branch name
        branch_name = branch_name.lower().replace(" ", "-").replace("_", "-")
        
        try:
            # Create and checkout branch
            subprocess.run(["git", "checkout", "-b", branch_name], 
                         cwd=self.repo_path, check=True, capture_output=True)
            print(f"‚úÖ Created branch: {branch_name}")
            return branch_name
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Failed to create branch: {e}")
            sys.exit(1)
    
    def commit_changes(self, message: str, files: Optional[List[str]] = None) -> bool:
        """Commit changes with proper agent attribution"""
        try:
            # Add files
            if files:
                for file in files:
                    subprocess.run(["git", "add", file], 
                                 cwd=self.repo_path, check=True)
            else:
                subprocess.run(["git", "add", "."], 
                             cwd=self.repo_path, check=True)
            
            # Commit with agent attribution
            full_message = f"ü§ñ {message}\n\nGenerated by AI agent"
            subprocess.run(["git", "commit", "-m", full_message], 
                         cwd=self.repo_path, check=True, capture_output=True)
            print(f"‚úÖ Committed changes: {message}")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Failed to commit: {e}")
            return False
    
    def push_and_create_pr(self, agent_type: str, task_description: str, 
                          changes_summary: str) -> bool:
        """Push branch and create PR with auto-merge"""
        try:
            # Get current branch
            result = subprocess.run(["git", "branch", "--show-current"], 
                                  cwd=self.repo_path, capture_output=True, text=True)
            branch_name = result.stdout.strip()
            
            # Push branch
            subprocess.run(["git", "push", "origin", branch_name], 
                         cwd=self.repo_path, check=True)
            print(f"‚úÖ Pushed branch: {branch_name}")
            
            # Create PR
            pr_title = f"ü§ñ {agent_type}: {task_description}"
            pr_body = self._generate_pr_body(agent_type, task_description, changes_summary)
            
            labels = self.config.get("labels", ["agent-generated"])
            label_args = []
            for label in labels:
                label_args.extend(["--label", label])
            
            cmd = ["gh", "pr", "create", 
                   "--title", pr_title,
                   "--body", pr_body] + label_args
            
            subprocess.run(cmd, cwd=self.repo_path, check=True)
            print(f"‚úÖ Created PR: {pr_title}")
            
            # Enable auto-merge if configured
            if self.config.get("auto_merge", {}).get("enabled", True):
                merge_method = self.config.get("auto_merge", {}).get("method", "squash")
                subprocess.run(["gh", "pr", "merge", "--auto", f"--{merge_method}"], 
                             cwd=self.repo_path, check=True)
                print("‚úÖ Enabled auto-merge")
            
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Failed to create PR: {e}")
            return False
    
    def _generate_pr_body(self, agent_type: str, task_description: str, 
                         changes_summary: str) -> str:
        """Generate PR body from template"""
        template = self.config.get("pr_template", """
## ü§ñ Agent-Generated Change

**Agent Type:** {agent_type}
**Task:** {task_description}

### Changes Made
{changes_summary}

### Validation
- [ ] CI tests pass
- [ ] Pre-commit hooks pass
- [ ] No breaking changes

**Auto-merge enabled** ‚úÖ Will merge when CI passes
        """.strip())
        
        return template.format(
            agent_type=agent_type,
            task_description=task_description,
            changes_summary=changes_summary
        )
    
    def rollback_to_main(self) -> bool:
        """Safely return to main branch"""
        try:
            subprocess.run(["git", "checkout", "main"], 
                         cwd=self.repo_path, check=True)
            subprocess.run(["git", "pull", "origin", "main"], 
                         cwd=self.repo_path, check=True)
            print("‚úÖ Returned to main branch")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Failed to return to main: {e}")
            return False


def main():
    """CLI interface for agent git operations"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Git helper for AI agents")
    parser.add_argument("action", choices=["create-branch", "commit", "create-pr", "rollback"])
    parser.add_argument("--agent-type", required=True, help="Type of agent")
    parser.add_argument("--task", help="Task description")
    parser.add_argument("--message", help="Commit message")
    parser.add_argument("--summary", help="Changes summary for PR")
    parser.add_argument("--files", nargs="*", help="Specific files to commit")
    
    args = parser.parse_args()
    
    helper = AgentGitHelper()
    
    if args.action == "create-branch":
        if not args.task:
            print("‚ùå --task required for create-branch")
            sys.exit(1)
        helper.create_agent_branch(args.agent_type, args.task)
        
    elif args.action == "commit":
        if not args.message:
            print("‚ùå --message required for commit")
            sys.exit(1)
        helper.commit_changes(args.message, args.files)
        
    elif args.action == "create-pr":
        if not all([args.task, args.summary]):
            print("‚ùå --task and --summary required for create-pr")
            sys.exit(1)
        helper.push_and_create_pr(args.agent_type, args.task, args.summary)
        
    elif args.action == "rollback":
        helper.rollback_to_main()


if __name__ == "__main__":
    main()
