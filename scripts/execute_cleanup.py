#!/usr/bin/env python3
"""
Execute cleanup based on Code Hygiene Agent recommendations
CAUTION: This script will reorganize your project structure!
"""

import argparse
import json
import shutil
import sys
from pathlib import Path

# Add parent directory to Python path
sys.path.append(str(Path(__file__).parent.parent))


def create_directory_structure(project_root: Path):
    """Create the recommended directory structure"""
    directories = [
        "src/kindlemint",
        "tests/unit",
        "tests/integration",
        "tests/fixtures",
        "config",
        "docs",
        "scripts/automation",
        "scripts/deployment",
        "agents",
        "data",
        "infrastructure",
        "notebooks",
    ]

    created = []
    for dir_path in directories:
        full_path = project_root / dir_path
        if not full_path.exists():
            full_path.mkdir(parents=True, exist_ok=True)
            created.append(dir_path)
            print(f"✅ Created: {dir_path}")

    return created


def move_test_files(project_root: Path, dry_run: bool = True):
    """Move test files to tests directory"""
    test_patterns = ["test_*.py", "*_test.py", "*_spec.py"]
    moved = []

    for pattern in test_patterns:
        for test_file in project_root.rglob(pattern):
            if "tests" not in str(test_file):
                # Determine target directory
                if "integration" in test_file.name:
                    target_dir = project_root / "tests" / "integration"
                else:
                    target_dir = project_root / "tests" / "unit"

                target_path = target_dir / test_file.name

                if dry_run:
                    print(
                        f"🔄 Would move: {
                            test_file.relative_to(project_root)} → {
                            target_path.relative_to(project_root)}"
                    )
                else:
                    target_path.parent.mkdir(parents=True, exist_ok=True)
                    shutil.move(str(test_file), str(target_path))
                    print(
                        f"✅ Moved: {
                            test_file.name} → {
                            target_path.relative_to(project_root)}"
                    )

                moved.append((str(test_file), str(target_path)))

    return moved


def consolidate_requirements(project_root: Path, dry_run: bool = True):
    """Consolidate multiple requirements files"""
    req_files = list(project_root.rglob("requirements*.txt"))

    if len(req_files) <= 1:
        return []

    # Collect all unique requirements
    all_requirements = set()
    for req_file in req_files:
        try:
            with open(req_file, "r") as f:
                requirements = [
                    line.strip()
                    for line in f
                    if line.strip() and not line.startswith("#")
                ]
                all_requirements.update(requirements)
        except Exception as e:
            print(f"⚠️  Error reading {req_file}: {e}")

    # Sort requirements
    sorted_requirements = sorted(all_requirements)

    # Create main requirements.txt
    main_req = project_root / "requirements.txt"

    if dry_run:
        print(
            f"🔄 Would consolidate {
                len(req_files)} requirements files into requirements.txt"
        )
        print(f"   Total unique requirements: {len(sorted_requirements)}")
    else:
        with open(main_req, "w") as f:
            f.write("# Consolidated requirements\n")
            f.write("# Generated by Code Hygiene Orchestrator\n\n")
            for req in sorted_requirements:
                f.write(f"{req}\n")

        # Remove old requirements files
        for req_file in req_files:
            if req_file != main_req:
                req_file.unlink()
                print(f"✅ Removed: {req_file.name}")

        print(f"✅ Consolidated {len(req_files)} files → requirements.txt")

    return sorted_requirements


def move_config_files(project_root: Path, dry_run: bool = True):
    """Move configuration files to config directory"""
    config_patterns = ["*.yml", "*.yaml", "*.json", "*.toml", "*.ini", "*.cfg"]
    config_dir = project_root / "config"
    moved = []

    for pattern in config_patterns:
        for config_file in project_root.glob(pattern):
            # Skip special files
            if config_file.name in [
                "package.json",
                "package-lock.json",
                "tsconfig.json",
            ]:
                continue

            target_path = config_dir / config_file.name

            if dry_run:
                print(
                    f"🔄 Would move: {config_file.name} → config/{config_file.name}")
            else:
                shutil.move(str(config_file), str(target_path))
                print(f"✅ Moved: {config_file.name} → config/")

            moved.append((str(config_file), str(target_path)))

    return moved


def remove_temp_files(project_root: Path, dry_run: bool = True):
    """Remove temporary files"""
    temp_patterns = ["*.pyc", "*.pyo", "*.tmp",
                     "*.temp", "*.bak", "*~", "debug_*"]
    removed = []

    for pattern in temp_patterns:
        for temp_file in project_root.rglob(pattern):
            if dry_run:
                print(
                    f"🗑️  Would remove: {temp_file.relative_to(project_root)}")
            else:
                temp_file.unlink()
                print(f"✅ Removed: {temp_file.relative_to(project_root)}")

            removed.append(str(temp_file))

    # Remove __pycache__ directories
    for cache_dir in project_root.rglob("__pycache__"):
        if dry_run:
            print(f"🗑️  Would remove: {cache_dir.relative_to(project_root)}/")
        else:
            shutil.rmtree(cache_dir)
            print(f"✅ Removed: {cache_dir.relative_to(project_root)}/")

        removed.append(str(cache_dir))

    return removed


def move_agent_files(project_root: Path, dry_run: bool = True):
    """Move agent and orchestrator files to agents directory"""
    agent_patterns = ["*_agent.py", "*orchestrat*.py", "*badge*.py"]
    agents_dir = project_root / "agents"
    moved = []

    for pattern in agent_patterns:
        for agent_file in project_root.rglob(pattern):
            if "agents" not in str(agent_file) and "scripts" not in str(agent_file):
                target_path = agents_dir / agent_file.name

                if dry_run:
                    print(
                        f"🔄 Would move: {agent_file.relative_to(
                            project_root)} → agents/{agent_file.name}"
                    )
                else:
                    shutil.move(str(agent_file), str(target_path))
                    print(f"✅ Moved: {agent_file.name} → agents/")

                moved.append((str(agent_file), str(target_path)))

    return moved


def generate_cleanup_report(actions: dict, output_file: str):
    """Generate a report of cleanup actions"""
    report = {
        "cleanup_summary": {
            "directories_created": len(actions.get("directories_created", [])),
            "files_moved": len(actions.get("test_files_moved", []))
            + len(actions.get("config_files_moved", []))
            + len(actions.get("agent_files_moved", [])),
            "files_removed": len(actions.get("temp_files_removed", [])),
            "requirements_consolidated": bool(
                actions.get("requirements_consolidated", [])
            ),
        },
        "actions": actions,
    }

    with open(output_file, "w") as f:
        json.dump(report, f, indent=2)

    print(f"\n📄 Cleanup report saved to: {output_file}")


def main():
    parser = argparse.ArgumentParser(
        description="Execute cleanup based on Code Hygiene analysis"
    )
    parser.add_argument(
        "--path", type=str, default=".", help="Project path to clean up"
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Show what would be done without making changes",
    )
    parser.add_argument(
        "--create-dirs",
        action="store_true",
        help="Create recommended directory structure",
    )
    parser.add_argument(
        "--move-tests", action="store_true", help="Move test files to tests directory"
    )
    parser.add_argument(
        "--consolidate-requirements",
        action="store_true",
        help="Consolidate requirements files",
    )
    parser.add_argument(
        "--move-config",
        action="store_true",
        help="Move config files to config directory",
    )
    parser.add_argument(
        "--remove-temp", action="store_true", help="Remove temporary files"
    )
    parser.add_argument(
        "--move-agents",
        action="store_true",
        help="Move agent files to agents directory",
    )
    parser.add_argument(
        "--all", action="store_true", help="Perform all cleanup actions"
    )

    args = parser.parse_args()

    project_root = Path(args.path).resolve()
    if not project_root.exists():
        print(f"❌ Path does not exist: {project_root}")
        return

    print(f"🧹 Project Cleanup Tool")
    print(f"   Project: {project_root}")
    print(f"   Mode: {'DRY RUN' if args.dry_run else 'EXECUTE'}")
    print("=" * 60)

    if args.dry_run:
        print("\n⚠️  DRY RUN MODE - No changes will be made\n")
    else:
        response = input(
            "\n⚠️  This will reorganize your project. Continue? (y/N): ")
        if response.lower() != "y":
            print("❌ Cleanup cancelled")
            return

    actions = {}

    # Create directory structure
    if args.create_dirs or args.all:
        print("\n📁 Creating directory structure...")
        actions["directories_created"] = create_directory_structure(
            project_root)

    # Move test files
    if args.move_tests or args.all:
        print("\n🧪 Moving test files...")
        actions["test_files_moved"] = move_test_files(
            project_root, args.dry_run)

    # Consolidate requirements
    if args.consolidate_requirements or args.all:
        print("\n📋 Consolidating requirements...")
        actions["requirements_consolidated"] = consolidate_requirements(
            project_root, args.dry_run
        )

    # Move config files
    if args.move_config or args.all:
        print("\n⚙️  Moving config files...")
        actions["config_files_moved"] = move_config_files(
            project_root, args.dry_run)

    # Remove temporary files
    if args.remove_temp or args.all:
        print("\n🗑️  Removing temporary files...")
        actions["temp_files_removed"] = remove_temp_files(
            project_root, args.dry_run)

    # Move agent files
    if args.move_agents or args.all:
        print("\n🤖 Moving agent files...")
        actions["agent_files_moved"] = move_agent_files(
            project_root, args.dry_run)

    # Generate report
    if not args.dry_run:
        generate_cleanup_report(actions, "cleanup_report.json")

    print(f"\n✅ Cleanup {'simulation' if args.dry_run else 'complete'}!")

    if args.dry_run:
        print("\n💡 To execute these changes, run without --dry-run")
    else:
        print("\n💡 Next steps:")
        print("   1. Update import statements in moved files")
        print("   2. Run tests to ensure everything works")
        print("   3. Commit the reorganized structure")


if __name__ == "__main__":
    main()
