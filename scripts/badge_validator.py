#!/usr/bin/env python3
"""
Badge Validation Orchestration Agent
Validates that all README badges are working and show real metrics, not fake placeholders
"""

import re
import requests
import sys
from pathlib import Path
from typing import List, Dict, Tuple


class BadgeValidator:
    """Orchestration agent to validate badges in README files"""
    
    def __init__(self):
        self.repo_owner = "IgorGanapolsky"
        self.repo_name = "ai-kindlemint-engine"
        self.forbidden_terms = [
            "unknown", "placeholder", "generated by tests", 
            "sonarcloud ready", "enabled", "monitoring"
        ]
        
    def extract_badges_from_readme(self, readme_path: Path) -> List[Dict]:
        """Extract all badges from README.md"""
        if not readme_path.exists():
            return []
            
        content = readme_path.read_text()
        badge_pattern = r'\[\!\[([^\]]*)\]\(([^)]+)\)\]\(([^)]+)\)'
        badges = []
        
        for match in re.finditer(badge_pattern, content):
            badges.append({
                "text": match.group(1),
                "image_url": match.group(2), 
                "link_url": match.group(3)
            })
            
        return badges
    
    def validate_badge_url(self, url: str) -> Tuple[bool, str]:
        """Check if badge URL returns valid response"""
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                return True, "OK"
            else:
                return False, f"HTTP {response.status_code}"
        except Exception as e:
            return False, str(e)
    
    def check_for_fake_badges(self, badges: List[Dict]) -> List[str]:
        """Detect fake/placeholder badges"""
        issues = []
        
        for badge in badges:
            text = badge["text"].lower()
            image_url = badge["image_url"].lower()
            
            # Check for forbidden placeholder terms
            for term in self.forbidden_terms:
                if term in text or term in image_url:
                    issues.append(f"❌ FAKE BADGE: '{badge['text']}' contains placeholder term '{term}'")
            
            # Check for static shields.io badges (likely fake)
            if "shields.io/badge" in image_url and any(term in image_url for term in ["100%", "95%", "ready", "enabled"]):
                issues.append(f"❌ STATIC BADGE: '{badge['text']}' appears to be a static placeholder")
            
            # Check for missing real service URLs
            if "codecov" in text.lower() and "codecov.io" not in image_url:
                issues.append(f"❌ MISSING SERVICE: Codecov badge doesn't link to codecov.io")
                
            if "sonar" in text.lower() and "sonarcloud.io" not in image_url:
                issues.append(f"❌ MISSING SERVICE: SonarCloud badge doesn't link to sonarcloud.io")
        
        return issues
    
    def validate_all_badges(self, readme_path: Path = None) -> Dict:
        """Main validation function"""
        if readme_path is None:
            readme_path = Path("README.md")
            
        print(f"🔍 Badge Validation Agent - Checking {readme_path}")
        
        badges = self.extract_badges_from_readme(readme_path)
        if not badges:
            return {"status": "error", "message": "No badges found in README"}
        
        print(f"📊 Found {len(badges)} badges to validate")
        
        results = {
            "status": "success",
            "total_badges": len(badges),
            "valid_badges": 0,
            "invalid_badges": 0,
            "fake_badges": 0,
            "issues": [],
            "recommendations": []
        }
        
        # Check for fake badges
        fake_issues = self.check_for_fake_badges(badges)
        results["issues"].extend(fake_issues)
        results["fake_badges"] = len(fake_issues)
        
        # Validate URLs
        for badge in badges:
            print(f"🌐 Checking: {badge['text']}")
            
            # Check image URL
            valid, msg = self.validate_badge_url(badge["image_url"])
            if valid:
                results["valid_badges"] += 1
                print(f"  ✅ Image URL: {msg}")
            else:
                results["invalid_badges"] += 1
                results["issues"].append(f"❌ BAD URL: '{badge['text']}' image URL failed: {msg}")
                print(f"  ❌ Image URL: {msg}")
            
            # Check link URL (if different)
            if badge["link_url"] != badge["image_url"]:
                valid, msg = self.validate_badge_url(badge["link_url"])
                if not valid:
                    results["issues"].append(f"❌ BAD LINK: '{badge['text']}' link URL failed: {msg}")
        
        # Generate recommendations
        if results["fake_badges"] > 0:
            results["recommendations"].append("🎯 Replace fake/static badges with real service badges")
        
        if results["invalid_badges"] > 0:
            results["recommendations"].append("🔧 Fix broken badge URLs")
            
        # Final status
        if results["issues"]:
            results["status"] = "failed"
        
        return results
    
    def print_report(self, results: Dict):
        """Print validation report"""
        print("\n" + "="*60)
        print("🛡️  BADGE VALIDATION REPORT")
        print("="*60)
        
        status_emoji = "✅" if results["status"] == "success" else "❌"
        print(f"{status_emoji} Status: {results['status'].upper()}")
        print(f"📊 Total badges: {results['total_badges']}")
        print(f"✅ Valid: {results['valid_badges']}")
        print(f"❌ Invalid: {results['invalid_badges']}")
        print(f"🚫 Fake: {results['fake_badges']}")
        
        if results["issues"]:
            print(f"\n🚨 ISSUES FOUND ({len(results['issues'])}):")
            for issue in results["issues"]:
                print(f"  {issue}")
        
        if results["recommendations"]:
            print(f"\n💡 RECOMMENDATIONS:")
            for rec in results["recommendations"]:
                print(f"  {rec}")
        
        print("="*60)


def main():
    """Run badge validation"""
    validator = BadgeValidator()
    results = validator.validate_all_badges()
    validator.print_report(results)
    
    # Exit with error code if validation failed
    if results["status"] == "failed":
        sys.exit(1)


if __name__ == "__main__":
    main()