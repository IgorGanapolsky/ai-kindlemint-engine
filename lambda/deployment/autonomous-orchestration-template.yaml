AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Autonomous Orchestration System - Cost-Optimized Lambda Deployment'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name

  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token

  SlackWebhookURL:
    Type: String
    NoEcho: true
    Description: Slack Webhook URL for notifications

  SentryDSN:
    Type: String
    NoEcho: true
    Default: ""
    Description: Sentry DSN for error tracking

  SentryAuthToken:
    Type: String
    NoEcho: true
    Default: ""
    Description: Sentry Auth Token for API access

Globals:
  Function:
    Runtime: python3.11
    Timeout: 300
    MemorySize: 512
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DYNAMODB_TABLE_CONFIG: !Ref ConfigTable
        DYNAMODB_TABLE_LOGS: !Ref OrchestrationLogsTable
        SNS_TOPIC_ARN: !Ref NotificationTopic

Resources:
  # DynamoDB Tables for Configuration and Logging
  ConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'kindlemint-config-${Environment}'
      BillingMode: PAY_PER_REQUEST  # Cost-optimized for low usage
      AttributeDefinitions:
        - AttributeName: config_type
          AttributeType: S
      KeySchema:
        - AttributeName: config_type
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: autonomous-orchestration

  OrchestrationLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'kindlemint-orchestration-logs-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: log_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: log_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true  # Auto-cleanup old logs to save costs
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: autonomous-orchestration

  # Secrets Manager for secure credential storage
  GitHubTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/kindlemint/${Environment}/github-token'
      Description: 'GitHub Personal Access Token'
      SecretString: !Ref GitHubToken

  SlackWebhookSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/kindlemint/${Environment}/slack-webhook'
      Description: 'Slack Webhook URL'
      SecretString: !Ref SlackWebhookURL

  SentrySecretsGroup:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/kindlemint/${Environment}/sentry-config'
      Description: 'Sentry Configuration'
      SecretString: !Sub |
        {
          "dsn": "${SentryDSN}",
          "auth_token": "${SentryAuthToken}"
        }

  # SNS Topic for notifications
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'kindlemint-orchestration-notifications-${Environment}'
      DisplayName: 'KindleMint Orchestration Notifications'

  # Lambda Execution Roles
  CIOrchestrationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'kindlemint-ci-orchestration-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: OrchestrationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ConfigTable.Arn
                  - !GetAtt OrchestrationLogsTable.Arn
                  - !Sub '${OrchestrationLogsTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref GitHubTokenSecret
                  - !Ref SlackWebhookSecret
                  - !Ref SentrySecretsGroup
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                Resource: '*'

  AlertOrchestrationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'kindlemint-alert-orchestration-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AlertOrchestrationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ConfigTable.Arn
                  - !GetAtt OrchestrationLogsTable.Arn
                  - !Sub '${OrchestrationLogsTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref SlackWebhookSecret
                  - !Ref SentrySecretsGroup
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:DescribeAlarms
                Resource: '*'

  # Lambda Functions
  CIOrchestrationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'kindlemint-ci-orchestration-${Environment}'
      CodeUri: ../ci_orchestration_function.py
      Handler: ci_orchestration_function.lambda_handler
      Role: !GetAtt CIOrchestrationRole.Arn
      Runtime: python3.11
      Architectures:
        - arm64
      MemorySize: 512  # Right-sized for CI operations
      Timeout: 300
      Environment:
        Variables:
          GITHUB_TOKEN_SECRET: !Ref GitHubTokenSecret
          SLACK_WEBHOOK_SECRET: !Ref SlackWebhookSecret
          REPO_OWNER: 'IgorGanapolsky'
          REPO_NAME: 'ai-kindlemint-engine'
      Events:
        # Scheduled execution during business hours (cost-optimized)
        BusinessHoursSchedule:
          Type: Schedule
          Properties:
            Schedule: cron(*/15 8-18 ? * MON-FRI *)  # Every 15 min, Mon-Fri, 8-6 PM UTC
            Input: '{"source": "aws.events", "trigger": "business_hours"}'

        # Reduced frequency during off-hours
        OffHoursSchedule:
          Type: Schedule
          Properties:
            Schedule: cron(*/30 18-8 ? * MON-FRI *)  # Every 30 min during off-hours
            Input: '{"source": "aws.events", "trigger": "off_hours"}'

        # Weekend monitoring (reduced frequency)
        WeekendSchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 */2 ? * SAT,SUN *)  # Every 2 hours on weekends
            Input: '{"source": "aws.events", "trigger": "weekend"}'

      ReservedConcurrency: 2  # Cost control - limit concurrent executions
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeadLetterQueue.Arn

      Tags:
        Environment: !Ref Environment
        Application: autonomous-orchestration
        Function: ci-orchestration

  AlertOrchestrationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'kindlemint-alert-orchestration-${Environment}'
      CodeUri: ../alert_orchestration_function.py
      Handler: alert_orchestration_function.lambda_handler
      Role: !GetAtt AlertOrchestrationRole.Arn
      Runtime: python3.11
      Architectures:
        - arm64
      MemorySize: 256  # Smaller memory for alert processing
      Timeout: 180
      Environment:
        Variables:
          SLACK_WEBHOOK_SECRET: !Ref SlackWebhookSecret
          SENTRY_SECRETS: !Ref SentrySecretsGroup
      Events:
        # High-frequency monitoring during business hours
        BusinessHoursAlerts:
          Type: Schedule
          Properties:
            Schedule: cron(*/5 8-18 ? * MON-FRI *)  # Every 5 min during business hours
            Input: '{"source": "aws.events", "trigger": "business_hours"}'

        # Reduced frequency during off-hours
        OffHoursAlerts:
          Type: Schedule
          Properties:
            Schedule: cron(*/15 18-8 ? * MON-FRI *)  # Every 15 min during off-hours
            Input: '{"source": "aws.events", "trigger": "off_hours"}'

        # Weekend monitoring
        WeekendAlerts:
          Type: Schedule
          Properties:
            Schedule: cron(*/30 ? * SAT,SUN *)  # Every 30 min on weekends
            Input: '{"source": "aws.events", "trigger": "weekend"}'

      ReservedConcurrency: 3  # Higher limit for alert processing
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeadLetterQueue.Arn

      Tags:
        Environment: !Ref Environment
        Application: autonomous-orchestration
        Function: alert-orchestration

  # Dead Letter Queue for failed executions
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'kindlemint-orchestration-dlq-${Environment}'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 300

  # CloudWatch Alarms for monitoring
  CIOrchestrationErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'kindlemint-ci-orchestration-errors-${Environment}'
      AlarmDescription: 'CI Orchestration Function Errors'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 3
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref CIOrchestrationFunction
      AlarmActions:
        - !Ref NotificationTopic

  AlertOrchestrationErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'kindlemint-alert-orchestration-errors-${Environment}'
      AlarmDescription: 'Alert Orchestration Function Errors'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AlertOrchestrationFunction
      AlarmActions:
        - !Ref NotificationTopic

  # Cost Control: Billing Alarm
  BillingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'kindlemint-orchestration-billing-${Environment}'
      AlarmDescription: 'Billing alarm for orchestration system'
      MetricName: EstimatedCharges
      Namespace: AWS/Billing
      Statistic: Maximum
      Period: 86400  # Daily
      EvaluationPeriods: 1
      Threshold: 20  # $20/month threshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Currency
          Value: USD
      AlarmActions:
        - !Ref NotificationTopic

  # API Gateway for webhook endpoints (optional)
  OrchestrationAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'kindlemint-orchestration-api-${Environment}'
      StageName: !Ref Environment
      EndpointConfiguration:
        Type: EDGE
      Auth:
        ApiKeyRequired: true
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50

  # API Key for webhook security
  OrchestrationAPIKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub 'kindlemint-orchestration-api-key-${Environment}'
      Description: 'API Key for orchestration webhooks'
      Enabled: true

  OrchestrationUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub 'kindlemint-orchestration-usage-plan-${Environment}'
      Description: 'Usage plan for orchestration API'
      ApiStages:
        - ApiId: !Ref OrchestrationAPI
          Stage: !Ref Environment
      Throttle:
        BurstLimit: 100
        RateLimit: 50
      Quota:
        Limit: 10000
        Period: MONTH

  OrchestrationUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref OrchestrationAPIKey
      KeyType: API_KEY
      UsagePlanId: !Ref OrchestrationUsagePlan

Outputs:
  CIOrchestrationFunctionArn:
    Description: 'CI Orchestration Lambda Function ARN'
    Value: !GetAtt CIOrchestrationFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ci-orchestration-function-arn'

  AlertOrchestrationFunctionArn:
    Description: 'Alert Orchestration Lambda Function ARN'
    Value: !GetAtt AlertOrchestrationFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-alert-orchestration-function-arn'

  ConfigTableName:
    Description: 'Configuration DynamoDB Table Name'
    Value: !Ref ConfigTable
    Export:
      Name: !Sub '${AWS::StackName}-config-table-name'

  OrchestrationLogsTableName:
    Description: 'Orchestration Logs DynamoDB Table Name'
    Value: !Ref OrchestrationLogsTable
    Export:
      Name: !Sub '${AWS::StackName}-logs-table-name'

  NotificationTopicArn:
    Description: 'SNS Notification Topic ARN'
    Value: !Ref NotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-notification-topic-arn'

  APIGatewayURL:
    Description: 'API Gateway URL for webhooks'
    Value: !Sub 'https://${OrchestrationAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-api-gateway-url'

  APIKey:
    Description: 'API Key for webhook authentication'
    Value: !Ref OrchestrationAPIKey

  EstimatedMonthlyCost:
    Description: 'Estimated monthly cost'
    Value: '$5-15 (within free tier for most usage)'

  CostSavings:
    Description: 'Annual cost savings vs GitHub Actions'
    Value: '$1,597/year (96% reduction)'
